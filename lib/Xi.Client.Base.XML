<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xi.Client.Base</name>
    </assembly>
    <members>
        <member name="T:Xi.Client.ApiClasses.XiAdhocDataSubscription">
            <summary>
            <para>This subclass of XiDaSubscription defines a data subscription that is 
            used to read or write data objects without the client application first having 
            to add them to the subscription or to enable them. </para>
            <para>Adhoc reads and writes are performed by supplying the InstanceId of one or 
            more data objects, plus the value for writes. The data objects are automatically 
            added to the subscription and enabled. They remain in the subscription for 
            a period of time specified by the inactivity timeout of the subscription.</para>
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiDaSubscription">
            <summary>
            This subclass of XiSubscription defines a subscription for data.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiSubscription">
            <summary>
            This abstract class is used to define subscription's that wrap Xi Lists.  Each subclass wraps 
            a specific type of Xi List.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscription.#ctor(Xi.Client.ApiClasses.XiServer)">
            <summary>
            This constructor creates a new subscription for the specified server.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscription.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscription.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscription.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscription.EnableSubscription(System.Boolean)">
            <summary>
            <para>This method is used to enable or disable updating of the subscription
            by the server.  </para>
            <para>When a subscription is disabled, the server excludes it from participating in 
            callbacks and polls. However, at the option of the server, the server may continue 
            updating its cache for the elements of the list.</para>
            </summary>
            <param name="enableUpdating">
            Indicates, when TRUE, that updating of the subscription is to be enabled,
            and when FALSE, that updating of the subscription is to be disabled.
            </param>
            <returns>
            Returns TRUE if the request succeeds, otherwise FALSE.
            </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscription.ModifyListAttributes(System.Nullable{System.UInt32},System.Nullable{System.UInt32},Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is used to change the update rate, buffering rate, and/or 
            filter set of a subscription.  The new value replace the old values if they exist.
            </summary>
            <param name="updateRate">
            The new update rate of the subscription.  The server will negotiate this rate to one 
            that it can support.  GetListAttributes can be used to obtain the current 
            value of this parameter.  Null if the update rate is not to be updated.  
            </param>
            <param name="bufferingRate">
            The new buffering rate of the subscription.  The server will negotiate this rate to one 
            that it can support.  GetListAttributes can be used to obtain the current 
            value of this parameter.  Null if the buffering rate is not to be updated.
            </param>
            <param name="filterSet">
            The new set of filters.  The server will negotiate these filters to those 
            that it can support.  GetListAttributes can be used to obtain the current 
            value of this parameter.  Null if the filters are not to be updated.
            </param>
            <returns>
            The revised update rate, buffering rate, and filter set.  Attributes 
            that were not updated are set to null in this response.
            </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscription.TouchSubscription">
            <summary>
            <para>This method is used to cause a subscription to be "touched".</para> 
            <para>For subscriptions that contain data objects, this method causes 
            the server to update all data objects in the subscription that are currently 
            enabled (see the EnableListElementUpdating() method), mark them 
            as changed (even if their values did not change), and then return 
            them all to the client in the next callback or poll. </para>  
            <para>For subscriptions that contain events, this method causes 
            the server to mark all alarms/event in the subscription as changed, 
            and then return them all to the client in the next callback or poll.</para>
            </summary>
            <returns>
            The result code for the operation.  See XiFaultCodes class for 
            standardized result codes. 
            </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscription.SubscribeForUpdates(System.Boolean)">
            <summary>
            This method is used to enable/disable the subscription's internal callback used 
            to receive updates from the server.  This callback is specific to the type of the 
            subscription.
            </summary>
            <param name="enroleForEvents">Enable the callback, when TRUE, otherwise disable callback.</param>
            <returns>Returns TRUE if the request succeeded, otherwise FALSE.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscription.NotifyCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
            <summary>
            This method is an implementation of the CollectionChanged() event.  This method 
            is defined for future WPF support.
            </summary>
            <param name="action">Indicates the type of change (e.g. Add)</param>
            <param name="changedXiSubscription">The object associated with the change.</param>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscription._hasBeenDisposed">
            <summary>
            This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscription._server">
            <summary>
            This data member is the private representation of the Server public property
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscription._updateRate">
            <summary>
            This data member is the protected representation of the UpdateRate public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscription._bufferingRate">
            <summary>
            This data member is the protected representation of the BufferingRate public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscription._filterSet">
            <summary>
            This data member is the protected representation of the FilterSet public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscription._readable">
            <summary>
            This data member is the protected representation of the Readable public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscription._writeable">
            <summary>
            This data member is the protected representation of the Writeable public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscription._subscribeable">
            <summary>
            This data member is the protected representation of the Subscribeable public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscription._clientTag">
            <summary>
            This data member is the private representation of the Tag public property
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscription.Server">
            <summary>
            This property is the server in which the subscription is created and maintained.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscription.Valid">
            <summary>
            This property indicates, when TRUE, that the server for the subscription has been defined and 
            that the subscription has not been disposed. Otherwise, FALSE.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscription.UpdateRate">
            <summary>
            This property exposes the update rate contained in the ListAttributes property. 
            It can be set only as part of the constructor or using the ModifyListAttributes() 
            method.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscription.BufferingRate">
            <summary>
            This property exposes the buffering rate contained in the ListAttributes property. 
            It can be set only as part of the constructor or using the ModifyListAttributes() 
            method.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscription.FilterSet">
            <summary>
            This property exposes the filter set contained in the ListAttributes property. 
            The filter set is used by the server to select elements for the subscription.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscription.ClientSubscriptionId">
            <summary>
            This property contains the ClientBase-assigned identifier for this subscription.
            This identifier is unique within the XiClientClass.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscription.ServerSubscriptionId">
            <summary>
            This property contains the server-assigned identifier for this subscription.
            This identifier is unique within the context with the server.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscription.ListAttributes">
            <summary>
            This property returns a copy of the Xi List Attributes from the server.
            The ModifyListAttributes method is used oo change the List Attribute.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscription.Readable">
            <summary>
            This property indicates whether this subscription can be used to read values from the server. 
            Setting this property to TRUE causes this subscription to open an endpoint with the server 
            for reading.   
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscription.Writeable">
            <summary>
            This property indicates whether this subscription can be used to write values to the server. 
            Setting this property to TRUE causes this subscription to open an endpoint with the server 
            for writing.   
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscription.Subscribeable">
            <summary>
            This property indicates whether this subscription can receive updates from the server. 
            Setting this property to TRUE causes this subscription to be registered with the server 
            for updates. When TRUE, the client application  will receive updates through an event 
            specific to the type of the subscription.  
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscription.Tag">
            <summary>
            This property allows the client application to associate a client-defined object
            with the subscription.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscription.XiList">
            <summary>
            This data member returns the Xi List underlying the subscription as an XiListBase object.
            </summary>
        </member>
        <member name="E:Xi.Client.ApiClasses.XiSubscription.CollectionChanged">
            <summary>
            This event is used to notify the client application of a change to the subscription.
            This event is defined for WPF support.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.#ctor(Xi.Client.ApiClasses.XiServer,System.TimeSpan,System.TimeSpan,Xi.Contracts.Data.FilterSet)">
            <summary>
            This constructor creates a new data subscription for the specified server.
            </summary>
            <param name="server">The server associated with this subscription</param>
            <param name="updateRate">The update rate for this subscription</param>
            <param name="bufferingRate">The buffering rate for this subscription</param>
            <param name="filterSet">The filter set for this subscription.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() method 
            of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for data subscriptions.
            </summary>
            <returns>Returns the enumerator for the list of objects in the data subscription. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.System#Collections#Generic#IEnumerable{Xi#Client#ApiClasses#XiSubscriptionDataObject}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for the list of data objects in the subscription. 
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>Returns the enumerator for list of data objects in the subscription. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.Find(System.Predicate{Xi.Client.ApiClasses.XiSubscriptionDataObject})">
            <summary>
            This method returns data objects selected from the subscription by the match predicate.
            </summary>
            <param name="match">The predicate that searches the list for matches against 
            XiSubscriptionDataObject properties.</param>
            <returns>Returns data objects selected by the match predicate.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.EnableSubscription(System.Boolean)">
            <summary>
            <para>This method is used to enable or disable updating of the subscription. 
            When this method is called, the enabled state of the subscription is changed, 
            but the enabled state of the individual elements of the subscription is unchanged. </para>
            <para>When a subscription is disabled, the server excludes it from participating in 
            callbacks and polls. However, at the option of the server, the server may continue 
            updating its cache for the elements of the subscription.</para>
            <para>Calling this method also causes the local copy of the list attributes to be 
            updated.</para>
            </summary>
            <param name="enableUpdating">
            Indicates, when TRUE, that updating of the subscription is to be enabled,
            and when FALSE, that updating of the subscription is to be disabled.</param>
            <returns>Returns TRUE if the subscription was successfully enabled or disabled.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.AddDataObject(Xi.Contracts.Data.InstanceId,Xi.Contracts.Constants.ListElementOptions)">
            <summary>
            <para>This method creates and adds a data object to the local copy of the subscription 
            for the specified InstanceId. After the client application calls this method for 
            each data object to be added to the subscription, it must call the CommitAddedValues() 
            method to add them to the server copy of the subscription.</para>
            <para>Note:	Client applications should avoid calling this method and following it 
            with a call to CommitAddedValues() for each data object to be added.</para>
            </summary>
            <param name="instanceId">The InstanceId of the data object.</param>
            <param name="options">This parameter defines additional options for adding the data object to the list.</param>
            <returns>Returns the newly created and added data object.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.RemoveDataObject(Xi.Client.ApiClasses.XiSubscriptionDataObject)">
            <summary>
            This method removes a data object from the subscription and disposes of it.
            </summary>
            <param name="dataObject">The data object to remove.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.CommitAddedDataObjects">
            <summary>
            This method adds a list of data objects to the server that were individually added 
            to the local copy of the subscription using the AddDataObject() method.  It returns 
            the list of data objects that could not be added to the server.
            </summary>
            <returns>The list of data objects that could not be added to the server</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.CommitRemovedDataObjects">
            <summary>
            This method removes a list of data objects from the server that were individually 
            removed from the copy of the subscription using the AddDataObject() method.  It 
            returns the list of data objects that could not be removed from the server.
            </summary>
            <returns>The list of data objects that could not be removed from the server</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.EnableDataObjects(System.Boolean,System.Collections.Generic.IEnumerable{Xi.Client.ApiClasses.XiSubscriptionDataObject})">
            <summary>
            <para>This method is used to enable or disable updating of 
            individual elements of a list.  If the dataObjectsToEnableOrDisable parameter is 
            null, then all elements of the list are enabled/disabled.  This call 
            does not change the enabled state of the list itself.</para>
            <para>When an element of the list is disabled, the server excludes it 
            from participating in callbacks and polls. However, at the option of the 
            server, the server may continue updating its cache for the element.</para>
            </summary>
            <param name="enableUpdating">
            Indicates, when TRUE, that updating of the list is to be enabled,
            and when FALSE, that updating of the list is to be disabled.
            </param>
            <param name="dataObjectsToEnableOrDisable">The list of data objects to be 
            enabled or disabled.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.TouchDataObjects(System.Collections.Generic.IEnumerable{Xi.Client.ApiClasses.XiSubscriptionDataObject})">
            <summary>
            <para>This method is used to cause one or more data objects of 
            a list to be "touched".  Data objects that are in the disabled 
            state are not affected by this method.  </para>
            <para>Touching an enabled data object causes the server to update 
            the data object, mark it as changed (even if their values did not change), 
            and then return it to the client in the next callback or poll.</para> 
            </summary>
            <param name="dataObjectsToTouch">
            The data objects to touch.
            </param>
            <returns>
            The list of error codes for the data objects that could not be 
            touched.  See XiFaultCodes claass for standardized result codes. 
            Data objects that were successfully touched are not included in this 
            list.
            </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.ReadValues(System.Collections.Generic.IEnumerable{Xi.Client.ApiClasses.XiSubscriptionDataObject})">
            <summary>
            This method is used to read the values of one or more data objects in the subscription.  
            </summary>
            <param name="dataObjectsToRead">The list of data objects to read.  The values 
            are returned in the data objects.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.CommitPendingDaValueWrites">
            <summary>
            <para>Writing data object values to the server is a two step process composed of preparing 
            a list of data objects to be written, followed by writing that list to the server. </para>
            <para>This method is used in the first step to individually mark each data object in the 
            subscription as ready for writing.  It examines all data objects in the Data List that are 
            ready for writing and writes them to the server .  </para>
            </summary>
            <returns>The list of data objects whose write failed.  Results are not returned 
            data object whose writes succeeded.  If all writes succeeded,null is returned.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.SubscribeForUpdates(System.Boolean)">
            <summary>
            This method is used to enable/disable the callback used to receive updates from the server.
            </summary>
            <param name="enroleForEvents">Enable the callback, when TRUE, otherwise disable callback.</param>
            <returns>Returns TRUE to indicate that this class supports the callback.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.OnValuesNotification(System.Object,Xi.Client.Base.API.XiDataNotificationData)">
            <summary>
            This method is a callback method used to receive updated values from the server.  This 
            method, in turn, calls the XiDaValueUpdateEventHandler event method provided by the 
            client application.
            </summary>
            <param name="sender">The object calling this method.</param>
            <param name="ea">The XiDataNotificationData that contains the updated values.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.SynchSubscriptionList(System.Collections.Generic.List{Xi.Contracts.Data.InstanceId},System.Boolean)">
            <summary>
            <para>This method is used to align the subscription list elements with the list 
            specified by the instanceIds parameter.  The new instanceIds are added, and 
            instanceIds that are in the subscription list but not in the instanceIds are 
            removed from the subscription.</para>
            <para>A typical use of this method is by a listbox of items that can be updated 
            by the user. The client application displaying the listbox can call this method 
            with the listbox instanceIds and this method will synchronize the subscription 
            with the listbox.
            or </para>
            </summary>
            <param name="instanceIds">The list of instanceId to which the subscription is 
            to be synchronized.
            </param>
            <param name="enableNewItems">Specifies, when TRUE, that new items added to the 
            subscription are to be enabled.
            </param>
            <returns>The list of instanceIds/result codes that could not be added to the subscription.</returns>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiDaSubscription._dataList">
            <summary>
            This data member associates the subscription with an underlying ClientBase data list.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiDaSubscription._addedDataObjectCount">
            <summary>
            This data member contains the number of data objects added to the subscription
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiDaSubscription._disposedDataObjectCount">
            <summary>
            This data member contains the number of data objects disposed from the subscription
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiDaSubscription.Valid">
            <summary>
            This property indicates, when TRUE, that the server for the subscription has been 
            defined, that the subscription has not been disposed, and that the subscription 
            has been associated with an underlying ClientBase data list. Otherwise, FALSE.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiDaSubscription.ClientSubscriptionId">
            <summary>
            This property contains the ClientBase-assigned identifier for this subscription.
            This identifier is unique within the XiClientClass.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiDaSubscription.ServerSubscriptionId">
            <summary>
            This property contains the server-assigned identifier for this subscription.
            This identifier is unique within the context with the server.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiDaSubscription.ListAttributes">
            <summary>
            This property returns a copy of the Xi List Attributes from the server.
            The ModifyListAttributes method is used oo change the List Attribute.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiDaSubscription.Count">
            <summary>
            This data member provides the number of XiSubscriptionDataObject in the XiDaSubscription.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiDaSubscription.XiList">
            <summary>
            This data member returns the data list as an XiListBase object.
            </summary>
        </member>
        <member name="E:Xi.Client.ApiClasses.XiDaSubscription.PropertyChanged">
            <summary>
            This event is used to report property changes to the client application.
            </summary>
        </member>
        <member name="E:Xi.Client.ApiClasses.XiDaSubscription.DaValuesUpdateEvent">
            <summary>
            This event is used to report updated data object values to the client application.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiDaSubscription.XiDaSubscriptionEnumerator">
            <summary>
            This class defines the enumerator used to support the XiDaSubscription enumerators. It 
            defines the enumerators for the data objects of a data subscription
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.XiDaSubscriptionEnumerator.#ctor(Xi.Client.ApiClasses.XiDaSubscription)">
            <summary>
            This constructor creates a new data subscription enumerator.
            </summary>
            <param name="subscription">The subscription for which the enumerator is to be created.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.XiDaSubscriptionEnumerator.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.XiDaSubscriptionEnumerator.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiDaSubscription.XiDaSubscriptionEnumerator._iEnumerator">
            <summary>
            The typed enumerator for the class
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.XiDaSubscriptionEnumerator.MoveNext">
            <summary>
            This method advances the enumerator to the next element of the list.
            </summary>
            <returns>Returns true if the enumerator successfully advanced to the next element 
            in the list; FALSE if the enumerator passed the end of the list.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaSubscription.XiDaSubscriptionEnumerator.Reset">
            <summary>
            This method sets the enumerator to its initial position, which is the before the first 
            element of the list.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiDaSubscription.XiDaSubscriptionEnumerator.Current">
            <summary>
            This property gets the element at the current position of the enumerator 
            and returns it as an object.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiDaSubscription.XiDaSubscriptionEnumerator.System#Collections#Generic#IEnumerator{Xi#Client#ApiClasses#XiSubscriptionDataObject}#Current">
            <summary>
            This property gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAdhocDataSubscription.#ctor(Xi.Client.ApiClasses.XiServer,System.TimeSpan,System.TimeSpan)">
            <summary>
            This constructor creates a new data subscription for the specified Xi server using 
            the supplied update rate and inactivity timeout.
            </summary>
            <param name="server">The server associated with this subscription</param>
            <param name="updateRate">The update rate for this subscription</param>
            <param name="inactivityTimeout">The inactivity timeout for data objects in 
            this subscription.  </param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAdhocDataSubscription.#ctor(Xi.Client.ApiClasses.XiServer,System.TimeSpan)">
            <summary>
            This constructor creates a new data subscription for the specified Xi Server
            using the supplied update rate.  It does not create the inactivity timer.
            </summary>
            <param name="server"></param>
            <param name="updateRate"></param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAdhocDataSubscription.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAdhocDataSubscription.ReadValues(System.Collections.Generic.IEnumerable{Xi.Contracts.Data.InstanceId})">
            <summary>
            This method is used to read one or more values using the InstanceId to identify the 
            data objects to be written. When this method is used, the data objects to be read do 
            not have to have been previously added to the subscription's list of data objects.
            </summary>
            <param name="instanceIds">The list of InstanceIds of the data objects to be written.</param>
            <returns>The list of XiDaValues that were read. Each XiSubscriptionDataObject in the list contains 
            the InstanceId and the value. The value contains the StatusCode that indicates 
            the success or failure of the read. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAdhocDataSubscription.WriteValues(System.Collections.Generic.IEnumerable{Xi.Client.ApiClasses.AdhocWriteValue})">
            <summary>
            This method is used to write one or more values using the InstanceId to identify the 
            data objects to be written.  When this method is used, the data objects to be written 
            do not have to have been previously added to the subscription's list of data objects.
            </summary>
            <param name="writeValues">The list of InstanceIds/Values to be written.</param>
            <returns>The list of XiDaValues whose values failed to be written. Each XiSubscriptionDataObject 
            in the list contains the InstanceId and the ResultCodeWrite. The ResultCodeWrite is an HResult 
            that indicates success or failure of the write. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAdhocDataSubscription.FindOrAddInstanceId(Xi.Contracts.Data.InstanceId,Xi.Contracts.Constants.ListElementOptions,System.Boolean@)">
            <summary>
            This method finds a data object in the subscription's list by its InstanceId. If there 
            is no data object for this InstanceId, a value is created for it and added to the list.
            </summary>
            <param name="instanceId">The InstanceId of the value to find or add.</param>
            <param name="options">The options to be used when adding an InstanceId to the list.</param>
            <param name="wasAdded">Indicates when TRUE, that the data object was added, and 
            when FALSE that the data object already existed.</param>
            <returns>The XiDataValue for the InstanceId.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAdhocDataSubscription.InactivityMonitor(System.Object)">
            <summary>
            This method is implemented as the thread that periodically examines the list for this 
            subscription and deletes data objects from it that have not been accessed within the
            specified inactivity timeout.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAdhocDataSubscription.DoLifetimeControl(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="keepInterval"></param>
            <returns></returns>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiAdhocDataSubscription._inactivityTimeout">
            <summary>
            This data member defines the time a data object will remain in the subscription if 
            it is not being accessed. 
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiAdhocDataSubscription._inactivityTimer">
            <summary>
            This timer cyclically monitors the data objects in the subscription and removes 
            those that have not been accessed for a period of time equal to or greater than 
            the time span defined by _inactivityTimeout.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAdhocDataSubscription.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isDisposing"></param>
            <returns></returns>
        </member>
        <member name="T:Xi.Client.ApiClasses.AdhocWriteValue">
            <summary>
            This class contains the InstanceId and the value of a data object to be written.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.AdhocWriteValue.#ctor(Xi.Contracts.Data.InstanceId,Xi.Client.ApiClasses.XiSubscriptionDataValue)">
            <summary>
            This constructor creates an AdhocWriteValue object from its InstanceId and value.
            </summary>
            <param name="instanceId">The InstanceId of the data object.</param>
            <param name="writeValue">The value of the data object.</param>
        </member>
        <member name="F:Xi.Client.ApiClasses.AdhocWriteValue.InstanceId">
            <summary>
            The InstanceId of the value to be written.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.AdhocWriteValue.WriteValue">
            <summary>
            The value to be written.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiDaValueUpdateEventHandler">
            <summary>
            This delegate defines the callback for reporting data updates to the client application.
            </summary>
            <param name="sender">The XiSubscription that is sending the alarms and events to the client application.</param>
            <param name="daValueUpdates">The list of data updates being reported.</param>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiDaValueUpdateEventArgs">
            <summary>
            This class defines the notification data used to report data updates to the client application.
            The sending XiDaSubscription uses the Add() method to add data updates to the notification, and the 
            receiving client application uses either the enumerator or indexer to retrieve them.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaValueUpdateEventArgs.#ctor">
            <summary>
            This constructor creates a new XiDaValueUpdateEventArgs object.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaValueUpdateEventArgs.#ctor(System.Int32)">
            <summary>
            This constructor creates a new XiDaValueUpdateEventArgs object of the specified size.
            </summary>
            <param name="dataObjectListSize">The number of XiSubscriptionDataObjects to be included in the notification.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaValueUpdateEventArgs.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for XiDaValueUpdateEventArgs.
            </summary>
            <returns>Returns the enumerator for the list of objects in the XiDaValueUpdateEventArgs. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaValueUpdateEventArgs.System#Collections#Generic#IEnumerable{Xi#Client#ApiClasses#XiSubscriptionDataObject}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for data objects in the XiDaValueUpdateEventArgs.
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>The enumerator for data objects in the XiDaValueUpdateEventArgs. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiDaValueUpdateEventArgs.Add(Xi.Client.ApiClasses.XiSubscriptionDataObject)">
            <summary>
            This method adds an XiSubscriptionDataObject to the list of XiSubscriptionDataObjects 
            being reported to the client application.
            </summary>
            <param name="dataObject">The XiSubscriptionDataObject to be added</param>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiDaValueUpdateEventArgs._dataObjects">
            <summary>
            This data member contains the XiSubscriptionDataObjects being reported to the client application. 
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiDaValueUpdateEventArgs.Item(System.Int32)">
            <summary>
            This indexer allows the client to index through the list of XiSubscriptionDataObjects.
            </summary>
            <param name="idx">The zero-based index of the desired XiSubscriptionDataObject.</param>
            <returns>Returns the indexed XiSubscriptionDataObject.</returns>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiDaValueUpdateEventArgs.Count">
            <summary>
            This data member provides the number of XiSubscriptionDataObjects being reported to the client application.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiAeNotificationEventHandler">
            <summary>
            This delegate defines the callback for reporting new alarms and events to the client application
            </summary>
            <param name="sender">The XiAeSubscription that is sending the alarms and events to the client application.</param>
            <param name="notificationData">The alarms and events that are being sent to the client application.</param>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiAeNotificationEventArgs">
            <summary>
            This class defines the notification data used to report new alarms and events to the client application.
            The sending XiAeSubscription uses the Add() method to add alarms and events to the notification, and the 
            receiving client application uses either the enumerator or indexer to retrieve them.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeNotificationEventArgs.#ctor(System.Int32)">
            <summary>
            This constructor creates a new XiAeNotificationEventArgs object of the specified size.
            </summary>
            <param name="aeValueListSize">The number of XiSubscriptionAeElements to be included in the notification.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeNotificationEventArgs.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for XiAeNotificationEventArgs.
            </summary>
            <returns>Returns the enumerator for the list of objects in the XiAeNotificationEventArgs. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeNotificationEventArgs.System#Collections#Generic#IEnumerable{Xi#Client#ApiClasses#XiSubscriptionAeElement}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for event list elements in the XiAeNotificationEventArgs.
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>The enumerator for event list elements in the XiAeNotificationEventArgs. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeNotificationEventArgs.Add(Xi.Client.ApiClasses.XiSubscriptionAeElement)">
            <summary>
            This method adds an XiSubscriptionAeElement to the list of XiSubscriptionAeElements 
            being reported to the client application.
            </summary>
            <param name="aeValue">The XiSubscriptionAeElement to be added</param>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiAeNotificationEventArgs._eventMessages">
            <summary>
            This data member contains the XiSubscriptionAeElements being reported to the client application. 
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiAeNotificationEventArgs.Item(System.Int32)">
            <summary>
            This indexer allows the client to index through the list of XiSubscriptionAeElements.
            </summary>
            <param name="idx">The zero-based index of the desired XiSubscriptionAeElement.</param>
            <returns>Returns the indexed XiSubscriptionAeElement.</returns>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiAeNotificationEventArgs.Count">
            <summary>
            This data member provides the number of XiSubscriptionAeElements being reported to the client application.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiAeSorter">
            <summary>
            
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeSorter.DoCompare(Xi.Client.ApiClasses.XiSubscriptionAeElement,Xi.Client.ApiClasses.XiSubscriptionAeElement)">
            <summary>
            This method is a placeholder for comparing two XiSubscriptionAeElement objects.  The implementer 
            should complete this method if desired.
            </summary>
            <param name="eventValueA">The first XiSubscriptionAeElement to compare.</param>
            <param name="eventValueB">The second XiSubscriptionAeElement to compare.</param>
            <returns>Returns 0 if eventValueA equals eventValueB, 1 if eventValueB is greater than eventValueA, 
            and -1 if eventValueB is less than eventValueA.</returns>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiAeSubscription">
            <summary>
            This subclass of XiSubscription defines a subscription for alarms and events.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeSubscription.#ctor(Xi.Client.ApiClasses.XiServer,System.TimeSpan,System.TimeSpan,Xi.Contracts.Data.FilterSet)">
            <summary>
            This constructor creates a new alarms and events subscription for the specified server.
            </summary>
            <param name="server">The server associated with this subscription</param>
            <param name="updateRate">The update rate for this subscription</param>
            <param name="bufferingRate">The buffering rate for this subscription</param>
            <param name="filterSet">The filter set for this subscription.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeSubscription.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for AE subscriptions.
            </summary>
            <returns>Returns the enumerator for the list of objects in the AE subscription. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeSubscription.System#Collections#Generic#IEnumerable{Xi#Client#ApiClasses#XiSubscriptionAeElement}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for the list of event list elements in the subscription. 
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>Returns the enumerator for the list of event list elements in the subscription. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeSubscription.AddEventMessageFields(System.UInt32,System.Collections.Generic.IEnumerable{Xi.Contracts.Data.TypeId})">
            <summary>
            This method is used to request that category-specific fields be 
            included in event messages generated for alarms and events of 
            the category for this subscription.
            </summary>
            <param name="categoryId">
            The category for which event message fields are being added.
            </param>
            <param name="fieldObjectTypeIds"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeSubscription.Find(System.Predicate{Xi.Client.ApiClasses.XiSubscriptionAeElement})">
            <summary>
            This method returns subscription elements (alarms and events) 
            selected by the match predicate.
            </summary>
            <param name="match">The predicate that searches the list for matches against 
            XiSubscriptionAeElement properties.</param>
            <returns>Returns subscription elements selected by the match predicate.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeSubscription.EnableSubscription(System.Boolean)">
            <summary>
            <para>This method is used to enable or disable updating of the subscription
            by the server.  </para>
            <para>When a subscription is disabled, the server excludes it from participating in 
            callbacks and polls. However, at the option of the server, the server may continue 
            updating its cache for the elements of the list.</para>
            </summary>
            <param name="enableUpdating">
            Indicates, when TRUE, that updating of the subscription is to be enabled,
            and when FALSE, that updating of the subscription is to be disabled.
            </param>
            <returns>
            Returns TRUE if the request succeeds, otherwise FALSE.
            </returns>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiAeSubscription._eventList">
            <summary>
            This data member associates the subscription with an underlying ClientBase event list.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeSubscription.SubscribeForUpdates(System.Boolean)">
            <summary>
            This method is used to enable/disable the callback used to receive updates from the server.
            </summary>
            <param name="enroleForEvents">Enable the callback, when TRUE, otherwise disable callback.</param>
            <returns>Returns TRUE to indicate that this class supports the callback.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeSubscription.OnEventsNotification(System.Object,Xi.Client.Base.API.XiEventsNotificationData)">
            <summary>
            This event is used to notify the client application when new events are received.
            </summary>
            <param name="sender">The sending object.</param>
            <param name="ea">The notification data that contains the new alarms and events.</param>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiAeSubscription.Count">
            <summary>
            This data member provides the number of XiSubscriptionAeElement in the XiAeSubscription.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiAeSubscription.ClientSubscriptionId">
            <summary>
            This property contains the ClientBase-assigned identifier for this subscription.
            This identifier is unique within the XiClientClass.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiAeSubscription.ServerSubscriptionId">
            <summary>
            This property contains the server-assigned identifier for this subscription.
            This identifier is unique within the context with the server.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiAeSubscription.ListAttributes">
            <summary>
            This property returns a copy of the Xi List Attributes from the server.
            The ModifyListAttributes method is used oo change the List Attribute.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiAeSubscription.EventNotificationCount">
            <summary>
            This property provides a count of the number of notification events (callbacks)
            that have been issued to the client application for this subscription.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiAeSubscription.EventMessageCount">
            <summary>
            This property provides a count of the total number of event messages notifications 
            that have been received by this subscription and delivered to the client application.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiAeSubscription.CategorySpecificFieldCollection">
            <summary>
            This property is the publically visible ReadOnlyCollection of Category Specific Event Message Fields
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiAeSubscription.XiList">
            <summary>
            This data member returns the event list underlying the subscription as an XiListBase object.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiAeSubscription.Valid">
            <summary>
            This property indicates, when TRUE, that the server for the subscription has been 
            defined, that the subscription has not been disposed, and that the subscription 
            has been associated with an underlying ClientBase event list. Otherwise, FALSE.
            </summary>
        </member>
        <member name="E:Xi.Client.ApiClasses.XiAeSubscription.PropertyChanged">
            <summary>
            This event is used to report property changes to the client application.
            </summary>
        </member>
        <member name="E:Xi.Client.ApiClasses.XiAeSubscription.AeValuesUpdateEvent">
            <summary>
            This event is used to report new alarms and events to the client application.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiAeSubscription.XiAeSubscriptionEnumerator">
            <summary>
            This class defines the enumerator used to support the XiAeSubscription enumerators. It 
            defines the enumerators for the event messages of an event subscription
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeSubscription.XiAeSubscriptionEnumerator.#ctor(Xi.Client.ApiClasses.XiAeSubscription)">
            <summary>
            This constructor creates a new event subscription enumerator.
            </summary>
            <param name="subscription">The subscription for which the enumerator is to be created.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeSubscription.XiAeSubscriptionEnumerator.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeSubscription.XiAeSubscriptionEnumerator.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiAeSubscription.XiAeSubscriptionEnumerator._iEnumerator">
            <summary>
            The typed enumerator for the class
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeSubscription.XiAeSubscriptionEnumerator.MoveNext">
            <summary>
            This method advances the enumerator to the next element of the list.
            </summary>
            <returns>Returns true if the enumerator successfully advanced to the next element 
            in the list; FALSE if the enumerator passed the end of the list.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiAeSubscription.XiAeSubscriptionEnumerator.Reset">
            <summary>
            This method sets the enumerator to its initial position, which is the before the first 
            element of the list.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiAeSubscription.XiAeSubscriptionEnumerator.Current">
            <summary>
            This property gets the element at the current position of the enumerator 
            and returns it as an object.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiAeSubscription.XiAeSubscriptionEnumerator.System#Collections#Generic#IEnumerator{Xi#Client#ApiClasses#XiSubscriptionAeElement}#Current">
            <summary>
            This property gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiSubscriptionAeElement">
            <summary>
            The XiSubscriptionDataObject object wraps the ClientBase XiEventListElement object.
            ClientBase.IXiContext is derived from an enumeration of XiListBase.
            Each list in this enumeration contains a list of XiDataListValue.
            XiSubscriptionDataObject objects wrap these XiDataListValue objects through the 
            reference provided by the _xiDataObject defined for this class. 
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionAeElement.#ctor(Xi.Client.Base.XiEventListElement)">
            <summary>
            This constructor creates an element of the AeSubscription from an 
            XiEventListElement.
            </summary>
            <param name="eventListElement">The XiEventListElement to be wrapped by this AeSubscription list element.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionAeElement.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionAeElement.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionAeElement.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() method 
            of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionAeElement._hasBeenDisposed">
            <summary>
            This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionAeElement._wrappedEventListElement">
            <summary>
            This data member is the private representation of the EventListElement public property
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionAeElement._clientTag">
            <summary>
            This data member is the private representation of the Tag public property
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionAeElement.Tag">
            <summary>
            This property is provided for the Xi Client application to associate this subscription 
            element with an object of its choosing.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionAeElement.EventListElement">
            <summary>
            This property is the wrapped event list element.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiClientClass">
            <summary>
            <para>The XiClientClass is a static class that provides access to the 
            Xi server.  It contains a list of Xi servers and a list of Xi 
            subscriptions for data, alarms and events, and historical data.</para>
            <para>Servers are automatically added to the server list by the 
            XiClientClass, or servers can be added by the client application by 
            supplying the URL of the Xi server's Server Discovery endpoint.  
            The client application app.config file contains appSettings used 
            to specify the default Xi server to be used, the path to the manual 
            configuration file of Xi server URLs, and the URL of the Xi Directory 
            server if it is to be used and PNRP will not be used to discover it.</para>
            <para>Each subscription in the subscription list is created by the 
            client application by selecting an Xi server from the server list and 
            specifying the type of the subscription.</para>
            <para>The XiClientClass is created using a static constructor. This 
            constructor assigns the locale id of the client application to the 
            XiClientClass.. This locale id will be used as the locale id for all
            subscriptions created for the client application.</para>
            <para>NOTE:  It is not necessary to use Xi Client Class Initialize to 
            use the API Classes.  Passing null for all of the arguments of Initialize 
            will result in the startup using the client application app.config file to 
            get things started.  Passing in the various arguments to Initialize will 
            start in accordance with those parameters.  However, it is possible to 
            use the API Classes in another way.  By using the Xi Client Class Server List 
            property then using the Xi Server List method Add Or Find Server then one 
            of the Xi Server Connect methods a valid Xi Server instance may be obtained.
            <para>The above described method may be used to establish connections 
            with additional Xi Servers.</para>
            <para>The following steps describe how to use the API Classes to obtain data 
            from an Xi Server.</para>
            <list type="number">
            <item><description>Establish a connection with an Xi Server obtaining an instance 
            of a the Xi Server class.  The methods above provide ways this may be done.</description>
            </item>
            <item><description>Instantiate an Xi Da Subscription using a new.  
            (The server instance previously obtained is one of the argument.)</description>
            </item>
            <item><description>Enable the Xi Subscription using the Enable Subscription 
            method passing in true.</description>
            </item>
            <item><description>Connect the Xi Subscription to the read endpoint setting 
            the Readable property to true.</description>
            </item>
            <item><description>Optionally connect the Xi Subscription to the subscribe (callback) 
            endpoint by setting the Subscribeable property to true.</description>
            </item>
            <item><description>Use the Xi Subscription method Add Data Object to add the data 
            value ids to the subscription.</description>
            </item>
            <item><description>Use the Xi Subscription method Commit Added Data Objects 
            to have the added data object added to the data server.</description>
            </item>
            <item><description>Use the Xi Subscription method Enable Data Objects to 
            allow reads(?) and updates to occur.</description>
            </item>
            <item><description>Use the Xi Subscription method Read Values to read the values.</description>
            </item>
            <item><description> At this point it is possible to either iterate through the 
            Xi Subscription for the values or use the Xi Subscription Data Object to 
            access the data value.</description>
            </item>
            <item><description>Optionally it is possible to use the Collection Changed and 
            Property Changed events to be notified of value changes.</description>
            </item>
            <item><description>Be sure to invoke the Dispose method when the Xi Subscription 
            is no longer needed.</description>
            </item>
            <item><description>Also invoke the Xi Client Class Conclude mehtod during 
            client application exit.</description></item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiClientClass.#cctor">
            <summary>
            This static constructor creates the XiClientClass and assigns the 
            locale id of the client application to it.   This locale id will be 
            used as the locale id for all subscriptions created for the client 
            application.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiClientClass.Initialize(System.String,System.String,System.String)">
            <summary>
            See Initialize with Context Options
            </summary>
            <param name="serverUrl"></param>
            <param name="serverBinding"></param>
            <param name="discoveryServerUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiClientClass.Initialize(System.UInt32,System.String,System.String,System.String)">
            <summary>
            <para>This method is called one time by the client application after the static constructor 
            creates the XiClientClass.  The three parameters are optional. If they are omitted (set 
            to null)then this method uses the defaults provided in the app.config file.  In general, 
            there is no need to call this method to change the default Xi server. </para>
            <para>During the initialization, the server list is populated by accessing the Discovery 
            server and/or reading the manual configuration file. The Discovery server is specified 
            by the discoveryServerUrl parameter, and if that is empty, by the app.config file.  The 
            manual configuration file is specified by the app.config file .</para>
            <para>This method also attempts to connect to the preferred Xi server, specified by 
            the serverUrl parameter or if that is empty, by the app.config file.  If neither 
            are present, there is no preferred Xi server.</para>
            </summary>
            <param name="contextOptions">Context Options for the data server.
            If zero the context options are taken from the app.config file.</param>
            <param name="serverUrl">This parameter represents the preferred Xi server.  
            If present, it overrides the preferred Xi Server specified in the app.config file. </param>
            <param name="serverBinding">This parameter is used to connect to the prefered Xi server.  
            If this parameter is empty, the binding to be used will be automatically selected.
            Unused if there is no preferred Xi server.</param>
            <param name="discoveryServerUrl">The URL of the Xi Discovery server (the directory server).</param>
            <returns>The XiServer object associated with the preferred Xi Server URL, or if there is no 
            preferred Xi server, the first server in the server list.  
            If there is a preferred Xi server and the connection to it was established, the Active flag 
            of the returned XiServer will be set to TRUE. If the connection could not be established, the 
            DataServerException data member of this class will contain the exception.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiClientClass.Conclude">
            <summary>
            This method is used to close all subscriptions and dispose of all servers in the server list.
            Once this method is called, the Initialize() method must be called before the XiClientClass 
            can be used again by the client application.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiClientClass._localeId">
            <summary>
            This data member is the private representation of the LocaleId public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiClientClass._xiServersList">
            <summary>
            This data member is the private representation of the XiServersList public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiClientClass._subscriptionList">
            <summary>
            This data member is the private representation of the SubscriptionList public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiClientClass._discoveryServerUrl">
            <summary>
            This data member is the private representation of the DiscoveryServerUrl public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiClientClass._discoveryServerException">
            <summary>
            This data member is the private representation of the DiscoveryServerException public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiClientClass._dataServerException">
            <summary>
            This data member is the private representation of the DataServerException public property.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiClientClass.LocaleId">
            <summary>
            This property is the locale id that will be used for all subscriptions created 
            for the client application. It is initially set to the locale id of the 
            client application.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiClientClass.DiscoveryServerUrl">
            <summary>
            This property contains the URL to the Xi Discovery server. It is initially set to the 
            URL supplied in the client application app.config file where it is identified by 
            the XiDiscoveryServerUrl key in the appSettings section.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiClientClass.DiscoveryServerException">
            <summary>
            This property contains the last exception thrown when attempting to access the 
            Discovery Server.  
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiClientClass.DataServerException">
            <summary>
            This property contains the last exception thrown when attempting to access an 
            Xi Server
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiClientClass.ServerList">
            <summary>
            <para>This property is the list of Xi servers accessible by the client application.  
            The client application can create subscriptions for servers in this list. </para>
            <para>The XiClientClass will automatically add servers to this list if the Xi 
            Discovery Server and/or the manual configuration file is configured in the client 
            application's app.config file in the appSettings section.</para>
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiClientClass.SubscriptionList">
            <summary>
            This property contains the list of subscriptions created by the client application.
            Each subscription is created by specifying a server in the ServerList and by 
            specifying the type of the subscription (data, alarms and events, or historical data).
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiSubscriptionDataObject">
            <summary>
            XiSubscriptionDataObjects are the elements of XiDaSubscriptions.
            XiDaSubscriptions wrap the ClientBase XiDataLists, and XiDaSubscriptionElements 
            wrap the XiDataObjects that are the elements of XiDataLists. The WrappedXiDataObject 
            property provides the reference to the wrapped XiDataObject, and the Tag
            data member of the XiDataObject is used to provide a reference back to this 
            XiSubscriptionDataObject.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionDataObject.#ctor(Xi.Client.Base.XiDataObject)">
            <summary>
            Constructs a new XiSubscriptionDataObject that wraps the specified XiDataObject
            </summary>
            <param name="xiDataObject">The wrapped XiDataObject.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionDataObject.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionDataObject.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionDataObject.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionDataObject.LifetimeControl(System.Int32,System.Int32)">
            <summary>
            This mehtod is used by the adhoc subscription to determine if this item may be removed.
            </summary>
            <param name="currentTickCount"></param>
            <param name="keepMilliseconds"></param>
            <returns>true when it is time to remove this data object</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionDataObject.PrepareWriteValue(Xi.Client.ApiClasses.XiSubscriptionDataValue,System.DateTime)">
            <summary>
            This method exposes the PrepWriteValue() method of the wrapped data object.
            </summary>
            <param name="value">The value to write</param>
            <param name="utcNow">The time the write is being requested. This parameter is 
            provided to allow the calling application to set the same start time for 
            all data objects being written together by the same CommitPendingDaValueWrites call.</param>
            <returns></returns>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionDataObject._hasBeenDisposed">
            <summary>
            This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionDataObject._wrappedXiDataObject">
            <summary>
            This data member is the private representation of the WrappedXiDataObject public property
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionDataObject._clientTag">
            <summary>
            This data member is the private representation of the Tag public property
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionDataObject._lastReadWriteTickCount">
            <summary>
            The tick count from the last read or write of this data value
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionDataObject.DataObject">
            <summary>
            This property is the reference to the wrapped XiDataObject in the 
            XiDataList wrapped by the the XiDaSubscription that contains this 
            XiSubscriptionDataObject.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionDataObject.Tag">
            <summary>
            The property defines an object that the client application can use to 
            associate this list element with an object of its choice.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionDataObject.LastReadWriteTickCount">
            <summary>
            This tick count is used by the Adhoc Data Subscription for lifetime control
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionDataObject.DataValue">
            <summary>
            This property exposes the DataValue property of the wrapped data object.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionDataObject.ClientAlias">
            <summary>
            This property contains the ClientBase-assigned identifier for this subscription data object.
            This identifier is unique within the subscription.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionDataObject.ServerAlias">
            <summary>
            This property contains the server-assigned identifier for this subscription data object.
            This identifier is unique within the subscription.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionDataObject.ResultCodeTransaction">
            <summary>
            This property exposes the ResultCodeTransaction property of the wrapped data object.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionDataObject.ResultCodeWrite">
            <summary>
            This property exposes the ResultCodeWrite property of the wrapped data object.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionDataObject.ResultCodeReceivedValue">
            <summary>
            This property exposes the ResultCodeReceivedValue property of the wrapped data object.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionDataObject.InstanceId">
            <summary>
            This property exposes the InstanceId property of the wrapped data object.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionDataObject.UpdateCount">
            <summary>
            This property exposes the UpdateCount property of the wrapped data object.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionDataObject.IsUsable">
            <summary>
            This property returns true when this Subscription Data Object is value to use.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionDataObject.Enabled">
            <summary>
            This property exposes the Enabled property of the wrapped data object.
            Use EnableDataObjects at the subscription level to set this value.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiHdaSubscription">
            <summary>
            This subclass of XiSubscription defines a subscription for historical data.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.#ctor(Xi.Client.ApiClasses.XiServer,System.TimeSpan,System.TimeSpan,Xi.Contracts.Data.FilterSet)">
            <summary>
            This constructor creates a new historical data subscription for the specified server.
            </summary>
            <param name="server">The server associated with this subscription</param>
            <param name="updateRate">The update rate for this subscription</param>
            <param name="bufferingRate">The buffering rate for this subscription</param>
            <param name="filterSet">The filter set for this subscription.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for XiAeNotificationEventArgs.
            </summary>
            <returns>Returns the enumerator for the list of objects in the XiAeNotificationEventArgs. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.System#Collections#Generic#IEnumerable{Xi#Client#ApiClasses#XiSubscriptionHdaDataObject}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for data objects in the historical data subscription.
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>The enumerator for data objects in the historical data subscription. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.Find(System.Predicate{Xi.Client.ApiClasses.XiSubscriptionHdaDataObject})">
            <summary>
            This method returns historical data objects selected from the subscription by the match predicate.
            </summary>
            <param name="match">The predicate that searches the list for matches against 
            XiSubscriptionHdaDataObject properties.</param>
            <returns>Returns historical data objects selected by the match predicate.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.EnableSubscription(System.Boolean)">
            <summary>
            <para>This method is used to enable or disable updating of the subscription. 
            When this method is called, the enabled state of the subscription is changed, 
            but the enabled state of the individual elements of the subscription is unchanged. </para>
            <para>When a subscription is disabled, the server excludes it from participating in 
            callbacks and polls. However, at the option of the server, the server may continue 
            updating its cache for the elements of the subscription.</para>
            <para>Calling this method also causes the local copy of the list attributes to be 
            updated.</para>
            </summary>
            <param name="enableUpdating">
            Indicates, when TRUE, that updating of the subscription is to be enabled,
            and when FALSE, that updating of the subscription is to be disabled.</param>
            <returns>Returns TRUE if the subscription was successfully enabled or disabled.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.AddHistoricalDataObject(Xi.Contracts.Data.InstanceId)">
            <summary>
            <para>This method creates and adds an historical data object to the local copy 
            of the subscription for the specified InstanceId. After the client application 
            calls this method for each historical data object to be added to the subscription, 
            it must call the CommitAddedValues() method to add them to the server copy of the 
            subscription.</para>
            <para>Note:	Client applications should avoid calling this method and following it 
            with a call to CommitAddedValues() for each data object to be added.</para>
            </summary>
            <param name="instanceId">The InstanceId of the historical data object.</param>
            <returns>Returns the newly created and added historical data object.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.RemoveHistoricalDataObject(Xi.Client.ApiClasses.XiSubscriptionHdaDataObject)">
            <summary>
            This method removes an historical data object from the subscription and disposes of it.
            </summary>
            <param name="historicalDataObject">The historical data object to remove.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.CommitAddedHistoricalDataObjects">
            <summary>
            This method adds a list of historical data objects to the server that were individually 
            added to the local copy of the subscription using the AddHistoricalDataObject() method.  
            It returns the list of historical data objects that could not be added to the server.
            </summary>
            <returns>The list of historical data objects that could not be added to the server</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.CommitRemovedHistoricalDataObjects">
            <summary>
            This method removes a list of historical data objects from the server that were individually 
            removed from the copy of the subscription using the AddHistoricalDataObject() method.  It 
            returns the list of historical data objects that could not be removed from the server.
            </summary>
            <returns>The list of historical data objects that could not be removed from the server</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.ReadJournalDataForTimeInterval(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.IEnumerable{Xi.Client.ApiClasses.XiSubscriptionHdaValueSet})">
            <summary>
            <para>This method is used to read the historical values that fall between 
            a start and end time for one or more data objects within a specific data 
            journal list.</para>
            </summary>
            <param name="firstTimeStamp">
            The filter that specifies the first or beginning (of returned list) 
            timestamp for values to be returned.  Valid operands include the 
            Timestamp (UTC) and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.  The FilterOperand Operator is used to 
            determine if the returned data should include data values 
            the occur exactly at the first or second time stamp.  If the equals 
            operator is specified then values that occur at the first and second 
            time stamp will be included in the sample set.  Any other operator 
            will not include first or second time stamped values.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the second or ending (of returned list)
            timestamp for values to be returned.  Valid operands include the 
            Timestamp (UTC) and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.  The FilterOperand Operator is not used.
            </param>
            <param name="maxReturnValuesPerValueSet">
            The maximum number of values to be returned for each data object.
            </param>
            <param name="dataObjectValueSet">
            The list of data objects whose historical values are to be read.  Each 
            data object is represented by a value set that contains the values 
            selected and returned by the server.
            </param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.ReadJournalDataAtSpecificTimes(System.Collections.Generic.List{System.DateTime},System.Collections.Generic.IEnumerable{Xi.Client.ApiClasses.XiSubscriptionHdaValueSet})">
            <summary>
            This method is used to read the historical values at specific times for 
            one or more data objects within a specific data journal list.  If no element exists 
            at the specified time in the data journal for an object, the server creates an 
            interpolated value for that time and includes it in the response as though it 
            actually existed in the journal.
            </summary>
            <param name="timestamps">
            Identifies the timestamps of historical values to be returned for each 
            of the requested data objects. 
            </param>
            <param name="dataObjectValueSet">
            The list of data objects whose historical values are to be read.  Each 
            data object is represented by a value set that contains the values 
            selected and returned by the server.
            </param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.ReadCalculatedJournalData(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.TimeSpan,System.Collections.Generic.IEnumerable{Xi.Client.ApiClasses.XiSubscriptionHdaValueSet})">
            <summary>
            This method is used to read calculated historical values (e.g. averages or 
            interpolations) for one or more data objects within a specific data journal list.  
            The time-range used to select the historical values is specified by the client. 
            Additionally, the client specifies a calculation period that divides that time 
            range into periods. The server calculates a return value for each of these periods.
            </summary>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="calculationPeriod">
            The time span used to divide the specified time range into individual periods for 
            which return values are calculated.  The specified calculation is performed on the 
            set of historical values of a data object that fall within each period. 
            </param>
            <param name="dataObjectValueSet">
            The list of data objects whose historical values are to be read.  Each 
            data object is represented by a value set that contains the values 
            calculated and returned by the server.
            </param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.ReadJournalDataChanges(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.IEnumerable{Xi.Client.ApiClasses.XiSubscriptionHdaDataObject})">
            <summary>
            This method is used to read changed historical values for one or more 
            data objects within a specific data journal list.  Changed historical 
            values are those that were entered into the journal and then changed 
            (corrected) by an operator or other user.
            </summary>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="maxValuesPerDataObject">
            The maximum number of values to be returned per data object.  
            </param>
            <param name="dataObjects">
            The list of data objects whose historical values are to be read.  Each 
            data object may contain zero, one, or more value sets, each of which 
            contains changed values selected and returned by the server. 
            </param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.ReadJournalDataProperties(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,Xi.Client.Base.XiHistoricalDataObject,System.Collections.Generic.IEnumerable{Xi.Contracts.Data.TypeId})">
            <summary>
            This method reads the properties associated with a historized data object.
            </summary>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="historicalDataObject">
            The data object whose property values are to be read.
            </param>
            <param name="propertiesToRead">
            The TypeIds of the properties to read. Each property is identified by 
            its property type.
            </param>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiHdaSubscription._dataJournalList">
            <summary>
            This data member associates the subscription with an underlying ClientBase data journal list.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiHdaSubscription._addedHistoricalDataObjectCount">
            <summary>
            This data member contains the number of historical data objects added to the subscription
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiHdaSubscription._disposedHistoricalDataObjectCount">
            <summary>
            This data member contains the number of historical data objects disposed from the subscription
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiHdaSubscription.Valid">
            <summary>
            This property indicates, when TRUE, that the server for the subscription has been 
            defined, that the subscription has not been disposed, and that the subscription 
            has been associated with an underlying ClientBase data journal list. Otherwise, FALSE.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiHdaSubscription.ClientSubscriptionId">
            <summary>
            This property contains the ClientBase-assigned identifier for this subscription.
            This identifier is unique within the XiClientClass.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiHdaSubscription.ServerSubscriptionId">
            <summary>
            This property contains the server-assigned identifier for this subscription.
            This identifier is unique within the context with the server.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiHdaSubscription.ListAttributes">
            <summary>
            This property returns a copy of the Xi List Attributes from the server.
            The ModifyListAttributes method is used oo change the List Attribute.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiHdaSubscription.Count">
            <summary>
            This data member provides the number of XiSubscriptionHdaDataObject in the XiHdaSubscription.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiHdaSubscription.XiList">
            <summary>
            This data member returns the data journal list as an XiListBase object.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiHdaSubscription.XiHdaSubscriptionEnumerator">
            <summary>
            This class defines the enumerator for enumerating the historical data objects of a historical data subscription
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.XiHdaSubscriptionEnumerator.#ctor(Xi.Client.ApiClasses.XiHdaSubscription)">
            <summary>
            This constructor creates a new data journal subscription enumerator.
            </summary>
            <param name="subscription">The subscription for which the enumerator is to be created.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.XiHdaSubscriptionEnumerator.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.XiHdaSubscriptionEnumerator.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiHdaSubscription.XiHdaSubscriptionEnumerator._iEnumerator">
            <summary>
            The typed enumerator for the class
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.XiHdaSubscriptionEnumerator.MoveNext">
            <summary>
            This method advances the enumerator to the next element of the list.
            </summary>
            <returns>Returns true if the enumerator successfully advanced to the next element 
            in the list; FALSE if the enumerator passed the end of the list.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaSubscription.XiHdaSubscriptionEnumerator.Reset">
            <summary>
            This method sets the enumerator to its initial position, which is the before the first 
            element of the list.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiHdaSubscription.XiHdaSubscriptionEnumerator.Current">
            <summary>
            This property gets the element at the current position of the enumerator 
            and returns it as an object.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiHdaSubscription.XiHdaSubscriptionEnumerator.System#Collections#Generic#IEnumerator{Xi#Client#ApiClasses#XiSubscriptionHdaDataObject}#Current">
            <summary>
            This property gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject">
            <summary>
            XiSubscriptionHdaDataObjects are the elements of XiHdaSubscriptions.
            XiHdaSubscriptions wrap the ClientBase XiDataJournalLists, and 
            XiSubscriptionHdaDataObjects wrap the XiHistoricalDataObject that are 
            the elements of XiDataJournalLists. The HistoricalDataObject 
            property provides the reference to the wrapped XiHistoricalDataObject, 
            and the Tag property of the XiHistoricalDataObject is used to provide a 
            reference back to this XiSubscriptionHdaDataObject.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.#ctor(Xi.Client.Base.XiHistoricalDataObject)">
            <summary>
            This constructor creates a new XiSubscriptionHdaDataObject that wraps the specified XiHistoricalDataObject.
            </summary>
            <param name="xiDataJournalListValue">The wrapped XiHistoricalDataObject.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for the historical subscription data object.
            </summary>
            <returns>Returns the enumerator for the list of objects in the historical subscription data object. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.System#Collections#Generic#IEnumerable{Xi#Client#ApiClasses#XiSubscriptionHdaValueSet}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for value sets of the historical subscription data object.
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>The enumerator for value sets of the historical data object. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.ContainsKey(System.UInt32)">
            <summary>
            This method determines if this historical data object contains the specified list 
            of historical values.  Historical value lists are created using the 
            NewListOfHistoricalDataItemValues() method.
            </summary>
            <param name="CalculationTypeLocalId"></param>
            <returns>Returns TRUE if this data object contains the specified list of historical 
            values, otherwise FALSE. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.TryGetValue(System.UInt32,Xi.Client.ApiClasses.XiSubscriptionHdaValueSet@)">
            <summary>
            This method attempts to retrieve a set of historical values of a given 
            value list type for the historical data object.
            </summary>
            <param name="calculationTypeLocalId">The type of calculation to be used to create the 
            list of HistoricalValues for this data object, as defined by the 
            StandardMib.DataJournalOptions.MathLibrary of the server. This data object may 
            not have two value sets with the same CalculationTypeId.</param>
            <param name="hdaValueSet">The retrieved set of historical values.</param>
            <returns>Returns TRUE if the attempt succeeded, otherwise FALSE.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.SetDataChanges(Xi.Contracts.Data.JournalDataChangedValues)">
            <summary>
            This method sets the value of the DataChanges property of the wrapped 
            historical data object.
            </summary>
            <param name="dataChanges">The new changed data values to set.</param>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject._hasBeenDisposed">
            <summary>
            This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject._wrappedHistoricalDataObject">
            <summary>
            This data member is the private representation of the WrappedHistoricalDataObject public property
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject._clientTag">
            <summary>
            This data member is the private representation of the Tag public property
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.HistoricalDataObject">
            <summary>
            This property is the reference to the wrapped XiHistoricalDataObject in the 
            XiDataJournalList wrapped by the the XiHdaSubscription that contains this 
            XiSubscriptionHdaDataObject.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.Tag">
            <summary>
            This property is provided for the Xi Client application to associate this data object 
            with an object of its choosing.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.Valid">
            <summary>
            This property indicates, when TRUE, that the wrapped historical data object for this 
            XiSubscriptionHdaDataObject has been defined and that this XiSubscriptionHdaDataObject 
            has not been disposed. Otherwise, FALSE.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.XiHdaValueEnumerator">
            <summary>
            This enumerator class defines the enumerator for enumerating the historical data value sets of a historical data object.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.XiHdaValueEnumerator.#ctor(Xi.Client.ApiClasses.XiSubscriptionHdaDataObject)">
            <summary>
            This constructor creates an enumerator for enumerating the historical data value sets of a historical data object.
            </summary>
            <param name="hdaSubscriptionDataObject">The data object in the hdaSubscription for which the enumerator is to be created.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.XiHdaValueEnumerator.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.XiHdaValueEnumerator.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.XiHdaValueEnumerator._iEnumerator">
            <summary>
            The typed enumerator for the class
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.XiHdaValueEnumerator.MoveNext">
            <summary>
            This method advances the enumerator to the next element of the list.
            </summary>
            <returns>Returns true if the enumerator successfully advanced to the next element 
            in the list; FALSE if the enumerator passed the end of the list.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.XiHdaValueEnumerator.Reset">
            <summary>
            This method sets the enumerator to its initial position, which is the before the first 
            element of the list.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.XiHdaValueEnumerator.Current">
            <summary>
            This property gets the element at the current position of the enumerator 
            and returns it as an object.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionHdaDataObject.XiHdaValueEnumerator.System#Collections#Generic#IEnumerator{Xi#Client#ApiClasses#XiSubscriptionHdaValueSet}#Current">
            <summary>
            This property gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet">
            <summary>
            XiSubscriptionHdaValueSets are a set values returned for a historical data object by a Journal Read method. 
            The XiSubscriptionHdaValueSet wraps the ClientBase XiHistoricalDataObjectValueSet. The WrappedXiDataObject 
            property provides the reference to the wrapped XiDataObject, and the Tag
            data member of the XiDataObject is used to provide a reference back to this 
            XiSubscriptionDataObject.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.#ctor(Xi.Client.ApiClasses.XiSubscriptionHdaDataObject,Xi.Contracts.Data.TypeId)">
            <summary>
            This constructor creates an XiSubscriptionHdaValueSet object for the specified 
            XiSubscriptionHdaDataObject and key.
            </summary>
            <param name="subscriptionHdaDataObject">The data object for which the value set is to be 
            created.</param>
            <param name="calculationTypeId">The calculation type used to create the value set.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for values in the value set of a historical data subscription data object.
            </summary>
            <returns>Returns the enumerator for objects in the value set of a historical data subscription data object. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.System#Collections#Generic#IEnumerable{Xi#Client#ApiClasses#XiSubscriptionDataValue}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for values in the value set of a historical data subscription data object.
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>The enumerator for values in the value set of a historical data subscription data object. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.UpdateValueSet(Xi.Contracts.Data.JournalDataValues)">
            <summary>
            This method updates the values of the value set.
            </summary>
            <param name="newHistoricalValues">The new values used to update the value set.</param>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet._hasBeenDisposed">
            <summary>
            This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet._owner">
            <summary>
            This data member is the privaet representation of the Owner public property. 
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet._wrappedHistoricalDataObjectValueSet">
            <summary>
            This data member is the private representation of the WrappedHistoricalDataObjectValueSet public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet._clientTag">
            <summary>
            This data member is the private representation of the Tag public property.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.WrappedHistoricalDataObjectValueSet">
            <summary>
            The data member references the XiHistoricalDataObjectValueSet that this value set wraps.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.Tag">
            <summary>
            This property is provided for the Xi Client application to associate this value set 
            with an object of its choosing.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.Valid">
            <summary>
            This property indicates whether the WrappedHistoricalDataObjectValueSet is valid (is 
            not null and has not been disposed).
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.Owner">
            <summary>
            This property contains identifies the historical data object to 
            which this historical value set belongs.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.CalculationTypeId">
            <summary>
            This property is the type of calculation used to create the value set as defined by the 
            StandardMib.DataJournalOptions.MathLibrary of the server and by 
            Xi.Contracts.Constants.JournalDataSampleTypes. The historical data object 
            for which this value set is defined may not have two value sets with the 
            same CalculationTypeId.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.CalculationTypeLocalId">
            <summary>
            This property is the LocalId portion of the CalculationTypeId. Set to 0 if the LocalId is not a uint.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.ResultCode">
            <summary>
            This property contains the Result Code associated with reading this value 
            set from the server. See XiFaultCodes class for standardized result codes.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.StartTime">
            <summary>
            This property defines the starting time for this list historical values.
            Values in the value set will be between the StartTime and EndTime. The
            read method used to access the values specifies whether or not values 
            with the starting or ending times are to be included in this value set.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.EndTime">
            <summary>
            This property defines the ending time for this list historical values.
            Values in the value set will be between the StartTime and EndTime. The
            read method used to access the values specifies whether or not values 
            with the starting or ending times are to be included in this value set.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionHdaValueSet.Count">
            <summary>
            This data member provides the number of values in the historical value set.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiHdaValueSetEnumerator">
            <summary>
            This enumerator class defines the enumerator for enumerating a list of historical data values.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaValueSetEnumerator.#ctor(System.Collections.Generic.List{Xi.Client.Base.API.XiDataValue})">
            <summary>
            This constructor creates an enumerator for a list of historical data values.
            </summary>
            <param name="historicalValueList">The list of historical values for which the enumerator is to be created.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaValueSetEnumerator.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaValueSetEnumerator.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiHdaValueSetEnumerator._iEnumerator">
            <summary>
            The typed enumerator for the class
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaValueSetEnumerator.MoveNext">
            <summary>
            This method advances the enumerator to the next element of the list.
            </summary>
            <returns>Returns true if the enumerator successfully advanced to the next element 
            in the list; FALSE if the enumerator passed the end of the list.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiHdaValueSetEnumerator.Reset">
            <summary>
            This method sets the enumerator to its initial position, which is the before the first 
            element of the list.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiHdaValueSetEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            This property gets the element at the current position of the enumerator 
            and returns it as an object.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiHdaValueSetEnumerator.System#Collections#Generic#IEnumerator{Xi#Client#ApiClasses#XiSubscriptionDataValue}#Current">
            <summary>
            This property gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiServer">
            <summary>
            This class defines the Xi Server entries in the XiClientClass XiServerList.  
            Each XiServer in the list represents an Xi server for which the client application 
            can create an XiSubscription.
            </summary>
            <summary>
            This partial class definition for the XiServer class contains the properties and 
            methods associated with establishing and using a context (a session) with the server.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.#ctor">
            <summary>
            This constructor is the default constructor
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.#ctor(Xi.Contracts.Data.ServerEntry)">
            <summary>
            This constructor creates an XiServer object from a ServerEntry
            </summary>
            <param name="serverEntry">The ServerEntry to use to create the XiServer object.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.#ctor(System.Uri)">
            <summary>
            This constructor creates an XiServer object from the URI of the server discovery
            endpoint of an Xi server. This method uses the URI to access the server and 
            retrieve its ServerEntry.
            </summary>
            <param name="serverUri">The URI of the server discovery endpoint 
            of the Xi server</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.#ctor(System.String)">
            <summary>
            This constructor creates an XiServer object from the URL of the server discovery 
            endpoint of an Xi server. This method uses the URL to access the server and 
            retrieve its ServerEntry.
            </summary>
            <param name="serverUrl">The URL of the server discovery endpoint 
            of the Xi server</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.#ctor(System.String,System.Int32)">
            <summary>
            This constructor creates an XiServer object from the host name (or IP address) and 
            the port number of the server discovery endpoint of an Xi server. It uses these 
            parameters, http as the default protocol and "XiServices/serverDiscovery" as the 
            default service name to create the URL of the server discovery endpoint. 
            It uses this URL to access the server and retrieve its ServerEntry.
            </summary>
            <param name="hostName">the host name (or IP address) of the server.</param>
            <param name="port">The port number of the server discovery endpoint.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.#ctor(System.String,System.Int32,System.String)">
            <summary>
            This constructor creates an XiServer object from the host name (or IP address),
            the port number, and the service name of the server discovery endpoint of an Xi server. 
            It uses these parameters and http as the default protocol to create the URL of the 
            server discovery endpoint. It uses this URL to access the server and retrieve 
            its ServerEntry.
            </summary>
            <param name="hostName">the host name (or IP address) of the server.</param>
            <param name="port">The port number of the server discovery endpoint.</param>
            <param name="serviceName">The service name of the server discovery endpoint.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for subscriptions of the Xi server.
            </summary>
            <returns>Returns the enumerator for the list of objects in the Xi server. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.System#Collections#Generic#IEnumerable{Xi#Client#ApiClasses#XiSubscription}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for subscriptions of the Xi server.
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>The enumerator for subscriptions of the Xi server. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.GetEndpointDiscovery">
            <summary>
            This method sets the value of the _endpointDiscovery data member using the URL obtained 
            from the ServerEntry.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Add(Xi.Client.ApiClasses.XiSubscription)">
            <summary>
            This method adds a subscription to the server.  This method is called 
            by the constructor for the subscription.
            </summary>
            <param name="subscription">The subscription to add.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Remove(Xi.Client.ApiClasses.XiSubscription)">
            <summary>
            This method is used to remove a subscription from the list of subscriptions 
            for this server. This method is called by the Dispose(bool isDisposing) method 
            of the subscription.
            </summary>
            <param name="subscription">The subscription to remove.</param>
            <returns>Returns TRUE if the subscription was successfully removed.  FALSE 
            is returned if the subscription was not in the list.</returns>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._hasBeenDisposed">
            <summary>
            This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._discovered">
            <summary>
            This value is true if this instance was added to the server list due to discovery.
            When this value is false the server was added by the application calling XiServerList AddOrFindServer(url)
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._subscriptionsList">
            <summary>
            This data member holds the list of subscriptions open for this server.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._serverUri">
            <summary>
            This data member is the private representation of the server discovery Uri public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._endpointDiscovery">
            <summary>
            This data member is the Endpoint Discovery object used to access the server for its 
            connection information. The Endpoint Discovery object retrieves the endpoints of the 
            server that are used for browsing, reading, writing, and subscribing.  It also sorts 
            them into the preferred order of use. For example, if the client and server are on the 
            same machine, the netPipe endpoints will sort to the top.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._serverEntry">
            <summary>
            This data member is the private representation of the ServerEntry public property. 
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._clientTag">
            <summary>
            This data member is the private representation of the Tag public property. 
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._serverEntryObtainable">
            <summary>
            Internal flag to suport refresh.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect">
            <summary>
            This method is used to connect to the server and establish a context with it.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect(System.UInt32)">
            <summary>
            This method is used to connect to the server and establish a context with it.
            </summary>
            <param name="contextOptions"></param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect(System.UInt32,Xi.Client.Base.API.XiContextNotification)">
            <summary>
            
            </summary>
            <param name="contextOptions"></param>
            <param name="xiContextNotification"></param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect(Xi.Client.Base.API.XiContextNotification)">
            <summary>
            
            </summary>
            <param name="xiContextNotification"></param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect(System.UInt32,Xi.Client.Credentials.XiUserInfo)">
            <summary>
            This method is used to connect to the server and establish a context with it 
            using the supplied XiUserInfo.
            </summary>
            <param name="contextOptions"></param>
            <param name="xiUserInfo"></param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect(System.UInt32,Xi.Client.Credentials.XiUserInfo,Xi.Client.Base.API.XiContextNotification)">
            <summary>
            
            </summary>
            <param name="contextOptions"></param>
            <param name="xiUserInfo"></param>
            <param name="xiContextNotification"></param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect(Xi.Client.Credentials.XiUserInfo)">
            <summary>
            This method is used to connect to the server and establish a context with it 
            using the supplied XiUserInfo.
            </summary>
            <param name="xiUserInfo">The user info to be used to connect to the server.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect(Xi.Client.Credentials.XiUserInfo,Xi.Client.Base.API.XiContextNotification)">
            <summary>
            
            </summary>
            <param name="xiUserInfo"></param>
            <param name="xiContextNotification"></param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect(System.UInt32,System.Type)">
            <summary>
            This method is used to connect to the server and establish a context with it 
            using the supplied WCF binding type and XiUserInfo.
            </summary>
            <param name="contextOptions"></param>
            <param name="bindingType"></param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect(System.UInt32,System.Type,Xi.Client.Base.API.XiContextNotification)">
            <summary>
            
            </summary>
            <param name="contextOptions"></param>
            <param name="bindingType"></param>
            <param name="xiContextNotification"></param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect(System.Type)">
            <summary>
            This method is used to connect to the server and establish a context with it 
            using the supplied WCF binding type and XiUserInfo.
            </summary>
            <param name="bindingType">The type of WCF binding to use.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect(System.Type,Xi.Client.Base.API.XiContextNotification)">
            <summary>
            
            </summary>
            <param name="bindingType"></param>
            <param name="xiContextNotification"></param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect(System.UInt32,System.Type,Xi.Client.Credentials.XiUserInfo)">
            <summary>
            This method is used to connect to the server and establish a context with it 
            using the optionally supplied WCF binding type and XiUserInfo .
            </summary>
            <param name="contextOptions"></param>
            <param name="bindingType"></param>
            <param name="xiUserInfo"></param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect(System.UInt32,System.Type,Xi.Client.Credentials.XiUserInfo,Xi.Client.Base.API.XiContextNotification)">
            <summary>
            
            </summary>
            <param name="contextOptions"></param>
            <param name="bindingType"></param>
            <param name="xiUserInfo"></param>
            <param name="xiContextNotification"></param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect(System.Type,Xi.Client.Credentials.XiUserInfo)">
            <summary>
            This method is used to connect to the server and establish a context with it 
            using the optionally supplied WCF binding type and XiUserInfo .
            </summary>
            <param name="bindingType">The optional type of WCF binding to use. Null if not present.</param>
            <param name="xiUserInfo">The optional user info to be used to connect to the server. Null if not present.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Connect(System.Type,Xi.Client.Credentials.XiUserInfo,Xi.Client.Base.API.XiContextNotification)">
            <summary>
            
            </summary>
            <param name="bindingType"></param>
            <param name="xiUserInfo"></param>
            <param name="xiContextNotification"></param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.ConnectToEndpoint(System.ServiceModel.Description.ServiceEndpoint,Xi.Client.Credentials.XiUserInfo)">
            <summary>
            This method connects to a specific endpoint in the server and uses the optionally 
            supplied XiUserInfo.
            </summary>
            <param name="sep">The service endpoint to which the connection is to be established.</param>
            <param name="xiUserInfo">The optional user info to be used to connect to the server. Null if not present.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Identify">
            <summary>
            This method returns the ServerDescription retrieved from the server.
            </summary>
            <returns>Returns the ServerDescription retrieved from the server.  An XiClientBaseException 
            is thrown if there is no open context with the server.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Status">
            <summary>
            This method is used to get the state of the server, and 
            the state of any wrapped servers.  
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.LookupResultCodes(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            This method returns text descriptions of result codes.
            </summary>
            <param name="resultCodes">
            The result codes for which text descriptions are being requested.
            </param>
            <returns>
            The list of result codes and if a result code indicates success, 
            the requested text descriptions. The size and order of this 
            list matches the size and order of the resultCodes parameter.
            </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.FindObjects(Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
            <para>This method is used to find objects in the server.  The 
            client uses the findCriteria parameter to identify a starting 
            branch and a set of filter criteria.  It also specifies the 
            maximum number of objects to return.  </para> 
            <para>The server examines the objects that are children of the 
            specified branch and selects those that match the filter criteria.
            Note that "children" are objects whose root paths can be created 
            by appending their names to the path used to identify the starting  
            branch.</para>  
            <para>The object attributes of the selected objects are 
            returned to the client. The number returned is limited by the 
            number specified in the numberToReturn parameter.  If the number 
            returned is less than than that number, then the client can 
            safely assume that the server has no more to return.</para>  
            <para>However, if the number returned is equal to that number, 
            then the client can retrieve the next set of results by issuing 
            another FindObjects() call with the findCriteria parameter set to 
            null. A null findCriteria indicates to the server to continue 
            returning results from those remaining in the list.  The client 
            eventually detects the end of the list by receiving a response 
            that returns less than specified by the numberToReturn parameter.</para>
            </summary>
            <param name="findCriteria">
            The criteria used by the server to find objects.  If this 
            parameter is null, then this call is a continuation of the 
            previous find.
            </param>
            <param name="numberToReturn">
            The maximum number of objects to return in a single response.
            </param>
            <returns>
            <para>The list of object attributes for the objects that met 
            the filter criteria. </para>  
            <para>Returns null if the starting object is a leaf, or no objects 
            were found that meet the filter criteria, or if the call was made 
            with a null findCriteria and there are no more objects to return.</para>
            </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.GetAlarmSummary(Xi.Contracts.Data.InstanceId)">
            <summary>
            This method is used to request summary information for the 
            alarms that can be generated for a given event source.
            </summary>
            <param name="eventSourceId">
            The InstanceId for the event source for which alarm summaries are 
            being requested.
            </param>
            <returns>
            The summaries of the alarms that can be generated by the specified 
            event source.  
            </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.Disconnect">
            <summary>
            This method is used to close a context with the server and disconnect the WCF connection.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.OpenEndpointForContract(System.String)">
            <summary>
            This method is used to open access to an Xi Read, Write, Poll, or Callback endpoint in the server. 
            </summary>
            <param name="contractType">The name of the type of Xi Contract (IRead, IWrite, IPoll, ICallback).
            E.g contractType = typeof(IRead).Name;</param>
            <returns>Returns a reference to the endpoint that was opened.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.StartPolling">
            <summary>
            This method is used to have the context start polling the server for changes.
            </summary>
            <returns>Returns the poll state associated with poll loop.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServer.ToString">
            <summary>
            This method returns the string representation of the server discovery Uri.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._xiContext">
            <summary>
            This data member is the private representation of the XiContext public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._contextOptions">
            <summary>
            This data member is the private representation of the ServerOptions public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._localeId">
            <summary>
            This data member is the private representation of the LocaleId public property. It defaults 
            to the locale id of the client application.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._reInitiateKey">
            <summary>
            This data member holds the reinitiate key returned by the server when connecting to it. The 
            reinitiate key is used to reconnect to the server if the WCF connection fails.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._contextTimeout">
            <summary>
            This data member is the private representation of the ContextTimeout public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._concluding">
            <summary>
            This data member is the private representation of the Concluding public property.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._keepAliveSkipCount">
            <summary>
            This data member is the private representation of the KeepAliveSkipCount public member.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServer._callbackRate">
            <summary>
            This data member is the private representation of the CallbackRate public member.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.Item(System.Int32)">
            <summary>
            This indexer allows the client to index through the list of XiSubscriptions
            created for this Xi server.
            </summary>
            <param name="idx">The zero-based index of the desired XiSubscription.</param>
            <returns>Returns the indexed XiSubscription.</returns>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.ServerUri">
            <summary>
            This property is the URI of the server discovery endpoint of the Xi server.  
            The server discovery endpoint is accessed by the XiClientClass to retrieve 
            information necessary to connect to the Xi server.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.Count">
            <summary>
            This property provides the number of subscriptions defined for the Xi server.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.ServerEntry">
            <summary>
            This property contains the ServerEntry of the server that contains its server discovery URL and 
            parameters used by the ClientBase to connect to it.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.Tag">
            <summary>
            This property is provided for the Xi Client application to associate this server 
            with an object of its choosing.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.Discovered">
            <summary>
            This value is true if this instance was added to the server list due to discovery.
            When this value is false the server was added by the application calling XiServerList AddOrFindServer(url)
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.ServerEntryObtainable">
            <summary>
            This internal flag is set true during refresh if the Server Entry is obtainable.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.XiContext">
            <summary>
            This property represents the client context (session) with the server. Each client 
            may have only one context open with a server at one time using the XiClientClass.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.ServerOptions">
            <summary>
            This property contains the context options that are used when connecting to the server.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.LocaleId">
            <summary>
            This property is the Windows LocaleId (language/culture id) for the context.  
            Its default value is automatically set to the LocaleId of the calling client application.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.ContextTimeout">
            <summary>
            This property specifies how long the context will stay alive in the server after a WCF 
            connection failure. The ClientBase will attempt reconnection during this period.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.Active">
            <summary>
            This property indicates, when TRUE, that the client has an open context (session) with 
            the server.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.Concluding">
            <summary>
            This property indicates, when TRUE, that the server is in the process of closing the context.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.ContextId">
            <summary>
            This property contains the context id of the open context (session) with the server.
            The value is null if there is no open context.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.StandardMib">
            <summary>
            This property contains the Standard MIB (Management Information Base) retrieved from the server 
            during context establishment.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.KeepAliveSkipCount">
            <summary>
            This property contains the client-requested keepAliveSkipCount for the subscription. 
            The server may negotiate this value up or down. The keepAliveSkipCount indicates 
            the number of consecutive UpdateRate cycles for a list that occur with nothing to 
            send before an empty callback is sent to indicate a keep-alive message. For example, 
            if the value of this parameter is 1, then a keep-alive callback will be sent each 
            UpdateRate cycle for each list assigned to the callback for which there is nothing 
            to send.  A value of 0 indicates that keep-alives are not to be sent for any list 
            assigned to the callback.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServer.CallbackRate">
            <summary>
            <para>This property indicates the maximum time between callbacks that are sent 
            to the client. The server may negotiate this value up or down, but a null value or 
            a value representing 0 time is not valid.  </para>
            <para>If there are no callbacks to be sent containing data or events for this period 
            of time, an empty callback will be sent as a keep-alive.  The timer for this 
            time-interval starts when the SetCallback() response is returned by the server.  </para>
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiServerComparer">
            <summary>
            This class defined an IEqualityComparer used to identify the same server.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiServerList">
            <summary>
            <para>This class defines the object that contains the list of Xi servers 
            accessible by the client application.  The client application can create 
            subscriptions for servers in this list. </para>
            <para>The XiClientClass automatically adds servers to this list if the Xi 
            Discovery Server and/or the manual configuration file is configured in the 
            client application's app.config file in the appSettings section.</para>
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServerList.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServerList.OnNotifyPropertyChanged(System.Object,System.String)">
            <summary>
            This method implements the PropertyChangedEventHandler delegate.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServerList.Refresh">
            <summary>
            <para>This method refreshes the list of servers.  The list can be refreshed as follows.</para>
            <para>If the Discovery Server URL is currently defined (not empty), it is used to access 
            the Discovery Server (the directory server) to get its list of Xi servers.</para>
            <para>If the Discovery Server URL is not defined, and PNRP is enabled, then it will be 
            used to obtain a list of Discovery Servers.</para>
            <para>Additionally, if the client application's app.config file provides the file path 
            and name for the manual configuration file of Xi servers, then this file is accessed and 
            the servers defined in it are merged with those returned by the Discovery Server (if any).</para>
            <para>If there is no accessible Discovery Server and the manual configuration file path 
            and name are not configured in the client application's app.config file, then this method 
            does nothing and the server list contents is limited to the Xi servers added by the client 
            application. </para>
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServerList.FindServer(System.String)">
            <summary>
            This method finds an Xi server in the server list by its URL.  The client 
            application may use either the machine name, the IP addres, or "localhost: 
            in the URL.  If the hostname in the URL is "localhost", the machine name 
            of the host is substituted prior to the look-up.  However, the lookup will 
            fail if the registered URL uses either the IP address or the machine name, 
            and the client application uses the other in this request.
            </summary>
            <param name="serverUrl">The URL of the server discovery endpoint of the server.</param>
            <returns>Returns the XiServer object with the specified URL. Null if not found.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServerList.AddOrFindServer(System.String)">
            <summary>
            This method is used to find an Xi Server in the list, and to add if it is 
            not in the list. 
            </summary>
            <param name="serverUrl">The server discovery Url of the server to find or add.</param>
            <returns>The Xi server that was found or created and added the list.</returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServerList.Add(Xi.Client.ApiClasses.XiServer)">
            <summary>
            This method adds an XiServer to the list.
            </summary>
            <param name="server">The XiServer to add</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServerList.Remove(Xi.Client.ApiClasses.XiServer)">
            <summary>
            This method removes an XiServer from the list.
            </summary>
            <param name="server">The XiServer to remove</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServerList.Find(System.Predicate{Xi.Client.ApiClasses.XiServer})">
            <summary>
            This method returns the first XiServer it finds that matches the specified match parameter.
            </summary>
            <param name="match">The predicate that contains the match criteria.</param>
            <returns></returns>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiServerList._serverList">
            <summary>
            This data member contains the list of Xi servers.  It can be accessed via the 
            enumerators and indexers defined for this class.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServerList.UpdateServerList(System.String)">
            <summary>
            <para>This method updates the list of servers using the URL of the 
            Discovery Server.  This URL will be null if there is no Discovery Server 
            in use. </para>
            <para>If the discoveryServerUrl parameter is present, then this URL will be used 
            to attempt to access the Discovery Server to get its list of Xi servers.</para>
            <para>Additionally, if the client application's app.config file provides the file path 
            and name for the manual configuration file of Xi servers, then this file is accessed and 
            the servers defined in it are merged with those returned by the Discovery Server (if any).</para>
            <para>If there is no Discovery Server URL or the Discovery Server is not accessible and 
            the manual configuration file path and name are not configured in the client 
            application's app.config file, then this method does nothing and the server list 
            contents is limited to the Xi servers added by the client application. </para>
            <para>If the discoveryServerUrl parameter is present, then this URL will be used 
            to attempt to access the Discovery Server to get its list of Xi servers.</para>
            <para>Additionally, if the client application's app.config file provides the file path 
            and name for the manual configuration file of Xi servers, then this file is accessed and 
            the servers defined in it are merged with those returned by the Discovery Server (if any).</para>
            <para>If there is no Discovery Server URL or the Discovery Server is not accessible and 
            the manual configuration file path and name are not configured in the client 
            application's app.config file, then this method does nothing and the server list 
            contents is limited to the Xi servers added by the client application. </para>
            </summary>
            <param name="discoveryServerUrl">The URL of the Discovery Server to access.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServerList.OnNotifyCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedAction,System.Int32)">
            <summary>
            This method implements the NotifyCollectionChangedEventHandler delegate.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServerList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for Xi servers in the Xi server list.
            </summary>
            <returns>Returns the enumerator for the list of objects in the Xi server list. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiServerList.System#Collections#Generic#IEnumerable{Xi#Client#ApiClasses#XiServer}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for Xi servers in the Xi server list.
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>The enumerator for Xi servers in the Xi server list. </returns>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServerList.Count">
            <summary>
            This data member provides the number of Xi servers in the XiServerList.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiServerList.Item(System.Int32)">
            <summary>
            This indexer allows the client to index through the list of XiServers.
            </summary>
            <param name="idx">The zero-based index of the desired XiServer.</param>
            <returns>Returns the indexed XiServer.</returns>
        </member>
        <member name="E:Xi.Client.ApiClasses.XiServerList.CollectionChanged">
            <summary>
            This event is used to report additions to or deletions from the server list.
            </summary>
        </member>
        <member name="E:Xi.Client.ApiClasses.XiServerList.PropertyChanged">
            <summary>
            This property is used to report changes to properties of this class, such as when a context
            to a server is established or when the number of servers in the list changes.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiInstanceIdResult">
            <summary>
            This class defines the pairing of an InstanceId and a result code.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiInstanceIdResult.#ctor(Xi.Contracts.Data.InstanceId,System.UInt32)">
            <summary>
            This constructor creates a new XiInstanceIdResult from an InstanceId 
            and a result code.
            </summary>
            <param name="instanceId">The InstanceId</param>
            <param name="resultCode">The result code. See XiFaultCodes claass for 
            standardized result codes.</param>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiInstanceIdResult.InstanceId">
            <summary>
            This property is the InstanceId.
            </summary>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiInstanceIdResult.ResultCode">
            <summary>
            This property is the ResultCode. See XiFaultCodes claass for 
            standardized result codes.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiSubscriptionList">
            <summary>
            <para>This class defines the object that contains the list of subscriptions 
            to Xi servers.  When the client application creates a subscription to a 
            server, it is added to this list, and removed from the list when the 
            subscription is disposed. </para>
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionList.#ctor">
            <summary>
            This constructor is the default constructor. It creates an empty list 
            of subscriptions.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for subscriptions in the subscription list.
            </summary>
            <returns>Returns the enumerator for objects in the subscription list. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionList.System#Collections#Generic#IEnumerable{Xi#Client#ApiClasses#XiSubscription}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for for subscriptions in the subscription list.
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>The enumerator for for subscriptions in the subscription list. </returns>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionList.Add(Xi.Client.ApiClasses.XiSubscription)">
            <summary>
            This method adds a subscription to the list
            </summary>
            <param name="subscription">The subscription to add</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionList.Remove(Xi.Client.ApiClasses.XiSubscription)">
            <summary>
            This method removes a subscription from the list
            </summary>
            <param name="subscription">The subscription to remove.</param>
            <returns></returns>
        </member>
        <member name="F:Xi.Client.ApiClasses.XiSubscriptionList._subscriptionsList">
            <summary>
            This data member contains the list of subscriptions.
            </summary>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionList.Item(System.Int32)">
            <summary>
            This indexer allows the client to index through the list of subscriptions.
            </summary>
            <param name="idx">The zero-based index of the desired subscription.</param>
            <returns>Returns the indexed subscription.</returns>
        </member>
        <member name="P:Xi.Client.ApiClasses.XiSubscriptionList.Count">
            <summary>
            This data member provides the number of subscriptions in the XiSubscriptionList.
            </summary>
        </member>
        <member name="T:Xi.Client.ApiClasses.XiSubscriptionDataValue">
            <summary>
            This class defines the data value of data objects of a data subscription.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionDataValue.#ctor(System.UInt32,System.DateTime,System.Object)">
            <summary>
            This constructor instantiates an XiSubscriptionDataValue given the status code, timestamp, and value.
            </summary>
            <param name="statusCode">The status code of the value.</param>
            <param name="timestamp">The timestamp of the value.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionDataValue.#ctor(Xi.Client.Base.API.XiDataValue)">
            <summary>
            This constructor creates an XiSubscriptionDataValue from a Client Base API XiDataValue.
            </summary>
            <param name="dataValue">The Client Base API XiDataValue from which the XiSubscriptionDataValue 
            is to be created.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionDataValue.#ctor(Xi.Client.ApiClasses.XiSubscriptionDataValue)">
            <summary>
            This constructor creates a new XiSubscriptionDataValue from an existing XiSubscriptionDataValue.
            </summary>
            <param name="value">The XiSubscriptionDataValue from which the XiSubscriptionDataValue 
            is to be created.</param>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionDataValue.Clone">
            <summary>
            This constructor creates a copy (clone) of this XiSubscriptionDataValue.
            </summary>
        </member>
        <member name="M:Xi.Client.ApiClasses.XiSubscriptionDataValue.ToString">
            <summary>
            This method converts this XiSubscriptionDataValue to a string constructed as 
            follows. The beginning of the string contains "Value = ".  Following the = 
            sign is the string representation of the value.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiContext">
            <summary>
            This partial class defines the Callback and Polling related aspects of the XiContext class.
            </summary>
            <summary>
            <para>
            The XiContext class provides the connection between the client application 
            and the Xi Server.  Creating an instance of this class is the first step 
            a client application needs to perform.
            </para>
            <para>
            There are generally two basic class categories a Xi client application will 
            need to understand to utilize a Xi Server.  In addition it is necessary to 
            also understand a number of significant support classes needed to utilize 
            Xi services.
            </para>
            <para>
            The two fundamental classes are first a "Context" and a "List" there is a 
            single type of context and there are four types of lists defined.  Once a 
            context is established lists are added to that context and then depending 
            on the type of list added, the lists are used to read and write process 
            related data.  The four types or clauses of lists are: 
            </para>
            <list type="bullet">
            <item>
            1) DataList, used to read and write real time process values. 
            </item>
            <item>
            2) DataJournalList used to access and modify historical process values.
            </item>
            <item>
            3) EventList, used to notify a client application of when process related 
            events occur.  The server is not required to keep a list of events, they 
            are simply reported as they occur.  The Xi Client Helper class which 
            supports this type of list does maintain a list of events, to help simplify
            the client application.
            </item>
            <item>
            4) EventJournalList, used to access and modify historical events.  
            Not currently supported by the Xi Client Helper assembly.
            </item>
            </list>
            </summary>
            <summary>
            This partial class defines the Alarms and Events related aspects of the XiContext class.
            </summary>
            <summary>
            This partial class defines the Info Discovery related aspects of the XiContext class.
            </summary>
            <summary>
            This partial class defines the List Management aspects of the XiContext
            </summary>
            <summary>
            This partial class defines the Context Management related aspects of the XiContext class.  Two 
            static Initiate() methods are defined to create and establish a new context with the Xi server,
            one that in which the calling client application supplies the user credentials, and one in which 
            the ClientBase calls into the Xi Client Credentials project for the user credentials when necessary.
            </summary>
            <summary>
            This partial class defines the IRead related aspects of the XiContext class.
            </summary>
            <summary>
            This partial class defines the Endpoint Management related aspects of the XiContext class.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.StartPolling(System.UInt32,System.Boolean)">
            <summary>
            This method is used to start the PollThread that performs automatic polling of the server. 
            </summary>
            <param name="pollRateInMilliseconds">The rate at which the poll thread executes. 
            After each execution, the poll thread sleeps for this amount of time.  Each execution, 
            the PollThread examines each XiList to be polled and polls that list if its BufferingRate 
            or PollRate expired since the last execution of the PollThread. </param>
            <param name="enable">When set to TRUE, the PollThread will issue Polls to the server. 
            When set to FALSE, the poll loop of the PollThread is disabled and Polls will not be 
            sent to the server.</param>
            <returns>The poll state of the PollThread.  If the method succeeds, the state should 
            change to the requested state.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.EnablePolling(System.Boolean)">
            <summary>
            This method is used to enable or disable polling.
            </summary>
            <param name="enable">When set to TRUE, the PollThread will issue Polls to the server. 
            When set to FALSE, the poll loop of the PollThread is disabled and Polls will not be 
            sent to the server.</param>
            <returns>The poll state of the PollThread.  If the method succeeds, the state should 
            change to the requested state.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.StopPolling">
            <summary>
            This method is used to stop the PollThread. Once stopped, the PollThread must be started 
            again to enable polling.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.PollDataChanges(Xi.Client.Base.XiDataList)">
            <summary>
            <para>This method is used to poll the endpoint for changes 
            to a specific data list.  It is also used as a keep-alive for the 
            poll endpoint by setting the listId parameter to 0. In this case,
            null is returned immediately.</para>    
            <para>Changes consists of:</para>
            <para>1) values for data objects that were added to the list,</para> 
            <para>2) values for data objects whose current values 
            have changed since the last time they were reported to the 
            client via this interface.  If a deadband filter has been 
            defined for the list, floating point values are not considered 
            to have changed unless they have changed by the deadband amount.</para>
            <para>3) historical values that meet the list filter criteria, 
            including the deadband.</para>
            <para>This method returns the list of changed values to the client application 
            using the InformationReport callback. The list of changed values is null if 
            this is a keep-alive.  The following two standard data objects can also be
            returned. </para>  
            <para>The first is identified by a ListId of 0 and a ClientId of 0.  It 
            contains a ServerStatus object value that indicates to the client that 
            the server or one of its wrapped servers is shutting down.  When present, 
            this will always be the first value in the returned OBJECT value array.</para>
            <para>The second is identified by its ListId and a ClientId of 0.  It contains 
            a UInt32 value that indicates to the client how many data changes have been 
            discarded for the specified list since the last poll response.  If this 
            condition persists, the client should increase its poll frequency. 
            When present, this will always be the first value in the returned 
            UINT value array.</para>
            </summary>
            <param name="dataList">
            The data list to poll.  Null if this is a keep-alive.
            </param>
        </member>
        <member name="M:Xi.Client.Base.XiContext.PollEventChanges(Xi.Client.Base.XiEventList,Xi.Contracts.Data.FilterSet)">
             <summary>
             
             <para>This method is used to poll the endpoint for changes to 
             a specific event list.  Event messages are sent when there 
             has been a change to the specified event list. A new alarm 
             or event that has been added to the list, a change to an 
             alarm already in the list, or the deletion of an alarm from 
             the list constitutes a change to the list.</para>
             
             <para>Once an event has been reported from the list, it 
             is automatically deleted from the list.  Alarms are only 
             deleted from the list when they transition to inactive and 
             acknowledged.  </para>
             <para>This method return a list of event messages to the client application 
             via the EventNotification callback method.  The list consists of alarm/event 
             messages for new alarms/events in the Event List, and alarm/event messages 
             that represent state changes to alarms that are already in the list, including 
             alarm/event messages that identify state changes that caused alarms to tbe 
             deleted from the list.</para> 
             <para>Null is returned as a keep-alive message when there have been no new 
             alarm/event messages since the last poll.</para>
             <para>In addition, a special event message is included as the first entry 
             in the list to indicate to the client that one or more event message have 
             been discarded due to queue size limitations.  All fields of this message 
             are set to null with the exception of the following:</para>
            <para>	OccurrenceTime = current time of the response</para>
            <para>	EventType = EventType.DiscardedMessage</para>
            <para>	TextMessage = the number of event/alarm messages discarded since the 
            last poll response was returned.</para>
             </summary>
             <param name="eventList">
             The event list to poll 
             (reported).
             </param>
             <param name="filterSet">
             Optional set of filters to further refine the selection from 
             the alarms and events in the list. The event list itself is 
             created using a filter.
             </param>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ProcessPollException(System.Exception)">
            <summary>
            <para>This method processes an exception thrown when calling one of the methods 
            on the IPoll interface for a given list.</para>
            <para>If the exception is a FaultException that indicates that the server has shutdown, 
            the Abort callback is called to notify the client of the shutdown. No other FaultExceptions 
            should be thrown by the server for a Poll request. However, if one is received, 
            the client application is notified.</para>
            <para>If the exception is a CommunicationException, indicating that the WCF channel 
            did not complete the last poll request, the state of the endpoint is set to 
            CommunicationFail and recovery is automatically attempted.</para>
            <para>For all other exceptions the client application is notified of the problem.</para>
            </summary>
            <param name="ex">The exception to be processed.</param>
        </member>
        <member name="M:Xi.Client.Base.XiContext.PollThread">
            <summary>
            This method loops and polls lists based on their buffering rate or update rate.
            The buffering rate is used if it is defined and supported by the server.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.IsTimeToPoll(System.Int32,System.UInt32)">
            <summary>
            This method determine if it is time to poll a list based on the poll loop count 
            and the list update or buffering rate.
            </summary>
            <param name="loopCount">The current poll thread loop count.</param>
            <param name="listRate">The list update or buffering rate.  The buffering rate is used
            if defined.</param>
            <returns></returns>
        </member>
        <member name="F:Xi.Client.Base.XiContext._pollThread">
            <summary>
            The thread implemented by the Client Base to automatically poll the server.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._pollState">
            <summary>
            This data member is the private represention of the PollState interface property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._pollRateInMilliseconds">
            <summary>
            This data member is the private represention of the PollRateInMilliseconds interface property
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.Abort(Xi.Contracts.Data.ServerStatus,System.String)">
            <summary>
            <para>This callback method is implemented by the client to 
            be notified when the server server state changes to Aborting.  
            Clients that use the poll interface instead of this callback 
            interface can add the ServerDescription object to a data 
            object list to be notified when the server state transitions   
            to the aborting state.</para> 
            </summary>
            <param name="serverStatus">
            The ServerStatus object for the server or wrapped server for which 
            the abort is being reported.
            </param>
            <param name="reason">
            The reason the context is being closed.
            </param>
        </member>
        <member name="M:Xi.Client.Base.XiContext.InformationReport(System.UInt32,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
            <para>This callback method is implemented by the client 
            to receive data changes. </para> 
            <para> Servers send data changes to the client that have 
            not been reported to the client via this method.  
            Changes consists of:</para>
            <para>1) values for data objects that were added to the list,</para> 
            <para>2) values for data objects whose current values 
            have changed since the last time they were reported to the 
            client via this interface.  If a deadband filter has been 
            defined for the list, floating point values are not considered 
            to have changed unless they have changed by the deadband amount.</para>
            <para>3) historical values that meet the list filter criteria, 
            including the deadband.</para> 
            <para>In addition, the server may insert a special value that 
            indicates the server or one of its wrapped servers are shutting down.  </para>
            <para>This value is inserted as the first value in the list of values 
            in the callback. Its ListId and ClientId are both 0 and its data type is 
            ServerStatus. </para>
            </summary>
            <param name="clientListId">
            The client identifier of the list for which data changes are being 
            reported.
            </param>
            <param name="updatedValues">
            The values being reported.
            </param>
        </member>
        <member name="M:Xi.Client.Base.XiContext.EventNotification(System.UInt32,Xi.Contracts.Data.EventMessage[])">
            <summary>
            <para>This callback method is implemented by the client to 
            receive alarms and events.</para> 
            <para> Servers send event messages to the client via this 
            interface.  Event messages are sent when there has been a 
            change to the specified event list. A new alarm or event 
            that has been added to the list, a change to an alarm already 
            in the list, or the deletion of an alarm from the list 
            constitutes a change to the list.</para>
            <para>Once an event has been reported from the list, it 
            is automatically deleted from the list.  Alarms are only 
            deleted from the list when they transition to inactive and 
            acknowledged.  </para>
            </summary>
            <param name="clientListId">
            The client identifier of the list for which alarms/events are being 
            reported.
            </param>
            <param name="eventMessageArray">
            The array of alarms/events are being reported.
            </param>
        </member>
        <member name="M:Xi.Client.Base.XiContext.PassthroughCallback(System.Int32,Xi.Contracts.Data.PassthroughResult)">
            <summary>
            This method returns the results of invoking an asynchronous passthrough.
            </summary>
            <param name="invokeId">
            The identifier for this invocation of the passthrough defined by the client 
            in the request.  
            </param>
            <param name="passthroughResult">
            The result of executing the passthrough, consisting of the result code, the invokeId 
            supplied in the request, and a byte array.  It is up to the client application to 
            interpret this byte array.  
            </param>
        </member>
        <member name="F:Xi.Client.Base.XiContext._ActiveContexts">
            <summary>
            This static data member contains the dictionary of all contexts defined for this instance of the Client Base.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for Xi Lists in the context.
            </summary>
            <returns>Returns the enumerator for the list of objects in the context. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.System#Collections#Generic#IEnumerable{Xi#Client#Base#API#IXiListBase}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for Xi Lists in the context.
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>The enumerator for Xi Lists in the context. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.GetAlarmSummary(Xi.Contracts.Data.InstanceId)">
            <summary>
            <para>This method is used to request summary information for the 
            alarms that can be generated for a given event source.</para>
            </summary>
            <param name="eventSourceId">
            The InstanceId for the event source for which alarm summaries are 
            being requested.
            </param>
            <returns>
            The summaries of the alarms that can be generated by the specified 
            event source.  
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.Identify">
            <summary>
            <para>This method is used to get the description of the 
            server.  This method can be called before a context has 
            been established with the server.</para>
            </summary>
            <returns>
            The description of the server. 
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.Status">
            <summary>
            This method is used to get the state of the server, and 
            the state of any wrapped servers.
            </summary>
            <returns>
            The status of the Xi server and the status of wrapped servers. 
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.LookupResultCodes(System.Collections.Generic.IEnumerable{System.UInt32})">
            <summary>
            <para>This method returns text descriptions of error codes.</para>  
            </summary>
            <param name="resultCodes">
            The result codes for which text descriptions are being requested.
            </param>
            <returns>
            The list of result codes and if a result code indicates success, 
            the requested text descriptions. The size and order of this 
            list matches the size and order of the resultCodes parameter.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.FindObjects(Xi.Contracts.Data.FindCriteria,System.UInt32)">
            <summary>
            <para>This method is used to find objects in the server.  The 
            client uses the findCriteria parameter to identify a starting 
            branch and a set of filter criteria.  It also specifies the 
            maximum number of objects to return.  </para> 
            <para>The server examines the objects that are children of the 
            specified branch and selects those that match the filter criteria.
            Note that "children" are objects whose root paths can be created 
            by appending their names to the path used to identify the starting  
            branch.</para>  
            <para>The object attributes of the selected objects are 
            returned to the client. The number returned is limited by the 
            number specified in the numberToReturn parameter.  If the number 
            returned is less than than that number, then the client can 
            safely assume that the server has no more to return.</para>  
            <para>However, if the number returned is equal to that number, 
            then the client can retrieve the next set of results by issuing 
            another FindObjects() call with the findCriteria parameter set to 
            null. A null findCriteria indicates to the server to continue 
            returning results from those remaining in the list.  The client 
            eventually detects the end of the list by receiving a response 
            that returns less than specified by the numberToReturn parameter.</para>
            </summary>
            <param name="findCriteria">
            The criteria used by the server to find objects.  If this 
            parameter is null, then this call is a continuation of the 
            previous find.
            </param>
            <param name="numberToReturn">
            The maximum number of objects to return in a single response.
            </param>
            <returns>
            <para>The list of object attributes for the objects that met 
            the filter criteria. </para>  
            <para>Returns null if the starting object is a leaf, or no objects 
            were found that meet the filter criteria, or if the call was made 
            with a null findCriteria and there are no more objects to return.</para>
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.GetStandardMib">
            <summary>
            This method is used to read the standard MIB.
            </summary>
            <returns>
            The standard MIB is returned.
            </returns>
        </member>
        <member name="F:Xi.Client.Base.XiContext._serverEntry">
            <summary>
            The private representation of the ServerEnty pubnlic property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._StandardMib">
            <summary>
            This data member is the private representation of the StandardMib interface property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._ServerDescription">
            <summary>
            This data member contains the Server Description for this Xi Context.  Is set by 
            the Identify() method during context establishment.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._ServerStatusList">
            <summary>
            The status of the server
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.NewDataList(System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method creates a new data list for the context.
            </summary>
            <param name="updateRate">The update rate for the list.</param>
            <param name="bufferingRate">The buffering rate for the list. 0 if not used.</param>
            <param name="filterSet">The filter set for the list. Null if not used.</param>
            <returns>Returns the new data list.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.NewDataJournalList(System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method creates a new data journal (historical data) list for the context.
            </summary>
            <param name="updateRate">The update rate for the list.</param>
            <param name="bufferingRate">The buffering rate for the list. 0 if not used.</param>
            <param name="filterSet">The filter set for the list. Null if not used.</param>
            <returns>Returns the new data list.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.NewEventList(System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method creates a new event list for the context.
            </summary>
            <param name="updateRate">The update rate for the list.</param>
            <param name="bufferingRate">The buffering rate for the list. 0 if not used.</param>
            <param name="filterSet">The filter set for the list. Null if not used.</param>
            <returns>Returns the new data list.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.NewEventJournalList(System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method creates a new event journal (historical events) list for the context.
            </summary>
            <param name="updateRate">The update rate for the list.</param>
            <param name="bufferingRate">The buffering rate for the list. 0 if not used.</param>
            <param name="filterSet">The filter set for the list. Null if not used.</param>
            <returns>Returns the new data list.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.DefineList(Xi.Client.Base.XiListBase,System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is used to create a Xi List of one of the four supported list types.  
            Which are: 
            1) DataList - used to maintain a list of active process values.
            2) DataJournalList - used to obtain a historical list of process values.
            3) EventList - used to obtain process events as they occur.
            4) EventJournalList - used to obtain a historical list of process events.
            </summary>
            <param name="xiList">
            The list to be created.
            </param>
            <param name="updateRate">
            The requested update rate in milliseconds for the list. The  
            update rate indicates how often the server updates the 
            values of elements in the list.  A value of 0 indicates 
            that updating is exception-based. The server may negotiate 
            this value, up or down as necessary to support its efficient 
            operation.
            </param>
            <param name="bufferingRate">
            <para>An optional-use parameter that indicates that the server is 
            to buffer data updates, rather than overwriting them, until either 
            the time span defined by the buffering rate expires or the values 
            are transmitted to the client in a callback or poll response. If 
            the time span expires, then the oldest value for a data object is 
            discarded when a new value is received from the underlying system.</para>
            <para>The value of the bufferingRate is set to 0 to indicate 
            that it is not to be used and that new values overwrite (replace) existing 
            cached values.  </para>
            <para>When used, this parameter contains the client-requested buffering 
            rate, which the server may negotiate up or down, or to 0 if the 
            server does not support the buffering rate. </para>
            <para>The FeaturesSupported member of the StandardMib is used to indicate 
            server support for the buffering rate.</para>
            </param>
            <param name="filterSet">
            The set of filters to be used to select the elements of the list.  
            </param>
            <returns>
            The attributes created for the list.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.RemoveAList(Xi.Client.Base.API.IXiListBase)">
            <summary>
            This method deletes a list from the Xi Server.
            </summary>
            <param name="xiList">The list to deleted</param>
            <returns>The results of the deletion.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.GetListAttributes(System.UInt32)">
            <summary>
            This method gets the attributes of a Xi List.
            </summary>
            <param name="serverListId">The server id for the list</param>
            <returns>The requested list attributes</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.AddDataObjectsToList(System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.ListInstanceId})">
            <summary>
            <para>This method is used to add objects to a list.  Objects 
            are added with updating of their values by the server 
            disabled. Updating of values by the server can be enabled 
            using the EnableListUpdating() method.</para>
            <para>For performance reasons, data objects should not be 
            added one at a time by clients. Clients should, instead,
            create a list of data objects and submit them all together 
            to be added to the data list.  </para>
            </summary>
            <param name="serverListId">
            The server identifier for the list to which data objects are to be 
            added.
            </param>
            <param name="dataObjectsToAdd">
            The data objects to add.
            </param>
            <returns>
            The list of results. The size and order of this list matches 
            the size and order of the objectsToAdd parameter.   
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.RemoveDataObjectsFromList(System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to remove members from a list.  
            It does not, however, delete the corresponding data object 
            from the server.</para>
            </summary>
            <param name="serverListId">
            The server identifier for the list from which data objects are 
            to be removed.
            </param>
            <param name="serverAliasesToRemove">
            The server aliases of the data objects to remove.
            </param>
            <returns>
            The list identifiers and result codes for data objects whose 
            removal failed. Returns null if all removals succeeded.  
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ModifyListAttributes(System.UInt32,System.Nullable{System.UInt32},System.Nullable{System.UInt32},Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is used to change the update rate, buffering rate, and/or 
            filter set of a list.  The new value replace the old values if they exist.
            </summary>
            <param name="serverListId">
            The seerver identifier for the list for which the filters are to 
            be changed.
            </param>
            <param name="updateRate">
            The new update rate of the list.  The server will negotiate this rate to one 
            that it can support.  GetListAttributes can be used to obtain the current 
            value of this parameter.  Null if the update rate is not to be updated.  
            </param>
            <param name="bufferingRate">
            The new buffering rate of the list.  The server will negotiate this rate to one 
            that it can support.  GetListAttributes can be used to obtain the current 
            value of this parameter.  Null if the buffering rate is not to be updated.
            </param>
            <param name="filterSet">
            The new set of filters.  The server will negotiate these filters to those 
            that it can support.  GetListAttributes can be used to obtain the current 
            value of this parameter.  Null if the filters are not to be updated.
            </param>
            <returns>
            The revised update rate, buffering rate, and filter set.  Attributes 
            that were not updated are set to null in this response.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.EnableListUpdating(System.UInt32,System.Boolean)">
             <summary>
             <para>This method is used to enable or disable updating of an entire 
             list. When this method is called, the enabled state of the list is changed, 
             but the enabled state of the individual elements of the list is unchanged. </para>
             <para>When a list is disabled, the server excludes it from participating in 
             callbacks and polls. However, at the option of the server, the server may continue 
             updating its cache for the elements of the list.</para>
             </summary>
             <param name="serverListId">
             The identifier for the list for which updating is to be 
             enabled or disabled.
            </param>
             <param name="enableUpdating">
             Indicates, when TRUE, that updating of the list is to be enabled,
             and when FALSE, that updating of the list is to be disabled.
             </param>
             <returns>
             The attributes of the list.
             </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.EnableListElementUpdating(System.UInt32,System.Boolean,System.Collections.Generic.List{System.UInt32})">
             <summary>
             <para>This method is used to enable or disable updating of 
             individual entries of a list.  If the server aliases parameter is 
             null, then all entries of the list are enabled/disabled.  This call 
             does not change the enabled state of the list itself.</para>
             <para>When an element of the list is disabled, the server excludes it 
             from participating in callbacks and polls. However, at the option of the 
             server, the server may continue updating its cache for the element.</para>
             </summary>
             <param name="serverListId">
             The identifier for the list for which updating is to be 
             enabled or disabled.
            </param>
             <param name="enableUpdating">
             Indicates, when TRUE, that updating of the list is to be enabled,
             and when FALSE, that updating of the list is to be disabled.
             </param>
             <param name="serverAliases">
             The list of aliases for data objects of a list for which updating 
             is to be enabled or disabled.  When this value is null updating all 
             elements of the list are to be enabled/disabled. In this case, however, 
             the enable/disable state of the list itself is not changed.
             </param>
             <returns>
             <para>Returns null if the server was able to successfully enable/disable 
             the the specified elements for the specified list.  If not, returns the 
             client and server aliases and result codes for the data objects that could 
             not be enabled/disabled.  </para> 
             <para>Throws an exception if the specified context or list could not be found.</para> 
             </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.AddEventMessageFields(System.UInt32,System.UInt32,System.Collections.Generic.IEnumerable{Xi.Contracts.Data.TypeId})">
             <summary>
             This method is used to request that category-specific fields be 
             included in event messages generated for alarms and events of 
             the category for the specified Event/Alarm List.
             </summary>
             <param name="serverListId">
             The server identifier for the list for which event message fields are being added. 
            </param>
             <param name="categoryId">
             The category for which event message fields are being added.
             </param>
             <param name="fieldObjectTypeIds">
             The list of category-specific fields to be included in the event 
             messages generated for alarms and events of the category.  Each field 
             is identified by its ObjectType LocalId obtained from the EventMessageFields 
             contained in the EventCategoryConfigurations Standard MIB element.
             </param>
             <returns>
             The ObjectTypeIds and result codes for the fields that could not be 
             added to the event message. Returns null if all succeeded.  
             </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.TouchDataObjects(System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to cause one or more data objects of 
            a list to be "touched".  Data objects that are in the disabled 
            state (see the EnableListElementUpdating() method) are not 
            affected by this method.  This method cannot be used with 
            event lists.</para>
            <para>Touching an enabled data object causes the server to update 
            the data object, mark it as changed (even if their values did not change), 
            and then return it to the client in the next callback or poll.</para> 
            </summary>
            <param name="serverListId">
            The identifier for the lists whose data objects are to be touched.
            </param>
            <param name="serverAliases">
            The aliases for the data objects to touch.
            </param>
            <returns>
            The list of error codes for the data objects that could not be 
            touched.  See XiFaultCodes claass for standardized result codes. 
            Data objects that were successfully touched are not included in this 
            list.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.TouchList(System.UInt32)">
             <summary>
             <para>This method is used to cause a list to be "touched".</para> 
             <para>For lists that contain data objects, this method causes 
             the server to update all data objects in the list that are currently 
             enabled (see the EnableListElementUpdating() method), mark them 
             as changed (even if their values did not change), and then return 
             them all to the client in the next callback or poll. </para>  
             <para>For lists that contain events, this method causes 
             the server to mark all alarms/event in the list as changed, 
             and then return them all to the client in the next callback.</para>
             </summary>
             <param name="serverListId">
             The identifier for the list to be touched.
            </param>
             <returns>
             The result code for the operation.  See XiFaultCodes class for 
             standardized result codes. 
             </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.Find(System.Predicate{Xi.Client.Base.XiListBase})">
            <summary>
            This method returns the first list it finds that matches the specified match parameter.
            </summary>
            <param name="match">The predicate that contains the match criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.GetDataList(System.UInt32)">
            <summary>
            This method returns the list with the specified Client List Id
            </summary>
            <param name="clientListId">The client list id</param>
            <returns>The specified list</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.GetDataListJournal(System.UInt32)">
            <summary>
            This method returns the list with the specified Client List Id
            </summary>
            <param name="clientListId">The client list id</param>
            <returns>The specified list</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.GetEventList(System.UInt32)">
            <summary>
            This method returns the list with the specified Client List Id
            </summary>
            <param name="clientListId">The client list id</param>
            <returns>The specified list</returns>
        </member>
        <member name="F:Xi.Client.Base.XiContext._random">
            <summary>
            This data member contains a random number used to generate the client alias
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.UniqueClientListId">
            <summary>
            Every Xi List must have a unique ClientId.  
            This method is used to obtain that unique value.  The Xi ClientBase 
            assembly implements the Client LocalId (Alias) as a random number, 
            other methods may be used in alternate implementations.  Note that the 
            Client Alias is passed between the client application and 
            the Xi Server generally on a non encrypted channel.
            </summary>
            <returns>The unique value.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.GetXiEncode">
            <summary>
            This method creates RSA encode and decode keys, returning 
            the encode RSA parameters and their identifier to the caller, and 
            storing the decode RSA parameters in a private Xi Context dictionary.
            </summary>
            <returns>The encode RSA parameters and their identifier.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.Initiate(System.ServiceModel.Description.ServiceEndpoint,Xi.Contracts.Data.ServerEntry,System.UInt32,System.UInt32,System.UInt32,System.String,Xi.Client.Credentials.XiUserInfo)">
            <summary>
            This method is invoked to create an instance of the XiContext class. The XiContext 
            class implements the IXiContext interface.  This call establishes the Xi connection 
            with the server for the calling client application.  This method allows the 
            client application to supply the user info (credentials) to be used to connect to 
            the server.
            </summary>
            <param name="serviceEndpoint">
            This parameter supplies a WCF Endpoint that implements the IResourceManagement 
            interface as defined in the Xi Contracts assembly.
            </param>
            <param name="serverEntry">
            The ServerEntry for the server.
            </param>
            <param name="contextTimeout">
            This parameter supplies an Xi Server context timeout in milliseconds.  The Xi ClientBase 
            limits this to be not less than seven seconds or greater than thirty minutes.
            </param>
            <param name="contextOptions">
            This parameter enables various debug and tracing options used to aide in diagnosing issues. 
            See ContextOptions enum for the valid values.
            </param>
            <param name="localeId">
            The localed id requested to be used for the context.
            </param>
            <param name="reInitiateKey">
            The ReInitiate Key that may be required by the server.
            </param>
            <param name="xiUserInfo">
            The user info object that contains the username and password.  A single attempt is made 
            to connect to the server using this information. If unsuccessful, the client application 
            may wish to obtain new user info and resubmit the Initiate() call.
            </param>
            <returns>
            An instance of the XiContext class is returned to the client.  The client then uses this 
            instance for further interactions with the Xi Server.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.Initiate(System.ServiceModel.Description.ServiceEndpoint,Xi.Contracts.Data.ServerEntry,System.UInt32,System.UInt32,System.UInt32,System.String)">
            <summary>
            This method is invoked to create an instance of the XiContext class. The XiContext 
            class implements the IXiContext interface.  This call establishes the Xi connection 
            with the server for the calling client application.  This method automatically obtains 
            the user info (credentials) to be used to connect to the server.
            </summary>
            <param name="serviceEndpoint">
            This parameter supplies a WCF Endpoint that implements the IResourceManagement 
            interface as defined in the Xi Contracts assembly.
            </param>
            <param name="serverEntry">
            The ServerEntry for the server.
            </param>
            <param name="contextTimeout">
            This parameter supplies an Xi Server context timeout in milliseconds.  The Xi ClientBase 
            limits this to be not less than seven seconds or greater than thirty minutes.
            </param>
            <param name="contextOptions">
            This parameter enables various debug and tracing options used to aide in diagnosing issues. 
            See ContextOptions enum for the valid values.
            </param>
            <param name="localeId">
            The localed id requested to be used for the context.
            </param>
            <param name="reInitiateKey">
            The optional ReInitiate Key.
            </param>
            <returns>
            An instance of the XiContext class is returned to the client.  The client then uses this 
            instance for further interactions with the Xi Server.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.LookUpContext(System.String)">
            <summary>
            This method is invoked to find a context in the static _ActiveContexts dictionary for a specified context id.
            </summary>
            <param name="contextId">The context to look up.</param>
            <returns>The context if found, otherwise null.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.#ctor(System.ServiceModel.Description.ServiceEndpoint,Xi.Contracts.Data.ServerEntry,System.UInt32,System.UInt32,System.UInt32,System.String,Xi.Client.Credentials.XiUserInfo)">
            <summary>
            <para>This method is invoked to create an instance of the XiContext class. The 
            XiContext class implements the IXiContext interface.  This call establishes the Xi 
            with the server for the calling client application.  This method accepts the user 
            connection info (credentials) to be used to connect to the server from the caller. </para>
            <para>This constructor should only be called by the static Initiate() methods.</para>
            </summary>
            <param name="serviceEndpoint">
            This parameter supplies a WCF Endpoint that implements the IResourceManagement 
            interface as defined in the Xi Contracts assembly.
            </param>
            <param name="serverEntry">
            The ServerEntry for the server.
            </param>
            <param name="contextTimeout">
            This parameter supplies an Xi Server context timeout in milliseconds.  The Xi ClientBase 
            limits this to be not less than seven seconds or greater than thirty minutes.
            </param>
            <param name="contextOptions">
            This parameter enables various debug and tracing options used to aide in diagnosing issues. 
            See ContextOptions enum for the valid values.
            </param>
            <param name="localeId">
            The localed id requested to be used for the context.
            </param>
            <param name="reInitiateKey">
            The optional ReInitiate Key.
            </param>
            <param name="xiUserInfo">
            The user info (credentials) to be used to connect to the server.
            </param>
            <returns>
            An instance of the XiContext class is returned to the client.  The client then uses this 
            instance for further interactions with the Xi Server.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.PrepareDispose">
            <summary>
            This method is for tasks that must be done first before the context is disposed, and not during. 
            Usually for timing-sensitive tasks like stopping timers, running threads. 
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.  It is expected that the Xi client application 
            will perform a Dispose() on each active context to close the connection with the 
            Xi Server.  Failure to perform the close will result in the Xi Context remaining 
            active until the application exits.
            </summary>
            <summary>
            
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="F:Xi.Client.Base.XiContext._hasBeenDisposed">
            <summary>
            This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext.IsContextClosing">
            <summary>
            Inidicates, when TRUE, that the context is closing or has completed closing 
            and will not accept any more requests on the context.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.SetMaxItemsInObjectGraph(System.ServiceModel.Description.OperationDescriptionCollection,System.Int32)">
            <summary>
            This method sets the MaxItemsInObjectGraph for the WCF connection to the server
            </summary>
            <param name="operations">The OperationDescriptionCollection defined for the channel that is to be 
            updated with the specified MaxItemsInObjectGraph.</param>
            <param name="maxItemsInObjectGraph">The MaxItemsInObjectGraph value to be used.</param>
        </member>
        <member name="F:Xi.Client.Base.XiContext._appLogName">
            <summary>
            This string is the Event Source name for the Windows Application Log 
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.WriteToWindowsApplicationEventLog(System.String,System.Exception)">
            <summary>
            This method writes to the Windows Application Log
            </summary>
            <param name="msg">The message to be written to the log</param>
            <param name="ex">Optional exception whose stack trace, message, and inner exception messages 
            are to be appended to the message written to the log.</param>
        </member>
        <member name="F:Xi.Client.Base.XiContext._IResourceManagement">
            <summary>
            The private representation of the IResourceManagement public property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._resourceManagementServiceEndpoint">
            <summary>
            The private representation of the ResourceManagementServiceEndpoint public property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._resourceManagementEpConfig">
            <summary>
            The endpoint configuration for the connected ResourceManagement endpoint
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._contextId">
            <summary>
            This data member is the private representation of the ContextId interface property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._localeId">
            <summary>
            This data member is the private representation of the LocaleId interface property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._binding">
            <summary>
            This data member is the private representation of the Binding interface property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._clientTag">
            <summary>
            This data member represents the Tag interface property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._contextLock">
            <summary>
            This data member is the object used to lock the context.
            It is initialized to a value to provide a unique object that can be locked.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._contextOptions">
            <summary>
            This data member represents the ContextOptions public property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._applicationName">
            <summary>
            This data member represents the ApplicationName public property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._workstationName">
            <summary>
            This data member represents the WorkstationName public property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._rsaDecode">
            <summary>
            The temporary dictionary of decode keys. Each entry is created by the GetXiEncode() 
            method and removed from the dictionary when the XiContext associated with it is created.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._xiUserInfo">
            <summary>
            The private representation of the UserInfo public property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._decode">
            <summary>
            The private representation of the UserData public property.
            This private data member contains the decode clientListId used to decrypt UserInfo. 
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._reInitiateKey">
            <summary>
            This data member is the private representation of the public ReInitateKey property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._contextIimeout">
            <summary>
            This data member is the private representation of the public ContextIimeout property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._resourceManagementState">
            <summary>
            The state of the ResourceManagement endpoint
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._resourceManagementNotificationSent">
            <summary>
            Indicates when true that the client application has been notified of the loss of the resource management connection
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._readEndpointNotificationSent">
            <summary>
            Indicates when true that the client application has been notified of the loss of the read endpoint connection
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._writeEndpointNotificationSent">
            <summary>
            Indicates when true that the client application has been notified of the loss of the write endpoint connection
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._pollEndpointNotificationSent">
            <summary>
            Indicates when true that the client application has been notified of the loss of the poll endpoint connection
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._callbackEndpointNotificationSent">
            <summary>
            Indicates when true that the client application has been notified of the loss of the callback endpoint connection
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._lastResourceManagementCall">
            <summary>
            The tick count of receipt of the response to the last successful IResourceManagement call.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._tickCountResourceManagementFail">
            <summary>
            The tick count that the failure of the IResourceManagement channel was detected.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._wcfFailedCommsExceptionTime">
            <summary>
            The estimated time for WCF to detect and call the Exception for failed 
            communications with the server. This time should be set to a time period 
            to cover worst case detection time.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._timeToRecoverCommunications">
            <summary>
            The estimated time for the underlying communications problem to recover.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._keepAliveIntervalMsecs">
            <summary>
            The time interval that controls when ClientKeepAlive messages are 
            sent to the server.  If no IResourceManagement messages are sent to 
            the server for this period of time, a ClientKeepAlive message is 
            sent.  The value is expressed in milliseconds.  This value is the 
            same for all contexts.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._keepAliveLoopTimeMsecs">
            <summary>
            The frequency, in milliseconds, for firing the _keepAliveTimer
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._keepAliveTimer">
            <summary>
            The timer used to implement the keep-alive loop
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._lastKeepAliveTickCount">
            <summary>
            
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.OnInitiate(System.ServiceModel.Description.ServiceEndpoint,Xi.Client.Credentials.XiUserInfo)">
            <summary>
            This method is invoked to create an instance of the XiContext class. The XiContext 
            class implements the IXiContext interface.  This call establishes the Xi connection 
            with the server for the calling client application.  If the user info parameter 
            to be used to connect to the server is present, this method will use it and throw 
            a fault if it is not acceptable to the server. If the user info is not present, this 
            method will use the Windows defaults, and if they are not acceptable, attempt to 
            obtain the user info from the user.
            </summary>
            <param name="serviceEndpoint">
            This parameter supplies a WCF Endpoint that implements the IResourceManagement 
            interface as defined in the Xi Contracts assembly.
            </param>
            <param name="xiUserInfo">
            The user info object that contains the username and password.  A single attempt is made 
            to connect to the server using this information. If unsuccessful, the client application 
            may wish to obtain new user info and resubmit the Initiate() call.
            </param>
            <returns>
            An instance of the XiContext class is returned to the client.  The client then uses this 
            instance for further interactions with the Xi Server.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.SendInitiateToServer">
            <summary>
            This method calls the proxy to send the Initiate message the server
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ValidateContextTimeout(System.UInt32)">
            <summary>
            <para>This method is invoked to ensure that the inactivity timeout to be used for the 
            context falls within prescribed limits (is not too short or too long).  If the 
            timeout period supplied in the call is outside one of these limits, this method 
            returns the limit that was exceeded as timeout to use.</para>  
            <para>The maximum value for the context timeout is 30 minutes.</para>
            <para>The minimum value for the context timeout is 2 times the keep-alive timer period 
            plus the time it takes WCF to detect and report a communications failure.  This should 
            allow the client base to detect a failure and respond to it before the context times out
            in the server</para>
            <para>Note that the keep-alive logic will send a keep alive one keep-alive timer period 
            prior to this timeout.</para>
            </summary>
            <param name="contextTimeout">The inactivity timeout period of the context. This is the 
            same value used by the server to time out and close the context for inactivity.</param>
            <returns>The context timeout to use.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.KeepContextsAlive(System.Object)">
            <summary>
            This is the event method for the System.Timer.TimerCallback delegate used to keep contexts alive. 
            This event is called by the timer used to monitor the keep-alive period.  This method is used to 
            keep the specified context alive.
            </summary>
            <param name="aContext">The context to be kept alive. 
            </param>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ThrowOnNullOrDisconnectedContext">
            <summary>
            This method checks the state of the context. It throws an exception if the context is not available or 
            communication with the server on the ResourceManagement endpoint has been lost.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.CheckIdleTime(System.Int32,System.Int32,Xi.Client.Base.EndpointState@)">
            <summary>
            This method is used to check the idle time for an endpoint by comparing the current time 
            passed in as a parameter against the time of the last message sent on the endpoint. 
            If the difference is greater than the context timeout, then the state of the endpoint is 
            changed to TimedOut.  Otherwise, if the difference is greater than the time interval for 
            sending keep-alives, then true is returned. Otherwise, false is returned.
            </summary>
            <param name="tickCountNow">The current tick count of the caller. This parameter is passed in 
            to allow the caller to snap the current tick count once and use it in a loop to check the idle 
            time for all the contexts.</param>
            <param name="tickCountToCheck">The tick count to use as the basis for the comparison</param>
            <param name="epState">The state of the endpoint that may be changed to TimedOut</param>
            <returns>True, if it is time to send a Keep-Alive message.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.KeepEndpointsAlive(System.Int32)">
            <summary>
            This method keeps the endpoints of the context alive, but only if the ResourceManagment 
            endpoint is connected to the server
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.SendClientKeepAlive(System.Int32)">
            <summary>
            This method sends the ClientKeepAlive to the server. If the call completes late (after another iteration of the timer loop)
            then the state will have been set to Delayed, causing this method to reestablish the Callback endpoint since it may have 
            failed.
            </summary>
            <param name="tickCount">The tick count of the start of the execution of this timer loop.</param>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ReInitiateContext">
            <summary>
            This method is invoked to issue a ReInitiate message to the Xi Server.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ResetReadEP">
            <summary>
            This method is used close and reopen (reconstruct) the Read endpoint.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ResetWriteEP">
            <summary>
            This method is used close and reopen (reconstruct) the Write endpoint.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ResetPollEP">
            <summary>
            This method is used close and reopen (reconstruct) the Poll endpoint.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ResetCallbackEP">
            <summary>
            This method is used close and reopen (reconstruct) the XiCallbackEndpoint endpoint.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ReEstablishCallbackEP">
            <summary>
            This method is invoked to close the callback endpoint, reopen it, and send a SetCallback 
            message to the server.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.AbortOnServerShutdownOrNoContext(System.ServiceModel.FaultException{Xi.Contracts.Data.XiFault})">
            <summary>
            This method checks the exception and notifies the client application using the Abort 
            callback if the server has shutdown or if the context is not open in the server.
            </summary>
            <param name="fe">The exception to check</param>
            <returns>Returns TRUE if the server has shutdown or the context is not open in the server. Otherwise FALSE.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ProcessResourceManagementException(System.Exception)">
            <summary>
            <para>This method processes an exception thrown when the client application calls one 
            of the methods on the IResourceManagment interface.</para> 
            <para>If the exception is a FaultException, the exception is from the server and 
            is rethrown unless the exception indicates that the server has shutdown. In this case
            the Abort callback is called to notify the client of the shutdown.</para>
            <para>If the exception is a CommunicationException, then the ThrowOnDisconnectedEndpoint() 
            method is called on the ResourceManagment endpoint to throw the exception back to the 
            calling client application to notify it of the failed endpoint.</para>
            <para>For all other exceptions, the exception is rethrown.</para>
            </summary>
            <param name="ex">The exception that was thrown.</param>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ContextNotification(System.Object,Xi.Client.Base.API.XiContextNotificationData)">
            <summary>
            This method is called by the ClientBase to notify the client application of context events.
            It provides a thread safe call to the ContextNotifyEvent
            </summary>
            <param name="sender">The calling object.</param>
            <param name="ea">The notification parameters.</param>
            <returns>Returns true if the notification is sent (the ContextNotifyEvent is not null), false if not.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.Notify(System.Object,Xi.Client.Base.API.XiContextNotificationData)">
            <summary>
            This method is called by the ClientBase to notify the client application of context events.
            </summary>
            <param name="sender">The calling object.</param>
            <param name="ea">The notification parameters.</param>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ReadData(System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read the values of one or more 
            data objects in a list.  It is also used as a keep-alive for the 
            read endpoint by setting the listId parameter to 0. In this case,
            null is returned immediately.  </para>
            </summary>
            <param name="serverListId">
            The server identifier of the list that contains data objects to be read.
            Null if this is a keep-alive.
            </param>
            <param name="serverAliases">
            The server aliases of the data objects to read.
            </param>
            <returns>
            <para>The list of requested values. Each value in this list is identified 
            by its client alias.  If the server alias for a data object to read 
            was not found, an ErrorInfo object will be returned that contains 
            the server alias instead of a value, status, and timestamp.  </para>
            <para>Returns null if this is a keep-alive.</para>
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ReadJournalDataForTimeInterval(System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read the historical values that fall between 
            a start and end time for one or more data objects within a specific data 
            journal list.</para>
            </summary>
            <param name="serverListId">
            The server identifier of the list that contains data objects whose 
            historical values are to be read.
            </param>
            <param name="firstTimeStamp">
            The filter that specifies the first or beginning (of returned list) 
            timestamp for values to be returned.  Valid operands include the 
            Timestamp (UTC) and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.  The FilterOperand Operator is used to 
            determine if the returned data should include data values 
            the occur exactly at the first or second time stamp.  If the equals 
            operator is specified then values that occur at the first and second 
            time stamp will be included in the sample set.  Any other operator 
            will not include first or second time stamped values.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the second or ending (of returned list)
            timestamp for values to be returned.  Valid operands include the 
            Timestamp (UTC) and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.  The FilterOperand Operator is not used.
            </param>
            <param name="numValuesPerAlias">
            The maximum number of JournalDataReturnValues to be returned per alias.
            </param>
            <param name="serverAliases">
            The list of server aliases for the data objects whose historical 
            values are to be read.  
            </param>
            <returns>
            The list of requested historical values, or the reason they could not 
            be read.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ReadJournalDataAtSpecificTimes(System.UInt32,System.Collections.Generic.List{System.DateTime},System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read the historical values at specific times for 
            one or more data objects within a specific data journal list.  If no entry exists 
            at the specified time in the data journal for an object, the server creates an 
            interpolated value for that time and includes it in the response as though it 
            actually existed in the journal.</para>
            </summary>
            <param name="serverListId">
            The server identifier of the list that contains data objects whose historical 
            values are to be read.
            </param>
            <param name="timestamps">
            Identifies the timestamps of historical values to be returned for each 
            of the requested data objects. 
            </param>
            <param name="serverAliases">
            The list of server aliases for the data objects whose historical 
            values are to be read.  
            </param>
            <returns>
            The list of requested historical values, or the reason they could not 
            be read.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ReadJournalDataChanges(System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{System.UInt32})">
            <summary>
            <para>This method is used to read changed historical values for one 
            or more data objects within a specific data journal list.  Changed historical 
            values are those that were entered into the journal and then changed (corrected) 
            by an operator or other user.</para>
            </summary>
            <param name="serverListId">
            The server identifier of the list that contains data objects whose historical 
            values are to be read.
            </param>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="serverAliases">
            The list of server aliases for the data objects whose historical 
            values are to be read.  
            </param>
            <param name="numValuesPerAlias">
            The maximum number of JournalDataChangedValues to be returned per alias.  
            </param>
            <returns>
            The list of requested historical values, or the reason they could not 
            be read.  If, however, the number returned for any alias is equal to 
            numValuesPerDataObject, then the client should issue a ReadJournalDataChangesNext() 
            to retrieve any remaining values.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ReadCalculatedJournalData(System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.TimeSpan,System.Collections.Generic.List{Xi.Contracts.Data.AliasAndCalculation})">
            <summary>
            <para>This method is used to read calculated historical values (e.g. averages or 
            interpolations) for one or more data objects within a specific data journal list.  
            The time-range used to select the historical values is specified by the client. 
            Additionally, the client specifies a calculation period that divides that time 
            range into periods. The server calculates a return value for each of these periods.</para>
            </summary>
            <param name="serverListId">
            The server identifier of the list that contains data objects whose historical 
            values are to be read.
            </param>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="calculationPeriod">
            The time span used to divide the specified time range into individual periods for 
            which return values are calculated.  The specified calculation is performed on the 
            set of historical values of a data object that fall within each period. 
            </param>
            <param name="serverAliasesAndCalculations">
            The list of server aliases for the data objects whose historical 
            values are to be calculated, and the calculation to perform for each.  
            </param>
            <returns>
            The set of calculated values. There is one value for each calculation period within 
            the specified time range for each specific data object.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ReadJournalDataProperties(System.UInt32,Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
            <summary>
            This method reads the properties associated with a historized data object.
            </summary>
            <param name="serverListId">
            The server identifier of the list that contains data objects whose property 
            values are to be read.
            </param>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="serverAlias">
            The server alias of the data object whose property values are to be read.  
            </param>
            <param name="propertiesToRead">
            The TypeIds of the properties to read. Each property is identified by 
            its property type.
            </param>
            <returns>
            The array of requested property values.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ProcessReadException(System.Exception,System.UInt32)">
            <summary>
            <para>This method processes an exception thrown when calling one of the methods 
            on the IRead interface for a given list.</para> 
            <para>If the exception is a FaultException, the exception is from the server and 
            is rethrown unless the exception indicates that the server has shutdown. In this case
            the Abort callback is called to notify the client of the shutdown.</para>
            <para>If the exception is a CommunicationException and the listId is 0, a keep-alive 
            generated by the ClientBase for the Read endpoint failed. In this case, the ContextNotify 
            method is called to report the failure to the client application.</para>
            <para>If the exception is a CommunicationException and the listId is not 0, then the 
            ThrowOnDisconnectedEndpoint() method is called on the Read endpoint to throw the exception 
            back to the calling client application to notify it of the failed endpoint.</para>
            <para>For all other exceptions, the exception is rethrown.</para>
            </summary>
            <param name="ex">The exception that was thrown.</param>
            <param name="serverListId">The identifier of the list on which the Read() was attempted.</param>
        </member>
        <member name="M:Xi.Client.Base.XiContext.WriteData(System.UInt32,Xi.Contracts.Data.WriteValueArrays)">
            <summary>
            This method is used to write data of the specified list to the server.  It is called 
            by the ClientBase after the client application has prepared and committed the data 
            values.
            </summary>
            <param name="serverListId">The server identifier of the list containing the data objects to write.</param>
            <param name="writeValueArrays">The data values to write.</param>
            <returns>
            The list server aliases and result codes for the data objects whose 
            write failed. Returns null if all writes succeeded or null if this 
            is a keep-alive.  
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.ProcessWriteException(System.Exception,System.UInt32)">
            <summary>
            <para>This method processes an exception thrown when calling one of the methods 
            on the IWrite interface for a given list.</para> 
            <para>If the exception is a FaultException, the exception is from the server and 
            is rethrown unless the exception indicates that the server has shutdown. In this case
            the Abort callback is called to notify the client of the shutdown.</para>
            <para>If the exception is a CommunicationException and the listId is 0, a keep-alive 
            generated by the ClientBase for the Write endpoint failed. In this case, the ContextNotify 
            method is called to report the failure to the client application.</para>
            <para>If the exception is a CommunicationException and the listId is not 0, then the 
            ThrowOnDisconnectedEndpoint() method is called on the Write endpoint to throw the exception 
            back to the calling client application to notify it of the failed endpoint.</para>
            <para>If the exception is not a FaultException nor a CommunicationException, the exception 
            is rethrown.</para>
            </summary>
            <param name="ex">The exception that was thrown.</param>
            <param name="serverListId">The identifier of the list on which the Read() was attempted.</param>
        </member>
        <member name="M:Xi.Client.Base.XiContext.OpenEndpoint(System.ServiceModel.Description.ServiceEndpoint,System.UInt32,System.TimeSpan)">
            <summary>
            <para>This method opens an endpoint that can be used to access one or more lists.  
            Each newly opened endpoint is assigned its own unique identifier.  It may be that 
            the server supports only one endpoint of each type (e.g. Read). In this case a 
            second attempt to open a Read endpoint will succeed and the EndpointId of the already 
            opened Read endpoint will be returned.  </para>
            </summary>
            <param name="serviceEndpoint">The serviceEndpoint of the endpoint to be opened. 
            ServiceEndpoints are retrieved from the server by the DiscoverServer() method.
            </param>
            <param name="keepAliveSkipCount">The keep-alive skip count for callback endpoints. Not used 
            and set to zero for non-callback endpoints.</param>
            <param name="callbackRate">The callback rate for callback endpoints. Not used 
            and set to zero for non-callback endpoints.</param>
            <returns>
            The definition of the endpoint.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.GetEndpointByContract(System.String)">
            <summary>
            This method is used to get the endpoint that implements the specified contractTypeName type.
            </summary>
            <param name="contractTypeName">The contractTypeName type obtained using the typeof() method. (e.g. typeof(IRead))</param>
            <returns>Returns the requested endpoint if successful, otherwise null.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.CloseEndpoint(System.String)">
            <summary>
            This method is used to close an endpoint. 
            </summary>
            <param name="endpointId">The endpoint to close.</param>
        </member>
        <member name="M:Xi.Client.Base.XiContext.AddListToEndpoint(System.UInt32,System.String)">
            <summary>
            This method adds a list to an endpoint.
            </summary>
            <param name="serverListId">
            The identifier of the list to add to the endpoint.
            </param>
            <param name="endpointId">
            A string value that uniquely identifies the endpoint 
            to which the list is to be added.
            </param>
            <returns>
            The list identifier and result code for the list whose 
            add failed. Returns null if the add succeeded.  Throws 
            a fault if the specified context could not be found.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.RemoveListFromEndpoint(System.UInt32,System.String)">
            <summary>
            This method removes (deassigns) a list from an endpoint.
            </summary>
            <param name="serverListId">The server identifier of the list to remove.</param>
            <param name="endpointId">The server identifier of the endpoint.</param>
            <returns>The result code. See XiFaultCodes class for standardized result codes. </returns>
        </member>
        <member name="F:Xi.Client.Base.XiContext._sendTimeout">
            <summary>
            This data member is the private representation of the SendTimeout interface property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._readEndpoint">
            <summary>
            The private representation of the ReadEndpoint interface property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._writeEndpoint">
            <summary>
            The private representation of the WriteEndpoint interface property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._pollEndpoint">
            <summary>
            The private representation of the PollEndpoint interface property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._callbackEndpoint">
            <summary>
            The private representation of the CallbackEndpoint interface property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext._receiveTimeout">
            <summary>
            The private receive timeout for all endpoints used by all contexts.
            This timeout is not used on the client side according to Microsoft documentation, but is 
            defined because it is part of the setup of the WCF channel.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.PollState">
            <summary>
            This property provides the state of the PollThread.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.PollRateInMilliseconds">
            <summary>
            The property is used to get or change the PollRate used by the poll thread.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.ServerDiscoveryUri">
            <summary>
            The URI that contains the ServerDiscoveryUrl used to get the ServerEntry from the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.ServerEntry">
            <summary>
            This property contains the ServerEntry for the server to which this context is connected.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.StandardMib">
            <summary>
            This property is the standard MIB of the server.  This property is retrieved from the server during establishment of the context.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.ContextId">
            <summary>
            This property is the server-unique identifier of the context. It is returned by the server 
            when the client application creates the context.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.LocaleId">
            <summary>
            The Windows LocaleId (language/culture id) for the context.  Its default value 
            is automatically set to the LocaleId of the calling client application.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.Binding">
            <summary>
            The type of the binding used to connect to the server. 
            Obtained using GetType().ToString() on the binding.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.Tag">
            <summary>
            This property allows the client application to associate a client-defined object
            with the context.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.ContextOptions">
            <summary>
            The ContextOptions for this context. See Contracts.Constants.ContextOptions for standard values.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.ApplicationName">
            <summary>
            The name of the client application exe.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.WorkstationName">
            <summary>
            The name of the client workstation.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.IResourceManagement">
            <summary>
            This property is the Resource Management Interface used to access IResourceManagement methods on the server
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.ResourceManagementServiceEndpoint">
            <summary>
            The publically visible Resource Management ServiceEndpoint connected to the server
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.UserInfo">
            <summary>
            The encrypted user credentials supplied to the server for this context.
            The UserInfo are used in the ClientCredentials by WCF when connecting 
            to the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.UserData">
            <summary>
            The RSA parameters used to encode UserInfo. each Xi Context has its own RSA 
            Parameters.  These parameters are not persisted and not transferred from the 
            client to the server.  As such the RSA Parameters are only valid within the 
            context of the client program.  
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.ReInitiateKey">
            <summary>
            A unique clientListId used to identify a client context when re-initiating a context.
            This clientListId is provided to prevent interlopers from using a ContextId that they 
            obtain by watching watching unencrypted Xi Endpoint traffic.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.ContextTimeout">
            <summary>
            The publically visible context timeout provided to the server (in msecs). If the server fails to 
            receive a call from the client for this period, it will close the context. 
            Within this time period, if there was a communications failure, the client can 
            attempt to ReInitiate the connection with the server for this context.
            </summary>
        </member>
        <member name="E:Xi.Client.Base.XiContext.ContextNotify">
            <summary>
            This event is used to notify the ClientBase user of events that occur within the ClientBase.
            All calls to this event should be made through the ContextNotification method to ensure thread safety.
            Caution: Be sure to disconnect the event handler prior to returning.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.SendTimeout">
            <summary>
            This property is the WCF channel send timeout for all endpoints used by this context.  It defines 
            how long the channel will wait for a response. It should be longer than the context timeout to make 
            the keep-alive mechanism to work properly.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.ReadEndpoint">
            <summary>
            This property is the endpoint used to access IRead methods on the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.WriteEndpoint">
            <summary>
            This property is the endpoint used to access IWrite methods on the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.PollEndpoint">
            <summary>
            This property is the endpoint used to access IPoll methods on the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.CallbackEndpoint">
            <summary>
            This property is the endpoint used to access IRegisterForCallback methods on the server 
            and receive ICallback methods from the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.SubscribeEndpointClass">
            <summary>
            This property indicates the type of endpoint (either poll or callback) 
            that has been opened for subscriptions.  Null if neither has been opened.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiContext.XiContextListBaseInterfaceEnumerator">
            <summary>
            The class that implements the enumerator for the Lists of the context.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.XiContextListBaseInterfaceEnumerator.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.XiContextListBaseInterfaceEnumerator.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiContext.XiContextListBaseInterfaceEnumerator._iEnumerator">
            <summary>
            The typed enumerator for the class
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiContext.XiContextListBaseInterfaceEnumerator.MoveNext">
            <summary>
            This method advances the enumerator to the next element of the list.
            </summary>
            <returns>Returns true if the enumerator successfully advanced to the next element 
            in the list; FALSE if the enumerator passed the end of the list.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiContext.XiContextListBaseInterfaceEnumerator.Reset">
            <summary>
            This method sets the enumerator to its initial position, which is the before the first 
            element of the list.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.XiContextListBaseInterfaceEnumerator.Current">
            <summary>
            This property gets the element at the current position of the enumerator 
            and returns it as an object.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiContext.XiContextListBaseInterfaceEnumerator.System#Collections#Generic#IEnumerator{Xi#Client#Base#API#IXiListBase}#Current">
            <summary>
            This property gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiHistoricalDataObject">
            <summary>
            This class defines a historical data object.  Each historical data 
            object contains a list of historical values and a list of 
            historical data properties.  IEnumerable interfaces are provided to 
            allow easy iteration of the historical values.  
            Each historical data object may have multiple lists of values obtained 
            via different calculations. 
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiDataObjectBase">
            <summary>
            This is the base class for elements of all XiLists (e.g. DataList, EventList). 
            XiLists maintain their elements in a Keyed Collection.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiListElementBase">
            <summary>
            This is the base class for elements of all XiLists (e.g. DataList, EventList). 
            XiLists maintain their elements in a Keyed Collection.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiListElementBase.#ctor">
            <summary>
            This constructor creates a new XiList element and sets its state to NewValue.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiListElementBase.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiListElementBase.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  If the list element has been added to the Xi Server's list, it 
            should be removed prior to calling this Dispose method.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiListElementBase.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="F:Xi.Client.Base.XiListElementBase._hasBeenDisposed">
            <summary>
            This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiListElementBase.SetStateToDisposable">
            <summary>
            This method sets the state of this list element to disposable.
            </summary>
            <returns>Returns TRUE if the state was successfully set to disposable.</returns>
        </member>
        <member name="F:Xi.Client.Base.XiListElementBase._state">
            <summary>
            This data member is the private representation of 
            the public State property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiListElementBase._updateCount">
            <summary>
            This data member is the private representation of 
            the public UpdateCount property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiListElementBase._tag">
            <summary>
            This data member is the private representation of 
            the public Tag property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiListElementBase._resultCodeTransaction">
            <summary>
            This data member is the private representation of 
            the public ResultCodeTransaction property.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiListElementBase.IncrementUpdateCount">
            <summary>
            This method is used to increment the update count when a new 
            value is present.  This method should only be invoked within 
            the Xi Client Base classes.
            </summary>
            <returns>Returns the newly incremented update count.</returns>
        </member>
        <member name="P:Xi.Client.Base.XiListElementBase.IsDisposable">
            <summary>
            This property indicates when TRUE that this list element 
            is in a state in which it may be disposed.
            </summary>
            <returns>Returns TRUE if this list element may be disposed</returns>
        </member>
        <member name="P:Xi.Client.Base.XiListElementBase.State">
            <summary>
            This property indicates the current state of this list element.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListElementBase.UpdateCount">
            <summary>
            This property provides the number of times this Xi Value 
            has been updated with a new value.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListElementBase.Tag">
            <summary>
            This property is provided for the Xi Client 
            application to associate this list element with an 
            object of its choosing.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListElementBase.ResultCodeTransaction">
            <summary>
            This property is the result code for the last transaction (request/response operation) 
            on this list element.  
            See XiFaultCodes class for standardized result codes.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiDataObjectBase.#ctor(System.UInt32,Xi.Contracts.Data.InstanceId,Xi.Contracts.Constants.ListElementOptions)">
            <summary>
            This constructor creates a new XiList element and sets its state to NewValue.
            </summary>
            <param name="clientAlias">The client alias to be assigned to this list element.</param>
            <param name="instanceId">The InstanceId for this list element.</param>
            <param name="options">This parameter defines additional options for adding the data object to the list.</param>
        </member>
        <member name="M:Xi.Client.Base.XiDataObjectBase.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiDataObjectBase.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="F:Xi.Client.Base.XiDataObjectBase._instanceId">
            <summary>
            This data member is the private representation of 
            the public InstanceId property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiDataObjectBase._clientAlias">
            <summary>
            This data member is the private representation of 
            the public ClientAlias property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiDataObjectBase._serverAlias">
            <summary>
            This data member is the private representation of 
            the public ServerSubscriptionId property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiDataObjectBase._dataTypeId">
            <summary>
            This data member is the private representation of 
            the public DataTypeId property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiDataObjectBase._canonicalDataTypeId">
            <summary>
            This canonical data member is the private representation of 
            the public CanonicalDataTypeId property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiDataObjectBase._isReadable">
            <summary>
            This data member is the private representation of 
            the public IsReadable property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiDataObjectBase._isWritable">
            <summary>
            This data member is the private representation of 
            the public IsWritable property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiDataObjectBase._listElementOptions">
            <summary>
            This data member is the private representation of the Options property.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiDataObjectBase.PrepForRemove">
            <summary>
            This method is used to set the state of the list element to allow it to be 
            removed from the server. If the list element has not yet been added to the 
            server, This method is used to set the state of the list element to disposable.
            </summary>
            <returns>Returns true if the state of list element was successfully set 
            to RemoveableFromServer or Disposable.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataObjectBase.ResultCodeAsHex(System.UInt32)">
            <summary>
            This method converts the ResultCode to a hex string for display purposes.
            </summary>
            <param name="resultCode">
            The result code to be converted to hex.
            </param>
            <returns>The hex code string.</returns>
        </member>
        <member name="P:Xi.Client.Base.XiDataObjectBase.InstanceId">
            <summary>
            This property is the InstanceId of this XiList element if it has one.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataObjectBase.ClientAlias">
            <summary>
            This property contains the ClientBase-assigned identifier for this list element. 
            This identifier is unique within the XiList.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataObjectBase.ServerAlias">
            <summary>
            This property contains the server-assigned identifier for this list element.
            This identifier is unique within the XiList.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataObjectBase.IsUsable">
            <summary>
            This property returns true when the state is either Enabled or Disabled 
            the only states where the client application may actually use this list data value.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataObjectBase.Enabled">
            <summary>
            This property when TRUE indicates that the state of this list element is Enabled. It can 
            be used to change the  state from Enabled to Disabled or from Disabled to Enabled. An
            attempt to change the state to Enabled or Disabled from any other state leaves the 
            state unchanged.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataObjectBase.DataTypeId">
            <summary>
            This property provides the Xi TypeId for the value contained 
            in this list element. This is the data type requested when the 
            data object was added to the list, and is the data type of the 
            value returned by the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataObjectBase.CanonicalDataTypeId">
            <summary>
            This property provides the canonical Xi TypeId for the value contained 
            in this list element.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataObjectBase.IsReadable">
            <summary>
            This property indicates whether the value associated with the list element is readable.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataObjectBase.IsWritable">
            <summary>
            This property indicates whether the value associated with the list element is writable.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataObjectBase.ListElementOptions">
            <summary>
            This property contains additional instructions on how to treat the data object. 
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObject.#ctor(System.UInt32,Xi.Contracts.Data.InstanceId)">
            <summary>
            This constructor is used to create an instance of a historical data object 
            of a Xi Data Journal List.
            </summary>
            <param name="clientAlias">The client alias assigned to this historical data object.</param>
            <param name="instanceId">The InstanceId that identifies this historical data object.</param>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObject.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.  It disposes of this object and also disposes 
            of its historical values.  The list of historical properties is cleared and nulled to 
            allow garbage collection on that list.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for historical data objects.
            </summary>
            <returns>Returns the enumerator for the list of objects in the historical data object. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObject.System#Collections#Generic#IEnumerable{Xi#Client#Base#API#IXiHistoricalDataObjectValueSet}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for the list of value sets in the historical data object. 
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>Returns the enumerator for list of value sets in the historical data object. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObject.NewListOfHistoricalDataItemValues(Xi.Contracts.Data.TypeId)">
            <summary>
            This method is used to create a new list of historical values for this historical
            data object.  The values for this list are populated using historical read 
            methods defined by the IXIDataJournalList interface. 
            </summary>
            <param name="calculationTypeId">The type of calculation to be used to create the 
            list of HistoricalValues for this data object, as defined by the 
            StandardMib.DataJournalOptions.MathLibrary of the server. This data object may 
            not have two value sets with the same CalculationTypeId.</param>
            <returns>Returns the newly created list of historical values.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObject.TryGetValue(System.UInt32,Xi.Client.Base.API.IXiHistoricalDataObjectValueSet@)">
            <summary>
            This method attempts to retrieve a set of historical values of a given 
            value list type for the historical data object.
            </summary>
            <param name="CalculationTypeLocalId">The type of calculation to be used to create the 
            list of HistoricalValues for this data object, as defined by the 
            StandardMib.DataJournalOptions.MathLibrary of the server. This data object may 
            not have two value sets with the same CalculationTypeId.</param>
            <param name="valueSet">The retrieved set of historical values.</param>
            <returns>Returns TRUE if the attempt succeeded, otherwise FALSE.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObject.ContainsKey(System.UInt32)">
            <summary>
            This method determines if this historical data object contains the specified list 
            of historical values.  Historical value lists are created using the 
            NewListOfHistoricalDataItemValues() method.
            </summary>
            <param name="CalculationTypeLocalId"></param>
            <returns>Returns TRUE if this data object contains the specified list of historical 
            values, otherwise FALSE. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObject.TryGetValue(System.UInt32,Xi.Client.Base.XiHistoricalDataObjectValueSet@)">
            <summary>
            This method attempts to retrieve a set of historical values of a given 
            value list type for the historical data object.
            </summary>
            <param name="calculationTypeLocalId">The type of calculation to be used to create the 
            list of HistoricalValues for this data object, as defined by the 
            StandardMib.DataJournalOptions.MathLibrary of the server. This data object may 
            not have two value sets with the same CalculationTypeId.</param>
            <param name="valueSet">The retrieved set of historical values.</param>
            <returns>Returns TRUE if the attempt succeeded, otherwise FALSE.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObject.Add(Xi.Client.Base.XiHistoricalDataObjectValueSet)">
            <summary>
            This method adds a value set to the historical data object
            </summary>
            <param name="valueSet">The value set to add</param>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObject.Remove(Xi.Client.Base.XiHistoricalDataObjectValueSet)">
            <summary>
            This method removes a value set from the historical data object
            </summary>
            <param name="valueSet">The value set to remove</param>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObject.SetPropertyValues(Xi.Contracts.Data.JournalDataPropertyValue[])">
            <summary>
            This method sets the value of the PropertyValues property.
            </summary>
            <param name="propertyValues">The new property values to set.</param>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObject.Update(Xi.Contracts.Data.JournalDataValues)">
            <summary>
            This method is used to update the historical values for this data object
            </summary>
            <param name="journalDataValues">The new list of historical values.</param>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObject.SetDataChanges(Xi.Contracts.Data.JournalDataChangedValues)">
            <summary>
            This method sets the value of the _dataChanges private data member.
            </summary>
            <param name="dataChanges">The new changed data values to set.</param>
        </member>
        <member name="F:Xi.Client.Base.XiHistoricalDataObject._propertyValues">
            <summary>
            This data member is the private representation of the PropertyValues interface property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiHistoricalDataObject._dataChanges">
            <summary>
            This data member is the private representation of the DataChanges public property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiHistoricalDataObject._valueSets">
            <summary>
            This data member contains the historical value sets for this historical data object.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiHistoricalDataObject.PropertyValues">
            <summary>
            This property contains the set of historical property values for the historical data object.
            Property values are obtained using the ReadJournalDataProperties() method defined by the 
            IXIDataJournalList interface.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiHistoricalDataObject.Count">
            <summary>
            This property indicates the number of historical value sets for the historical data object.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiHistoricalDataObject.DataChanges">
            <summary>
            This property contains the changed historical values of the historical data object.
            It is populated by the ReadJournalDataChanges() method.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiHistoricalDataObjectValueSet">
            <summary>
            This class is used to represent a sample set from a historical read.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObjectValueSet.#ctor(Xi.Client.Base.XiHistoricalDataObject,Xi.Contracts.Data.TypeId)">
            <summary>
            Constructor for a Data Journal List Value List that will 
            be associated with a Data Journal List Value.
            </summary>
            <param name="owner">Identifies the historical data object to 
            which this historical value set belongs.  </param>
            <param name="calculationTypeId">The CalculationTypeId associated with the value set.</param>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObjectValueSet.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObjectValueSet.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObjectValueSet.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObjectValueSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for values in the historical data object value set.
            </summary>
            <returns>Returns the enumerator for the list of objects in the historical data object value set. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObjectValueSet.System#Collections#Generic#IEnumerable{Xi#Client#Base#API#XiDataValue}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for the list of values in the historical data object value set. 
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>Returns the enumerator for list of values in the historical data object value set. </returns>
        </member>
        <member name="F:Xi.Client.Base.XiHistoricalDataObjectValueSet._historicalValues">
            <summary>
            The private representation of the HistoricalValues interface property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiHistoricalDataObjectValueSet._owner">
            <summary>
            The private representation of the OwningHistoricalDataObject interface property and the 
            Owner public property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiHistoricalDataObjectValueSet._calculationLocalId">
            <summary>
            The private representation of the CalculationTypeId and CalculationTypeLocalId interface properties.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiHistoricalDataObjectValueSet._hasBeenDisposed">
            <summary>
            This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiHistoricalDataObjectValueSet._clientTag">
            <summary>
            This is the private representation of the Client Tag interface property.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObjectValueSet.Reset">
            <summary>
            This method clears the value set
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiHistoricalDataObjectValueSet.UpdateValueSet(Xi.Contracts.Data.JournalDataValues)">
            <summary>
            This method updates the values of the value set.
            </summary>
            <param name="newHistoricalValues">The new values used to update the value set.</param>
        </member>
        <member name="P:Xi.Client.Base.XiHistoricalDataObjectValueSet.OwningHistoricalDataObject">
            <summary>
            This property contains the interface for the historical data object to 
            which this historical value set belongs.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiHistoricalDataObjectValueSet.HistoricalValues">
            <summary>
            This property contains the list of historical values.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiHistoricalDataObjectValueSet.CalculationTypeId">
            <summary>
            The type of calculation used to create the value set as defined by the 
            StandardMib.DataJournalOptions.MathLibrary of the server and by 
            Xi.Contracts.Constants.JournalDataSampleTypes. The historical data object 
            for which this value set is defined may not have two value sets with the 
            same CalculationTypeId.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiHistoricalDataObjectValueSet.CalculationTypeLocalId">
            <summary>
            The LocalId portion of the CalculationTypeId. Set to 0 if the LocalId is not a uint.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiHistoricalDataObjectValueSet.ResultCode">
            <summary>
            This property contains the Result Code associated with reading this value 
            set from the server. See XiFaultCodes class for standardized result codes.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiHistoricalDataObjectValueSet.StartTime">
            <summary>
            This property defines the starting time for this list historical values.
            Values in the value set will be between the StartTime and EndTime. The
            read method used to access the values specifies whether or not values 
            with the starting or ending times are to be included in this value set.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiHistoricalDataObjectValueSet.EndTime">
            <summary>
            This property defines the ending time for this list historical values.
            Values in the value set will be between the StartTime and EndTime. The
            read method used to access the values specifies whether or not values 
            with the starting or ending times are to be included in this value set.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiHistoricalDataObjectValueSet.Count">
            <summary>
            This property contains the number of values in this value set.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiHistoricalDataObjectValueSet.Tag">
            <summary>
            The property defines an object that the client application can use to 
            associate this value set with an object of its choice.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiHistoricalDataObjectValueSet.Owner">
            <summary>
            This property contains identifies the historical data object to 
            which this historical value set belongs.  In contrast to the OwningHistoricalDataObject 
            property, this property is an instance of XiHistoricalDataObject, while 
            OwningHistoricalDataObject is an instance of the associated interface.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiEventList">
            <summary>
            This class implements the IXiEventList interface.  
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiListBase">
            <summary>
            This abstract class definition allows for the implantation of methods that are
            common to two or more Xi List types.  The Xi Values maintained by this class
            must be a subclass of Xi Value Base.  In general the only time a declaration
            of this type would be used is when the data type can also be processed
            as being of type Xi Value Base.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiListBase.#ctor(Xi.Client.Base.XiContext)">
            <summary>
            Xi List Base is the common base class for all Xi Lists defined within 
            the Client Base Assembly.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Xi.Client.Base.XiListBase.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiListBase.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            This method removes all elements from the list and the list from the Xi Server.  
            Failure to invoke this Dispose will result in the Xi List being kept by the Xi 
            Server until the client context is concluded.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiListBase.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.  It is used to remove an Xi List from the context.  
            Failure to issue the dispose will result in the list staying around even though the 
            client application no longer has a reference because the Xi Context will maintain 
            a reference in its collection of Xi Lists.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiListBase.AddListToEndpoint(Xi.Client.Base.API.IXiEndpointBase)">
            <summary>
            This method is used to add an XiList to an Xi Endpoint.
            </summary>
            <param name="iXiEndpointBase">The endpoint to which the list is to be added.</param>
            <returns>
            The result code for the operation.  See XiFaultCodes class for 
            standardized result codes. 
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiListBase.RemoveListFromEndpoint(Xi.Client.Base.API.IXiEndpointBase)">
            <summary>
            This method removes this list from the specified Xi Endpoint.
            </summary>
            <param name="iXiEndpointBase">The endpoint from which this list is to be removed.</param>
            <returns>The result code.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiListBase.EnableListUpdating(System.Boolean)">
            <summary>
            <para>This method is used to enable or disable updating of an entire 
            list. When this method is called, the enabled state of the list is changed, 
            but the enabled state of the individual elements of the list is unchanged. </para>
            <para>When a list is disabled, the server excludes it from participating in 
            callbacks and polls. However, at the option of the server, the server may continue 
            updating its cache for the elements of the list.</para>
            <para>Calling this method also causes the local copy of the list attributes to be 
            updated.</para>
            </summary>
            <param name="enableUpdating">
            Indicates, when TRUE, that updating of the list is to be enabled,
            and when FALSE, that updating of the list is to be disabled.</param>
            <returns>Returns TRUE if the list was successfully enabled or disabled.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiListBase.ModifyListAttributes(System.Nullable{System.UInt32},System.Nullable{System.UInt32},Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is used to change the update rate, buffering rate, and/or 
            filter set of a list.  The new value replace the old values if they exist.
            </summary>
            <param name="updateRate">
            The new update rate of the list.  The server will negotiate this 
            rate to one that it can support.  GetListAttributes can be used to obtain the current 
            value of this parameter.  Null if the update rate is not to be updated.  
            </param>
            <param name="bufferingRate">
            The new buffering rate of the list.  The server will negotiate this rate to one 
            that it can support.  GetListAttributes can be used to obtain the current 
            value of this parameter.  Null if the buffering rate is not to be updated.
            </param>
            <param name="filterSet">
            The new set of filters.  The server will negotiate these filters to those 
            that it can support.  GetListAttributes can be used to obtain the current 
            value of this parameter.  Null if the filters are not to be updated.
            </param>
            <returns>
            The revised update rate, buffering rate, and filter set.  Attributes 
            that were not updated are set to null in this response.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiListBase.GetListAttributes">
            <summary>
            This method is used to retrieve the attributes of this list from the server.
            </summary>
            <returns>The attributes of this list.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiListBase.TouchList">
            <summary>
            <para>This method is used to cause a list to be "touched".</para> 
            <para>For lists that contain data objects, this method causes 
            the server to update all data objects in the list that are currently 
            enabled (see the IXiDataList EnableListElementUpdating() method), mark them 
            as changed (even if their values did not change), and then return 
            them all to the client in the next callback or poll. </para>  
            <para>For lists that contain events, this method causes 
            the server to mark all alarms/event in the list as changed, 
            and then return them all to the client in the next callback.</para>
            </summary>
            <returns>
            The result code for the operation.  See XiFaultCodes class for 
            standardized result codes. 
            </returns>
        </member>
        <member name="F:Xi.Client.Base.XiListBase.ListLock">
            <summary>
            This data member is used to lock the list.
            It is initialized to a value to provide a unique object that can be locked.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiListBase.ReplaceEndpointInList(Xi.Client.Base.API.IXiEndpointBase,Xi.Client.Base.API.IXiEndpointBase)">
            <summary>
            Use this method to update this Xi List with a replacement Xi Endpoint.
            The method is used when an endpoint loses communication and is replaced 
            by a new endpoint
            </summary>
            <param name="failedEndpoint">The failed endpoint</param>
            <param name="replacementEndpoint">The endpoint that replaces the failed endpoint</param>
        </member>
        <member name="F:Xi.Client.Base.XiListBase._context">
            <summary>
            This data member is the private representation of 
            the public Context property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiListBase._EndPoints">
            <summary>
            List of Xi Endpoints to which this Xi List has been added.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiListBase._StandardListType">
            <summary>
            This data member is the protected representation of 
            the public StandardListType property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiListBase._listAttributes">
            <summary>
            This data member is the protected representation of 
            the public ListAttributes property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiListBase._clientTag">
            <summary>
            This data member is the protected representation of 
            the public ClientTag property.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListBase.Context">
            <summary>
            This property provides the Xi Context to which this list belongs.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListBase.ListType">
            <summary>
            This property identifies the Standard Xi List Type of this list.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListBase.ListTypeAsString">
            <summary>
            Use this property to obtain the List Type as a string value.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListBase.ListAttributes">
            <summary>
            This property returns a copy of the Xi List Attributes from the server.
            The ModifyListAttributes method is used to change the List Attribute.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListBase.DataList">
            <summary>
            This property is the list of elements for Data Lists. 
            It is null if this is not a Data List as indicated by the ListType property.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListBase.DataJournalList">
            <summary>
            This property is the list of elements for Data Journal Lists (historical data lists). 
            It is null if this is not a Data Journal List as indicated by the ListType property.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListBase.EventList">
            <summary>
            This property is the list of elements for Event Lists. 
            It is null if this is not an Event List as indicated by the ListType property.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListBase.EventJournalList">
            <summary>
            This property is the list of elements for Event Journal Lists (historical data lists). 
            It is null if this is not a Event Journal List as indicated by the ListType property.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListBase.Count">
            <summary>
            The Client LocalId provides a handle by which this Xi List is known within 
            the client code.  This value is established by the client code.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListBase.ClientListId">
            <summary>
            The Client LocalId provides a handle by which this Xi List is known within 
            the client code.  This value is established by the client code.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListBase.ServerListId">
            <summary>
            The Server LocalId provides a handle by which this Xi List is known within 
            the server code.  This value is established by the server code.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListBase.Tag">
            <summary>
            This property is provided for the Xi Client application to associate this list 
            with an object of its choosing.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiListBase.XiContext">
            <summary>
            This data member is the XiContext representation of the public Context 
            property that is publically available within this assembly.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.#ctor(Xi.Client.Base.XiContext,System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This constructor creates a new event list for the specified context.
            </summary>
            <param name="context">The context that owns the event list.</param>
            <param name="updateRate">The update rate for the event list.</param>
            <param name="bufferingRate">The BufferingRate for this event list. Set to 0 if not used.</param>
            <param name="filterSet">The FilterSet for this event list. Set to null if not used.</param>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  The Dispose of an Xi Event List does not 
            require the disposal of underlying event list elements from the server since they 
            are not explicitly added by the client application.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for list elements in the event list.
            </summary>
            <returns>Returns the enumerator for the list of objects in the event list. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.System#Collections#Generic#IEnumerable{Xi#Client#Base#API#IXiEventListElement}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for the list elements in the event list. 
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>Returns the enumerator for the event list elements in the event list. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.Find(System.Predicate{Xi.Client.Base.API.IXiEventListElement})">
            <summary>
            This method returns event list elements selected by the match predicate.
            </summary>
            <param name="match">The predicate that searches the list for matches against IXiEventListElement properties.</param>
            <returns>Returns event list elements selected by the match predicate.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.SetListLimits(System.TimeSpan,System.TimeSpan,System.UInt32)">
            <summary>
            This method is used to set the size and time limits for the event list.  
            </summary>
            <param name="keepAllEventsAge">
            This parameter establishes the time the general event notifications 
            will be maintained in the event list.  These are generally event 
            messages that fall into two general categories.  First, are events 
            that do not require any action and are primarily informational in 
            nature.  Second, are events that do require some form of action.  
            These actions may be performed by an operator or automatically.  
            However, in general these events are of low interest.  All event 
            occupancies may be kept by an event historian, this is not the 
            purpose of this real time event list.
            </param>
            <param name="maxAnyEventAge">
            No events are kept in the list that exceed this age limit.
            </param>
            <param name="maxEventListElements">
            This is the maximum number of events that may be kept in this list.
            </param>
            <returns></returns>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.AddEventMessageFields(System.UInt32,System.Collections.Generic.IEnumerable{Xi.Contracts.Data.TypeId})">
            <summary>
            This method is used to request that category-specific fields be 
            included in event messages generated for alarms and events of 
            the category for this event list.
            </summary>
            <param name="categoryId">
            The category for which event message fields are being added.
            </param>
            <param name="fieldObjectTypeIds"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.PollEventChanges(Xi.Contracts.Data.FilterSet)">
            <summary>
            This method is used to poll the endpoint for changes to a specific event list.  
            Event messages are sent by the server when there has been a change to the specified 
            event list. A new alarm or event that has been added to the list, a change to an 
            alarm already in the list, or the deletion of an alarm from the list constitutes a 
            change to the list.
            <para>Once the poll completes, this method calls the EventNotification() method 
            to add the received events to the event list.</para>
            </summary>
            <param name="filterSet">The filter set used to filter event messages. This filter is 
            sent to the server where it is used to select event messages to return.</param>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.EventNotification(Xi.Contracts.Data.EventMessage[])">
            <summary>
            <para>This callback method receives event messages sent by the server that 
            contain both events and alarms. Servers send event messages when there has 
            been a change to its Event List. A new alarm or event that has been added to the 
            Event List, a change to an alarm already in the list, or the deletion of an 
            alarm from the list constitutes a change to the list. Client applications 
            may read this list using the enumerator defined for this class.</para>
            <para>Upon receipt of an event notification, this method adds the messages 
            representing events to the end of the Event List. It inserts alarm messages into the 
            list using a combination of their state and priority. New active, unacknowledged 
            alarms are added first, followed by inactive, unacknowledged alarms. Inactive, 
            acknowledged are added next, followed by alerts, and finally event messages. 
            Each of these sets is sorted in descending priority order.  If an alarm is already 
            in the list, it is removed from the list and its new alarm message is inserted in 
            its appropriate location.</para>
            <para>Once the list has been updated, the client application is notified with the 
            received event messages.  </para>
            <para>Periodically, this method performs routine maintenance on the Event List.  
            Event messages are automatically deleted from the list after a period 
            of time.  Alarms, are also automatically deleted from the list after a period 
            of time if they have transitioned to inactive and acknowledged.  </para>
            <para>Additionally, any message that been in the list a maximum amount time are 
            automatically deleted, and if the maximum size of the Event List has been reached, 
            the oldest messages are deleted from the list.</para>
            </summary>
            <param name="eventsArray"></param>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._hasBeenDisposed">
            <summary>
            This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._ListElements">
            <summary>
            This KeyedCollection holds the collection of XiEventListElements, each keyed by the 
            MessageKey.  This allows the list to be indexed by the MessageKey. 
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._CategorySpecificFieldDict">
            <summary>
            This data member is the private representation of CategorySpecificFieldCollection and CategorySpecificFieldDictionary
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._numUnackedActiveInList">
            <summary>
            The number of active unacked alarms in _ListElements.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._numUnackedInactiveInList">
            <summary>
            The number of inactive unacked alarms in _ListElements.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._numAckedActiveInList">
            <summary>
            The number of acked alarms in _ListElements.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._numAckedInactiveInList">
            <summary>
            The number of inactive acked alarms in _ListElements.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._numAlertInList">
            <summary>
            The number of alerts in _ListElements.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._numEventInList">
            <summary>
            The number of events in _ListElements.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._lastListMaintenanceTickCount">
            <summary>
            The last tick count the Event List was reviewed to remove timed-out elements.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._listMaintenanceInterval">
            <summary>
            The inteval of time between Event List maintenance checks performed by the 
            EvemtNotification method.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._activeUnacked">
            <summary>
             Active, unacked integer value
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._inactiveUnacked">
            <summary>
             Inactive, unacked integer value
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._activeAcked">
            <summary>
             Active, Acked integer value
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._inactiveAcked">
            <summary>
             Inactive, Acked integer value
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._maxKeepAllEventsAge">
            <summary>
            This data member is the private representation of MaxKeepAllEventsAge
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._maxAnyEventAge">
            <summary>
            This data member is the private representation of MaxAnyEventAge
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._maxEventListElements">
            <summary>
            This data member is the private representation of MaxEventListElements
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._eventNotificationCount">
            <summary>
            This data member is the private representation of EventNotificationCount
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList._totalDeliveredEventMessages">
            <summary>
            This data member is the private representation of TotalDeliveredEventMessages
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.DoListMaintenance">
            <summary>
            This method is called to remove elements from the list that have expired or that whose age is 
            greater than the maximum allowed.  Events expire after they have been delivered to the client 
            application and alarms in the Acked/Inactive state expire after they have been delivered. 
            Alarms in any other state do not expire.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.RemoveElementFromList(Xi.Client.Base.API.IXiEventListElement)">
            <summary>
            This method removes the specified list element from the list, if present, and updates 
            the associated list counter
            </summary>
            <param name="eventListElement">The element to remove</param>
            <returns>Returns TRUE if the element was removed from _ListElements</returns>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.SortEventMessages(Xi.Contracts.Data.EventMessage[],System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            The method sorts an array of event messages using a combination of their state 
            and priority. New active, unacknowledged alarms are added first, followed by inactive, 
            unacknowledged alarms. Inactive, acknowledged are added next, followed by alerts, and 
            finally event messages. Each of these sets is sorted in descending priority order.
            </summary>
            <param name="eventsArray">The event messages to be sorted</param>
            <param name="numActiveUnacked">number of activeUnacked messages in the sorted list</param>
            <param name="numInactiveUnacked">number of inactiveUnacked messages in the sorted list</param>
            <param name="numActiveAcked">number of activeAacked messages in the sorted list</param>
            <param name="numInactiveAcked">number of inactiveUnacked messages in the sorted list</param>
            <param name="numAlert">number of alert messages in the sorted list</param>
            <param name="numEvent">number of event messages in the sorted list</param>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.InsertAlarmsByState(System.Int32,System.Collections.Generic.List{Xi.Contracts.Data.EventMessage},System.Collections.Generic.List{Xi.Client.Base.API.IXiEventListElement})">
            <summary>
            The method inserts the specified alarms into the sorted event list and returns the 
            nunmber of alarms inserted.  
            </summary>
            <param name="alarmState">The alarm state of the alarms to be inserted. Event messages 
            in the input list that are not alarms of this state are not inserted into output list.</param>
            <param name="eventList">The list of event messages that contains the alarms to be inserted</param>
            <param name="sortedEventListElements">The XiEventListElements list into which the alarms are to be inserted</param>
            <returns>Returns the number of inserted alarms.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.MergeNewElementsIntoList(System.Collections.Generic.List{Xi.Client.Base.API.IXiEventListElement},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This method takes a sorted list of event messages and merges them into _ListElements
            </summary>
            <param name="newEventListElements">The sorted list to merge into _ListElements</param>
            <param name="newNumUnackedActive">The number of UnackedActive messages in the sorted list</param>
            <param name="newNumUnackedInactive">The number of UnackedInactive messages in the sorted list</param>
            <param name="newNumAckedActive">The number of AckedActive messages in the sorted list</param>
            <param name="newNumAckedInactive">The number of AckedInactive messages in the sorted list</param>
            <param name="newNumAlert">The number of Alerts messages in the sorted list</param>
            <param name="newNumEvent">The number of Events messages in the sorted list</param>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.MergeBlockOfElementsIntoList(System.Int32,System.Int32@,System.Collections.Generic.List{Xi.Client.Base.API.IXiEventListElement},System.Int32,System.Int32)">
            <summary>
            This method merges event messages into the event list (_ListElements).  The event messages 
            to merge are contained as a contiguous subset of the event messages in the elementsToMerge 
            list.  The elementStartIndex specifies the first event message in the list to merge and the 
            numElementsInBlock specifies the number of event messages to merge.
            </summary>
            <param name="blockStartIdx">The start of the block in _ListElements at which 
            the merge will begin.</param>
            <param name="numInBlock">The number of event messages in the block. This value 
            is incremented for each event message merged into the block.</param>
            <param name="elementsToMerge">The list containing the event messages to be merged into the 
            block.</param>
            <param name="elementStartIndex">The index of the first event message in the list 
            of event messages to merge.</param>
            <param name="numElementsInBlock">The mumber of event messages in elementsToMerge to be 
            merged into the block.</param>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.GetEventMessages">
            <summary>
            This method returns a list of event messages that can be submitted to EventNotification() for testing
            The event messages created can be reorganized to allow for different ordering that have to be sorted
            </summary>
            <returns>A list of event messages</returns>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.GetEventMessages2">
            <summary>
            This method returns a list of event messages that can be submitted to EventNotification() for testing
            The event messages created can be reorganized to allow for different ordering that have to be sorted
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xi.Client.Base.XiEventList.Item(System.String)">
            <summary>
            This property is the indexer into ListElements. 
            </summary>
            <param name="msgKey">The MessageKey that indexes into ListElements</param>
            <returns>The indexed IXiEventListElement. Null if not found.</returns>
        </member>
        <member name="P:Xi.Client.Base.XiEventList.ListElements">
            <summary>
            This KeyedCollection holds the collection of XiEventListElements, each keyed by the 
            MessageKey.  This allows the list to be indexed by the MessageKey. 
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventList.Count">
            <summary>
            This property indicates the number of events in the list.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventList.MaxKeepAllEventsAge">
            <summary>
            All events should be kept for at least this time span.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventList.MaxAnyEventAge">
            <summary>
            No events are allowed to exceed this time span.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventList.MaxEventListElements">
            <summary>
            This list is not allowed to exceed this number of events.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventList.EventNotificationCount">
            <summary>
            This property provides a count of the number of notification events (callbacks)
            that have been issued to the client application for this list.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventList.TotalDeliveredEventMessages">
            <summary>
            This property provides a count of the total number of event 
            messages notifications that have been received by this list 
            and delivered to the client application.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventList.CategorySpecificFieldCollection">
            <summary>
            This property is the publically visible ReadOnlyCollection of Category Specific Event Message Fields
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventList.CategorySpecificFieldDictionary">
            <summary>
            This property is the internally visible Dictionary of Category Specific Event Message Fields
            </summary>
        </member>
        <member name="E:Xi.Client.Base.XiEventList.EventsUpdateEvent">
            <summary>
            This event is used to notify the client application when new events are received.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiEventList.XiEventListElementEnumerator">
            <summary>
            This enumerator class defines the enumerator for enumerating for enumerating the elements of an event list.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.XiEventListElementEnumerator.#ctor(Xi.Client.Base.XiEventListElementCollection{Xi.Client.Base.API.IXiEventListElement})">
            <summary>
            This constructor creates a new enumerator for enumerating for enumerating the elements of an event list.
            </summary>
            <param name="listElements">The event list for which the enumerator is to be created.</param>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.XiEventListElementEnumerator.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.XiEventListElementEnumerator.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventList.XiEventListElementEnumerator._iEnumerator">
            <summary>
            The typed enumerator for the class
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.XiEventListElementEnumerator.MoveNext">
            <summary>
            This method advances the enumerator to the next element of the list.
            </summary>
            <returns>Returns true if the enumerator successfully advanced to the next element 
            in the list; FALSE if the enumerator passed the end of the list.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiEventList.XiEventListElementEnumerator.Reset">
            <summary>
            This method sets the enumerator to its initial position, which is the before the first 
            element of the list.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventList.XiEventListElementEnumerator.Current">
            <summary>
            This property gets the element at the current position of the enumerator 
            and returns it as an object.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventList.XiEventListElementEnumerator.System#Collections#Generic#IEnumerator{Xi#Client#Base#API#IXiEventListElement}#Current">
            <summary>
            This property gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiEventListElementCollection`1">
            <summary>
            Defines a class that provides a Keyed Collection of Xi Values.  
            The Xi Lists provided by the Xi Client Base assembly keep the 
            contained Xi Values as an instance of this class.
            </summary>
            <typeparam name="TValue">
            Is a subclass of Xi Value Base.  This then becomes a collection 
            of the Xi Value types needed by the Xi List.
            </typeparam>
        </member>
        <member name="M:Xi.Client.Base.XiEventListElementCollection`1.GetKeyForItem(`0)">
            <summary>
            This method gets the key into the Dictionary keyed collection for the specified XiListElement.
            </summary>
            <param name="xiListElement">The XiListElement for which the key is to be returned. </param>
            <returns>Returnes the key for the specified XiListElement. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiEventListElementCollection`1.MemberwiseClone">
            <summary>
            By obtaining a shallow copy the collection may be enumerated while updates may take 
            place asynchronously.  Note that this cloned collection will hold references to the 
            same underlying instance and thus these objects should not have a Dispose method.  
            The .NET garbage collector will need to take care of any cleanup required.
            </summary>
            <returns>Shallow copy of this collection</returns>
        </member>
        <member name="P:Xi.Client.Base.XiEventListElementCollection`1.Dictionary">
            <summary>
            This property provides access to the dictionary element of the Keyed Collection.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiEventListElement">
            <summary>
            This class defines an element of an Xi Event List. It contains the Event Message sent by the server.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEventListElement.#ctor(System.String,Xi.Contracts.Data.EventMessage)">
            <summary>
            The constructor for XiEventListElements
            </summary>
            <param name="msgKey">The message clientListId that uniquely identifies the event. For alarms, this identifies the 
            alarm itself, independent of its state, or the occurrence being reported.</param>
            <param name="eventMessage">The Event Message reported by the server.</param>
        </member>
        <member name="M:Xi.Client.Base.XiEventListElement.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="F:Xi.Client.Base.XiEventListElement._eventMessage">
            <summary>
            The private representation of the EventMessage property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventListElement._messageKey">
            <summary>
            The private representation of the MessageKey property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventListElement._vendorFields">
            <summary>
            The private representation of the VendorFields property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventListElement._random">
            <summary>
            This data member is used by the GetUniqueClientAlias() method to 
            generate the client alias used as the dictionary clientListId for vendor fields 
            in the _vendorFields dictionary.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEventListElement.AddEventMessageField(System.UInt32,Xi.Client.Base.XiEventMessageFieldValue)">
            <summary>
            This method is used to request that category-specific fields be 
            included in event messages generated for alarms and events of 
            the category for the Event List.
            </summary>
            <param name="categoryId">
            The category for which event message fields are being added.
            </param>
            <param name="fieldValue">
            The category-specific field to be included in the event messages generated 
            for alarms and events of the category.  
            </param>
            <returns>
            The Client Alias generated as the _vendorFields dictionary clientListId for the field.  
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiEventListElement.GetUniqueClientAlias">
            <summary>
            This method generates Client Alias used as the dictionary clientListId for vendor fields 
            in the _vendorFields dictionary.
            </summary>
            <returns>The generated Client Alias.</returns>
        </member>
        <member name="P:Xi.Client.Base.XiEventListElement.EventMessage">
            <summary>
            This property contains the Event Message received from the server in an Event Notification.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventListElement.MessageKey">
            <summary>
            The unique message identifier constructed from fields of the Event Message by the ClientBase. The fields 
            used to construct the Message Key are specific to the EventType of the Event Message. For alarms, the message 
            clientListId identifies the alarm itself, independent of its state, or the occurrence being reported.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventListElement.VendorFields">
            <summary>
            This property contains the list of vendor-specific fields selected by the client application 
            for the Event Message.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiEventMessageFieldValue">
            <summary>
            This class is used to represent a vendor-specific field of an event message.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEventMessageFieldValue.#ctor(System.String,Xi.Contracts.Data.TypeId)">
            <summary>
            The constructor for the XiEventMessageFieldValue
            </summary>
            <param name="name">The name of the field.</param>
            <param name="dataTypeId">The data type of the field.</param>
        </member>
        <member name="F:Xi.Client.Base.XiEventMessageFieldValue._name">
            <summary>
            The private representation of the Name property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventMessageFieldValue._dataTypeId">
            <summary>
            The private representation of the DataTypeId property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventMessageFieldValue._selected">
            <summary>
            The private representation of the Selected property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEventMessageFieldValue._value">
            <summary>
            The private representation of the Value property
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventMessageFieldValue.Name">
            <summary>
            This property contains the name of the Event Message field.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventMessageFieldValue.Selected">
            <summary>
            This property indicates, when TRUE, that this field has been selected by the 
            client application to be returned in the Event Message.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventMessageFieldValue.DataTypeId">
            <summary>
            This property defines the data type of the field.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEventMessageFieldValue.Value">
            <summary>
            This property contains the value of the field.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiDiscoveryServer">
            <summary>
            This class defines the client representation of the Xi Discovery Server that is used to locate Xi Data Servers.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiDiscoveryServer.GetServers(System.String)">
            <summary>
            This method is used to obtain a list of Xi Servers from the specified Xi Discovery Server.
            </summary>
            <param name="url">The URL of the Xi Discovery Server</param>
            <returns>Returns the list of ServerEntries for the Xi servers known to the Xi Discovery Server.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDiscoveryServer.GetServerInfo(System.String)">
            <summary>
            This method is used to obtain information regarding an Xi Server.
            </summary>
            <param name="url">The URL of the Xi server</param>
            <returns>Returns the ServerEntry for the specified Xi server.</returns>
        </member>
        <member name="T:Xi.Client.Base.XiEncode">
            <summary>
            This class contains the RSA encryption Encode Key.  
            The decode clientListId is maintained by and only available to the Xi Context.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEncode.Id">
            <summary>
            The identifier for this XiEncode object.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEncode.Encode">
            <summary>
            The RSA parameters used to encrypt data.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiDataList">
            <summary>
            This class implements the IXiDataList interface.  
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiDataListBase`1">
            <summary>
            This abstract class definition allows for the implantation of methods that are
            common to two or more Xi List types.  The Xi Values maintained by this class
            must be a subclass of Xi Value Base.  In general the only time a declaration
            of this type would be used is when the data type can also be processed
            as being of type Xi Value Base.
            </summary>
            <typeparam name="TDataObject">
            The Xi Value type for this Xi List.
            </typeparam>
        </member>
        <member name="M:Xi.Client.Base.XiDataListBase`1.#ctor(Xi.Client.Base.XiContext)">
            <summary>
            Xi List Base is the common base class for all Xi Lists defined within 
            the Client Base Assembly.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Xi.Client.Base.XiDataListBase`1.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.  It is used to remove an Xi List from the context.  
            Failure to issue the dispose will result in the list staying around even though the 
            client application no longer has a reference because the Xi Context will maintain 
            a reference in its collection of Xi Lists.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataListBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for base data objects in the list.
            </summary>
            <returns>Returns the enumerator for the list of objects in the list. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataListBase`1.System#Collections#Generic#IEnumerable{TDataObject}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for the list of base data objects in the list. 
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>Returns the enumerator for list of base data objects in the list. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataListBase`1.CommitAddedElementsToServerList">
            <summary>
            This method requests the server to add elements to the list that have been added to the local ClientBase copy 
            of the list. For example, after using the AddNewDataObjectToList() method add a set of data objects to the local 
            ClientBase copy of the list, this method is called to add them to the server's copy of the list in a single call.
            </summary>
            <returns>The list of elements that were added to the server</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataListBase`1.CommitAddedElementsToServerList(System.Collections.Generic.IEnumerable{Xi.Client.Base.API.IXiDataObjectBase}@)">
            <summary>
            This method requests the server to add elements to the list that have been added to the local ClientBase copy 
            of the list. For example, after using the AddNewDataObjectToList() method add a set of data objects to the local 
            ClientBase copy of the list, this method is called to add them to the server's copy of the list in a single call.
            </summary>
            <param name="addFailures">The list of elements that failed to be added to the server list.  The ResultCode element 
            of each entry in the list indicates the reason for failure.</param>
            <returns>The list of elements successfully added to the server list.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataListBase`1.CommitRemoveableElements">
            <summary>
            <para>This method requests the server to remove elements from the list. The elements to be 
            removed are those that have been tagged for removal by the IXiValue PrepForRemove() method.  
            The PrepForRemove() is called individually on each list element to be removed, and followed 
            by the CommitRemoveableElements(). </para>
            <para>The CommitRemoveableElements() method loops through the list to find the 
            elements that have been prepared for removal and makes a single call to the server to 
            have them removed from the server's list.</para>
            </summary>
            <returns>The list of elements that could not be removed from the server list.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataListBase`1.TouchDataObjects(System.Collections.Generic.List{Xi.Client.Base.API.IXiDataObjectBase})">
            <summary>
            <para>This method is used to cause one or more data objects of 
            a list to be "touched".  Data objects that are in the disabled 
            state (see the EnableListElementUpdating() method) are not 
            affected by this method.  This method cannot be used with 
            event lists.</para>
            <para>Touching an enabled data object causes the server to update 
            the data object, mark it as changed (even if their values did not change), 
            and then return it to the client in the next callback or poll.</para> 
            </summary>
            <param name="dataObjects">The data objects to touch.</param>
            <returns></returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataListBase`1.GetDataObject(System.UInt32)">
            <summary>
            Provides access to an Xi Data Object in the XiDataList using the client alias used as 
            the key in the list, represented as a keyed collectin (_ListElements.Dictionary).
            </summary>
            <param name="clientAlias">The client alias of the data object to be returned.</param>
            <returns>The data object identified by the clientAlias.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataListBase`1.Find(System.Predicate{`0})">
            <summary>
            This method returns data objects selected from the list by the match predicate.
            </summary>
            <param name="match">The predicate that searches the list for matches against XiDataObjectBase properties.</param>
            <returns>Returns data objects selected by the match predicate.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataListBase`1.AddNewElementToList(Xi.Client.Base.XiDataObjectBase,System.Boolean)">
            <summary>
            This method is used to locally add a new element to the list.  Adding elements to 
            an Xi List is a two step process.  First, this method is called to individually 
            add elements to the ClientBase copy of the Xi List. Second, CommitAddedElementsToServerList() 
            is called to add the list of added values to the server in a single call.
            </summary>
            <param name="elementToAdd">The list element to be added to the local Xi List.
            </param>
            <param name="bPrepOnly">
            <para>When a new element is added to the local Xi List, this parameter can be 
            set to FALSE to cause this element and any other locally added elements to be 
            immediately added to the Xi Server. </para>
            <para> Because is far more efficient to add elements to a local Xi List with this 
            parameter set to TRUE, FALSE should be used cautiously. </para>
            <para>TRUE = the new Xi Value is prepared for adding to the server.</para>
            <para>FALSE = the new Xi Value along with any other prepared Xi Values are 
            added to the server in a single call to CommitAddedElementsToServerList().</para>
            </param>
        </member>
        <member name="F:Xi.Client.Base.XiDataListBase`1._hasBeenDisposed">
            <summary>
            This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiDataListBase`1._ListElements">
            <summary>
            This KeyedCollection holds the collection of Xi...ListValue instances, 
            where the type is dependent on the type of list.  The clientListId for this 
            KeyedCollection is the ClientAlias and is a property of XiDataObjectBase.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiDataListBase`1._random">
            <summary>
            This random number is used when generating client aliases for elements of the list.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiDataListBase`1.GetValue(System.UInt32)">
            <summary>
            Provides access to the Xi Value using the clientListId (Client Alias) 
            maintained in the keyed collection.
            </summary>
            <param name="clientAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataListBase`1.TryGetValue(System.UInt32,`0@)">
            <summary>
            This method locks the keyed collection of Xi Values while determining 
            the presence of an Xi Value with the specified clientListId is present 
            in the collection.
            </summary>
            <param name="key">The key for the list. The key is dependent on the type of the list.</param>
            <param name="dataObject">The data object that matches the key.</param>
            <returns></returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataListBase`1.UniqueDataObjectClientAlias">
            <summary>
            Every XiDataObjectBase must have a unique Client Alias (handle).  
            This method is used to obtain that unique value.  The Xi ClientBase 
            assembly implements the Client LocalId (Alias) as a random number, 
            other methods may be used in alternate implementations.  Note that the 
            Client Alias is passed between the client application and 
            the Xi Server generally on a non encrypted channel.
            </summary>
            <returns>The unique value.</returns>
        </member>
        <member name="P:Xi.Client.Base.XiDataListBase`1.Count">
            <summary>
            This property indicates the number of elements in the list.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiDataList.#ctor(Xi.Client.Base.XiContext,System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This constructor creates a new Data List.
            </summary>
            <param name="context">The context to which this data lList belongs.</param>
            <param name="updateRate">The UpdateRate for this data list.</param>
            <param name="bufferingRate">The BufferingRate for this data list. Set to 0 if not used.</param>
            <param name="filterSet">The FilterSet for this data list. Set to null if not used.</param>
        </member>
        <member name="M:Xi.Client.Base.XiDataList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for data objects in the data list.
            </summary>
            <returns>Returns the enumerator for the list of objects in the data list. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataList.System#Collections#Generic#IEnumerable{Xi#Client#Base#API#IXiDataObject}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for the list of data objects in the data list. 
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>Returns the enumerator for list of data objects in the data list. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataList.AddNewDataObjectToList(Xi.Contracts.Data.InstanceId,System.Boolean,Xi.Contracts.Constants.ListElementOptions)">
            <summary>
            This method is used to created and add a new data object to a Data List.  The new data 
            object is created using its InstanceId.
            </summary>
            <param name="instanceId">The InstanceId of the data object to create and add.</param>
            <param name="bPrepOnly">
            <para>When a new element is added to the local Xi List, this parameter can be 
            set to FALSE to cause this element and any other locally added elements to be 
            immediately added to the Xi Server.</para>
            <para> Because is far more efficient to add elements to a local Xi List with this 
            parameter set to TRUE, FALSE should be used cautiously.</para>
            <para>TRUE = the new Xi Value is prepared for adding to the server.</para>
            <para>FALSE = the new Xi Value along with any other prepared Xi Values are 
            added to the server in a single call to CommitAddedElementsToServerList().</para>
            </param>
            <param name="options">This parameter defines additional options for adding the data object to the list.</param>
            <returns>Returns the newly created data object.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataList.EnableListElementUpdating(System.Boolean,System.Collections.Generic.IEnumerable{Xi.Client.Base.API.IXiDataObject})">
            <summary>
            <para>This method is used to enable or disable updating of 
            individual elements of a list.  If the dataObjectsToEnableOrDisable parameter is 
            null, then all elements of the list are enabled/disabled.  This call 
            does not change the enabled state of the list itself.</para>
            <para>When an element of the list is disabled, the server excludes it 
            from participating in callbacks and polls. However, at the option of the 
            server, the server may continue updating its cache for the element.</para>
            </summary>
            <param name="enableUpdating">
            Indicates, when TRUE, that updating of the list is to be enabled,
            and when FALSE, that updating of the list is to be disabled.
            </param>
            <param name="dataObjectsToEnableOrDisable">The list of data objects to be 
            enabled or disabled.</param>
            <returns>The list of dataObjects that failed to be enabled. The ResultCodeTransaction member 
            of each returned data object indicates the reason for failure. Null is returned if there 
            were no failures.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataList.ReadData(System.Collections.Generic.List{Xi.Client.Base.API.IXiDataObject})">
            <summary>
            This method is invoked to issue a Read request to the Xi Server to read 
            the specified data objects.
            </summary>
            <param name="dataObjectsToRead">
            The data objects in this Data List that are to be read. If this parameter is null 
            or empty, all data objects in this list will be read.  This method updates the Xi 
            Data List values using the values returned by the server.
            </param>
            <returns>The list of dataObjects that failed to be enabled. The ResultCodeTransaction member 
            of each returned data object indicates the reason for failure. Null is returned if there 
            were no failures.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataList.CommitDataObjectWrites">
            <summary>
            <para>Writing data object values to the server is a two step process composed of preparing 
            a list of data objects to be written, followed by writing that list to the server. </para>
            <para>This method is used in the first step to individually mark each data object in the Data 
            List as ready for writing.  It examines all data objects in the Data List that are ready for 
            writing and writes them to the server .  </para>
            </summary>
            <returns>The list of data objects whose write failed.  Results are not returned 
            data object whose writes succeeded.  If all writes succeeded, null is returned.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataList.PollDataChanges">
            <summary>
            <para>This method is used to poll the endpoint for changes.</para>
            <para>Changes consists of:</para>
            <para>1) values for data objects that were added to the list,</para> 
            <para>2) values for data objects whose current values 
            have changed since the last time they were reported to the 
            client via this interface.  If a deadband filter has been 
            defined for the list, floating point values are not considered 
            to have changed unless they have changed by the deadband amount.</para>
            <para>3) historical values that meet the list filter criteria, 
            including the deadband.</para> 
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiDataList.DoDataUpdate(Xi.Contracts.Data.DataValueArraysWithAlias,Xi.Client.Base.API.XiDataNotificationData)">
            <summary>
            This method processes the data value arrays received from the server by locating the data objects in the 
            data list for which values have been received and updating their values. If the notificationData parameter 
            is present (not null), then this method adds the received values to this notification data.  
            </summary>
            <param name="readValueArrays">The new values.</param>
            <param name="notificationData">The list of data value notifications to report to the client application.  
            This parameter is optional.  </param>
        </member>
        <member name="M:Xi.Client.Base.XiDataList.InformationReport(Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
            This method is invoked as part of the callback processing.  It then invokes 
            or fires the event to notify the Xi client of data updates.
            </summary>
            <param name="readValueArrays"></param>
        </member>
        <member name="F:Xi.Client.Base.XiDataList._lastInfoReportExceptionMsg">
            <summary>
            This data member holds the last exception message encountered by the 
            InformationReport callback when calling valuesUpdateEvent().
            </summary>
        </member>
        <member name="E:Xi.Client.Base.XiDataList.ValuesUpdateEvent">
            <summary>
            Xi clients subscribe to this event to obtain the data update callbacks.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiDataList.XiDataObjectInterfaceEnumerator">
            <summary>
            This enumerator class defines the enumerator for enumerating for enumerating the data objects in a data list.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiDataList.XiDataObjectInterfaceEnumerator.#ctor(Xi.Client.Base.XiDataList)">
            <summary>
            This constructor creates a new data list enumerator for enumerating the data objects in a data list.
            </summary>
            <param name="xiList">The data list for which the enumerator is to be created.</param>
        </member>
        <member name="M:Xi.Client.Base.XiDataList.XiDataObjectInterfaceEnumerator.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiDataList.XiDataObjectInterfaceEnumerator.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiDataList.XiDataObjectInterfaceEnumerator._iEnumerator">
            <summary>
            The typed enumerator for the class
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiDataList.XiDataObjectInterfaceEnumerator.MoveNext">
            <summary>
            This method advances the enumerator to the next element of the list.
            </summary>
            <returns>Returns true if the enumerator successfully advanced to the next element 
            in the list; FALSE if the enumerator passed the end of the list.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataList.XiDataObjectInterfaceEnumerator.Reset">
            <summary>
            This method sets the enumerator to its initial position, which is the before the first 
            element of the list.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataList.XiDataObjectInterfaceEnumerator.Current">
            <summary>
            This property gets the element at the current position of the enumerator 
            and returns it as an object.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataList.XiDataObjectInterfaceEnumerator.System#Collections#Generic#IEnumerator{Xi#Client#Base#API#IXiDataObject}#Current">
            <summary>
            This property gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiDataJournalList">
            <summary>
            This class implements the IXiDataJournalList interface.  
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiDataJournalList.#ctor(Xi.Client.Base.XiContext,System.UInt32,System.UInt32,Xi.Contracts.Data.FilterSet)">
            <summary>
            This constructor creates a new data journal list for the specified context.
            </summary>
            <param name="context">The context that owns the data journal list.</param>
            <param name="updateRate">The update rate for the data journal list.</param>
            <param name="bufferingRate">The BufferingRate for this data journal list. Set to 0 if not used.</param>
            <param name="filterSet">The FilterSet for this data journal list. Set to null if not used.</param>
        </member>
        <member name="M:Xi.Client.Base.XiDataJournalList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            This method gets the non-typed enumerator for historical data objects in the Data Journal List.
            </summary>
            <returns>Returns the enumerator for the list of objects in the Data Journal List. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataJournalList.System#Collections#Generic#IEnumerable{Xi#Client#Base#API#IXiHistoricalDataObject}#GetEnumerator">
            <summary>
            This method returns the typed enumerator for historical data objects in the Data Journal List.
            This enumerator allows the var type to be used in foreach calls.
            </summary>
            <returns>The enumerator for historical data objects in the Data Journal List. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataJournalList.AddNewDataObjectToDataJournalList(Xi.Contracts.Data.InstanceId,System.Boolean)">
            <summary>
            This method is used to create and add a new data object to a Journal Data List.  The new data 
            object is created using its InstanceId.
            </summary>
            <param name="instanceId">The InstanceId of the data object to create and add.</param>
            <param name="bPrepOnly">
            <para>When a new element is added to the local Xi List, this parameter can be 
            set to FALSE to cause this element and any other locally added elements to be 
            immediately added to the Xi Server. </para>
            <para> Because is far more efficient to add elements to a local Xi List with this 
            parameter set to TRUE, FALSE should be used cautiously.</para>
            <para>TRUE = the new Xi Value is prepared for adding to the server.</para>
            <para>FALSE = the new Xi Value along with any other prepared Xi Values are 
            added to the server in a single call to CommitAddedElementsToServerList().</para>
            </param>
            <returns>Returns the newly created data object.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataJournalList.ReadJournalDataForTimeInterval(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{Xi.Client.Base.API.IXiHistoricalDataObjectValueSet})">
            <summary>
            <para>This method is used to read the historical values that fall between 
            a start and end time for one or more data objects within a specific data 
            journal list.</para>
            </summary>
            <param name="firstTimeStamp">
            The filter that specifies the first or beginning (of returned list) 
            timestamp for values to be returned.  Valid operands include the 
            Timestamp (UTC) and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.  The FilterOperand Operator is used to 
            determine if the returned data should include data values 
            the occur exactly at the first or second time stamp.  If the equals 
            operator is specified then values that occur at the first and second 
            time stamp will be included in the sample set.  Any other operator 
            will not include first or second time stamped values.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the second or ending (of returned list)
            timestamp for values to be returned.  Valid operands include the 
            Timestamp (UTC) and OpcHdaTimestampStr constants defined by the 
            FilterOperand class.  The FilterOperand Operator is not used.
            </param>
            <param name="numValuesPerDataObject">
            The maximum number of values to be returned for each data object.
            </param>
            <param name="dataObjectValueSet">
            The list of data objects whose historical values are to be read.  Each 
            data object is represented by a value set that contains the values 
            selected and returned by the server.
            </param>
        </member>
        <member name="M:Xi.Client.Base.XiDataJournalList.ReadJournalDataAtSpecificTimes(System.Collections.Generic.List{System.DateTime},System.Collections.Generic.List{Xi.Client.Base.API.IXiHistoricalDataObjectValueSet})">
            <summary>
            This method is used to read the historical values at specific times for 
            one or more data objects within a specific data journal list.  If no element exists 
            at the specified time in the data journal for an object, the server creates an 
            interpolated value for that time and includes it in the response as though it 
            actually existed in the journal.
            </summary>
            <param name="timestamps">
            Identifies the timestamps of historical values to be returned for each 
            of the requested data objects. 
            </param>
            <param name="dataObjectValueSet">
            The list of data objects whose historical values are to be read.  Each 
            data object is represented by a value set that contains the values 
            selected and returned by the server.
            </param>
        </member>
        <member name="M:Xi.Client.Base.XiDataJournalList.ReadCalculatedJournalData(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.TimeSpan,System.Collections.Generic.List{Xi.Client.Base.API.IXiHistoricalDataObjectValueSet})">
            <summary>
            This method is used to read calculated historical values (e.g. averages or 
            interpolations) for one or more data objects within a specific data journal list.  
            The time-range used to select the historical values is specified by the client. 
            Additionally, the client specifies a calculation period that divides that time 
            range into periods. The server calculates a return value for each of these periods.
            </summary>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="calculationPeriod">
            The time span used to divide the specified time range into individual periods for 
            which return values are calculated.  The specified calculation is performed on the 
            set of historical values of a data object that fall within each period. 
            </param>
            <param name="dataObjectValueSet">
            The list of data objects whose historical values are to be read.  Each 
            data object is represented by a value set that contains the values 
            calculated and returned by the server.
            </param>
        </member>
        <member name="M:Xi.Client.Base.XiDataJournalList.ReadJournalDataChanges(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,System.UInt32,System.Collections.Generic.List{Xi.Client.Base.API.IXiHistoricalDataObject})">
            <summary>
            This method is used to read changed historical values for one or more 
            data objects within a specific data journal list.  Changed historical 
            values are those that were entered into the journal and then changed 
            (corrected) by an operator or other user.
            </summary>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="numValuesPerDataObject">
            The maximum number of values to be returned per data object.  
            </param>
            <param name="dataObjects">
            The list of data objects whose historical values are to be read.  Each 
            data object may contain zero, one, or more value sets, each of which 
            contains changed values selected and returned by the server. 
            </param>
        </member>
        <member name="M:Xi.Client.Base.XiDataJournalList.ReadJournalDataProperties(Xi.Contracts.Data.FilterCriterion,Xi.Contracts.Data.FilterCriterion,Xi.Client.Base.API.IXiHistoricalDataObject,System.Collections.Generic.List{Xi.Contracts.Data.TypeId})">
            <summary>
            This method reads the properties associated with a historized data object.
            </summary>
            <param name="firstTimeStamp">
            The filter that specifies the inclusive earliest (oldest) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="secondTimeStamp">
            The filter that specifies the inclusive newest (most recent) timestamp 
            for values to be returned.  Valid operands include the Timestamp and 
            OpcHdaTimestampStr constants defined by the FilterOperand class.
            </param>
            <param name="dataObject">
            The data object whose property values are to be read.
            </param>
            <param name="propertiesToRead">
            The TypeIds of the properties to read. Each property is identified by 
            its property type.
            </param>
        </member>
        <member name="T:Xi.Client.Base.XiDataJournalList.XiDataJournalListEnumerator">
            <summary>
            This class defines the enumerator used to support the XiDataJournalList enumerators. It 
            defines the enumerators for the historical data objects of a historical data list
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiDataJournalList.XiDataJournalListEnumerator.#ctor(Xi.Client.Base.XiDataJournalList)">
            <summary>
            This constructor creates a new data journal enumerator for a specified list.
            </summary>
            <param name="xiList">The list for which the enumerator is to be created.</param>
        </member>
        <member name="M:Xi.Client.Base.XiDataJournalList.XiDataJournalListEnumerator.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiDataJournalList.XiDataJournalListEnumerator.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiDataJournalList.XiDataJournalListEnumerator._iEnumerator">
            <summary>
            The typed enumerator for the class
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiDataJournalList.XiDataJournalListEnumerator.MoveNext">
            <summary>
            This method advances the enumerator to the next element of the list.
            </summary>
            <returns>Returns true if the enumerator successfully advanced to the next element 
            in the list; FALSE if the enumerator passed the end of the list.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataJournalList.XiDataJournalListEnumerator.Reset">
            <summary>
            This method sets the enumerator to its initial position, which is the before the first 
            element of the list.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataJournalList.XiDataJournalListEnumerator.Current">
            <summary>
            This property gets the element at the current position of the enumerator 
            and returns it as an object.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataJournalList.XiDataJournalListEnumerator.System#Collections#Generic#IEnumerator{Xi#Client#Base#API#IXiHistoricalDataObject}#Current">
            <summary>
            This property gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiEndpointDiscovery">
            <summary>
            This class is used to locate a server and obtain its list of ServiceEndpoints.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.GetServerEntry(System.String)">
            <summary>
            This static method is used to get the ServerEntry from the server using the URL 
            of its server discovery endpoint.
            </summary>
            <param name="url">the URL of the server's server discovery endpoint</param>
            <returns>Returns the ServerEntry</returns>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.#ctor(Xi.Contracts.Data.ServerEntry)">
            <summary>
            This constructor creates an XiEndpointDiscovery instance from a ServerEntry
            </summary>
            <param name="serverEntry">The ServerEntry to use to create the instance.</param>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.#ctor(System.Uri)">
            <summary>
            This constructor creates an XiEndpointDiscovery instance from the URI of the 
            server's ServerDiscovery endpoint
            </summary>
            <param name="serverDiscoveryUri">The URI of the server's ServerDiscovery endpoint</param>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.#ctor(System.String)">
            <summary>
            This constructor creates an XiEndpointDiscovery instance from the URL of the 
            server's ServerDiscovery endpoint
            </summary>
            <param name="serverDiscoveryUrl">The URL of the server's ServerDiscovery endpoint</param>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.#ctor(System.String,System.Int32,System.String)">
            <summary>
            This constructor creates an XiEndpointDiscovery instance from the 
            components of the URI of the server's ServerDiscovery endpoint.  
            It assumes that HTTP is the protocol.
            </summary>
            <param name="hostName">The host name or IP address of the server</param>
            <param name="port">The port number of the server's ServerDiscovery endpoint</param>
            <param name="serviceName">The name of the service (either "XiServices" or 
            the name or assigned by the server vendor).</param>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.MakeUri(System.String,System.Int32,System.String)">
            <summary>
            This method makes a URI from the host name, port, and service name. 
            It assumes that HTTP is the protocol.
            </summary>
            <param name="hostName">The host name or IP address of the server</param>
            <param name="port">The port number of the server's ServerDiscovery endpoint</param>
            <param name="serviceName">The name of the service (either "XiServices" or 
            the name or assigned by the server vendor).</param>
            <returns>Returns the newly created URI. </returns>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.GetServiceEndpointByContractAndUrl(System.String,System.String)">
            <summary>
            This method searches the list of endpoints for the endpoint with the specified contractType and 
            endpoint URL.
            </summary>
            <param name="contractType">The contractType type of the desired endpoint.</param>
            <param name="url">The URL of the desired endpoint</param>
            <returns>Returns the endpoint with the specified contractType and endpoint URL</returns>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.GetServiceEndpointsByScheme(System.String,System.String)">
            <summary>
            This method searches the list of endpoints for the endpoint with the specified contractType and 
            protocol scheme.
            </summary>
            <param name="contractType">The contractType type of the desired endpoints.</param>
            <param name="scheme">The protocol scheme of the desired endpoints.</param>
            <returns>Returns the endpoints with the specified contractType and protocol scheme.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.GetServiceEndpointsByBinding(System.String,System.Type)">
            <summary>
            This method searches the list of endpoints for the endpoint with the specified contractType and 
            binding type.
            </summary>
            <param name="contractType">The contractType type of the desired endpoints.</param>
            <param name="binding">The binding type of the desired endpoints.</param>
            <returns>Returns the endpoint with the specified contractType and binding type.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.RankReadWriteSubscribeEndpoints(System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            This method ranks the Read, Write, or Subscribe endpoints.  Those with the same binding type 
            as the Resource Management endpoint used to connect to the server are ranked first, followed 
            by tcp, wshttp, and basic http. This method is called after the client connects to the server.
            </summary>
            <param name="connectedResourceManagementEndpoint">The resource management endpoint to which the 
            client is connected.</param>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.GetRankedReadWriteSubscribeServiceEndpoints(System.String)">
            <summary>
            This method searches the list of endpoints for the endpoints with the specified contractType type
            </summary>
            <param name="contractType">The contractType type of the desired endpoint.</param>
            <returns>Returns the endpoints with the specified contractType type</returns>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointDiscovery._serverEntry">
            <summary>
            This data member is the private representation of the ServerEntry interface property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointDiscovery._hasBeenDisposed">
            <summary>
            This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointDiscovery._serverDiscoveryUri">
            <summary>
            This data member contains the URI of the server's Server Discovery endpoint
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointDiscovery._isServerLocal">
            <summary>
            This data member indicates, when TRUE, that the server is on the 
            same machine as the client.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointDiscovery._ServerDiscoveryEndpoint">
            <summary>
            This data member contains the ServiceEndpoint definition of the server's Server Discovery endpoint
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointDiscovery._ResourceManagementServiceEndpoints">
            <summary>
            This data member is the private representation of the ResourceManagementServiceEndpoints interface property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointDiscovery._ReadServiceEndpoints">
            <summary>
            This data member is the private representation of the ReadServiceEndpoints interface property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointDiscovery._WriteServiceEndpoints">
            <summary>
            This data member is the private representation of the WriteServiceEndpoints interface property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointDiscovery._PollServiceEndpoints">
            <summary>
            This data member is the private representation of the PollServiceEndpoints interface property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointDiscovery._RegisterForCallbackServiceEndpoints">
            <summary>
            This data member is the private representation of the RegisterForCallbackServiceEndpoints interface property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointDiscovery.localhostbytes">
            <summary>
            This static data member contains the local IP address bytes. The local IP address is always 127.0.0.1.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointDiscovery.localhostIpAddr">
            <summary>
            This data member contains the local IP address of 127.0.0.1
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointDiscovery._serviceEndpointCollection">
            <summary>
            This data member is the collection of server endpoints retrieved by MEX
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.LoadMexEndpointsAndBindings">
            <summary>
            This method loads the endpoint/binding configuration from the server's MEX endpoint
            and builds the lists for each service contractTypeName.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.ExtractServiceEndpoints">
            <summary>
            This method extracts the server's service endpoints out of the collection returned by MEX,
            determines if the server is local, and sets the identity used to connect to the server if 
            necessary (if the server uses Kerberos).
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.RankResourceMgtEPs">
            <summary>
            This method ranks (sorts) the ResourceManagement endpoints into the following order: netPipe, netTcp, wsHttp, basicHttp.
            Endpoints with the netPipe binding are excluded from the resulting sorted list unless the client and server are on the same machine.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.RankReadWriteSubscribeEndpoints(System.ServiceModel.Description.ServiceEndpoint,System.Collections.Generic.List{System.ServiceModel.Description.ServiceEndpoint})">
            <summary>
            This method ranks the Read, Write, or Subscribe endpoints.  Those with the same binding type 
            as the Resource Management endpoint used to connect to the server are ranked first, followed 
            by tcp, wshttp, and basic http. This method is called after the client connects to the server.
            </summary>
            <param name="connectedResourceManagementEndpoint">The resource management endpoint to which the 
            client is connected.</param>
            <param name="serviceEndpoints">The list of read, write, and subscribe ServiceEndpoint retrieved 
            by MEX.</param>
            <returns>The list of ranked endpoints.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.ModifyEndpoints">
            <summary>
            This method loops through the the endpoint definitions retrieved by MEX and 
            calls ModifyEndpoint() to apply its EndpointConfiguration to each one. 
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointDiscovery.ModifyEndpoint(System.ServiceModel.Description.ServiceEndpoint,Xi.Contracts.Data.EndpointConfiguration)">
            <summary>
            This method applies the EndpointConfiguration info contained in the ServerEntry 
            of the server to the endpoint definitions retrieved by MEX. 
            </summary>
            <param name="sep">The ServiceEndpoint to update.</param>
            <param name="epc">The EndpointConfiguration for the ServiceEndpoint.</param>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointDiscovery.ServerEntry">
            <summary>
            The ServerEntry for the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointDiscovery.HostName">
            <summary>
            The hostname or IP address for the server associated with the endpoints.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointDiscovery.Port">
            <summary>
            The TCP Port number for the server's server discovery endpoint.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointDiscovery.ResourceManagementServiceEndpoints">
            <summary>
            The list of ranked resource management endpoints supported by the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointDiscovery.ReadServiceEndpoints">
            <summary>
            The list of ranked read endpoints supported by the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointDiscovery.WriteServiceEndpoints">
            <summary>
            The list of ranked write endpoints supported by the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointDiscovery.PollServiceEndpoints">
            <summary>
            The list of ranked poll endpoints supported by the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointDiscovery.RegisterForCallbackServiceEndpoints">
            <summary>
            The list of ranked callback endpoints supported by the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointDiscovery.ServerDiscoveryEndpoint">
            <summary>
            The ServiceEndpoint object of the server's Server Discovery Enpoint.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiEndpointBase">
            <summary>
            This abstract base class provides the common functionality for a client endpoint.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointBase.#ctor(Xi.Client.Base.XiContext,Xi.Contracts.Data.EndpointDefinition,System.ServiceModel.Description.ServiceEndpoint,System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
            The contstructor for endpoints
            </summary>
            <param name="xiContext">The context to which this endpoint belongs.</param>
            <param name="endpointDefinition">The EndpointDefinition for this endpoint.</param>
            <param name="serviceEndpoint">TThe ServiceEndpoint definition for this endpoint.</param>
            <param name="receiveTimeout">The inactivity time interval to be used by the server to 
            timeout this endpoint when no requests are received from the client.</param>
            <param name="sendTimeout">The length of time WCF will wait for a response before throwing an exception.</param>
            <param name="maxItemsInObjectGraph">The number of objects the server will serialize into a single response.</param>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointBase.#ctor(Xi.Client.Base.XiEndpointBase)">
            <summary>
            This constructor is used to clone an endpoint and transfer the owning context to the new endpoint being created.
            The context will no longer own the endpoint being cloned, allowing it to be disposed without side-affects 
            associated with the context.
            </summary>
            <param name="xiEndpointBase">The endpoint to clone.</param>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointBase.Finalize">
            <summary>
            The standard destructor invoked by the .NET garbage collector during Finalize.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointBase.Dispose">
            <summary>
            This method disposes of the object.  It is invoked by the client application, client base, or 
            the destructor of this object.  
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointBase.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointBase.HasListAttached(Xi.Client.Base.API.IXiListBase)">
            <summary>
            This method indicates, when TRUE is returned, that the specified XiList 
            has been assigned to this endpoint.
            </summary>
            <param name="xiList">The specified XiList.</param>
            <returns>Returns TRUE if the specified XiList has been assigned to this 
            endpoint, otherwise FALSE.</returns>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointBase._endpointState">
            <summary>
            The state of this endpoint used in the Keep-alive algorithm (see XiContext.KeepContextsAlive()
            and the methods it calls
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointBase._tickCountLastCall">
            <summary>
            The tick count of receipt of the response to the last successful call on this endpoint.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointBase.HasListAttached(Xi.Client.Base.XiListBase)">
            <summary>
            This method indicates, when TRUE is returned, that the specified XiList 
            has been assigned to this endpoint.
            </summary>
            <param name="xiList">The specified XiList.</param>
            <returns>Returns TRUE if the specified XiList has been assigned to this 
            endpoint, otherwise FALSE.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointBase.ThrowOnDisconnectedEndpoint(System.Exception)">
            <summary>
            This method checks the state of the endpoint and throws an exception if the endpoint 
            is not available or communication with the server on the endpoint has been lost.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointBase.IsValid(Xi.Client.Base.API.IXiEndpointBase)">
            <summary>
            This method determines if the connection for the specified endpoint has been created, and if not, 
            attempts to create it. It returns FALSE if the connection is not or cannot be created.
            </summary>
            <param name="endpoint">The specified endpoint</param>
            <returns>It returns FALSE if the connection is not or cannot be created.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointBase.AttachList(Xi.Client.Base.XiListBase)">
            <summary>
            This method adds (assigns) the specified Xi List from the endpoint.
            </summary>
            <param name="xiList">The specified Xi List.</param>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointBase.DetachList(Xi.Client.Base.XiListBase)">
            <summary>
            This method removes (unassigns) the specified Xi List from the endpoint.
            </summary>
            <param name="xiList">The specified Xi List.</param>
        </member>
        <member name="M:Xi.Client.Base.XiEndpointBase.CreateConnection">
            <summary>
            This method creates the WCF Channel Factory for this endpoint and then uses it to create the channel.
            </summary>
            <returns>Returns TRUE if the channel was created, otherwise FALSE.</returns>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointBase._context">
            <summary>
            This data member is the private representation of the public _Context property
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointBase._serviceEndpoint">
            <summary>
            This data member contains the ServiceEndpoint definition of the endpoint received from the server using MEX.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointBase._hasBeenDisposed">
            <summary>
            This member indicates, when TRUE, that the object has been disposed by the Dispose(bool isDisposing) method.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointBase._maxItemsInObjectGraph">
            <summary>
            This data member contains the server's Max Items In Object Graph for this endpoint
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointBase._assignedXiLists">
            <summary>
            This data member contains the list of Xi Lists assigned to this endpoint.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointBase._channel">
            <summary>
            This data member is the WCF channel for this endpoint.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiEndpointBase._endpointDefinition">
            <summary>
            This data member contains the EndpointDefinition returned by the server when the 
            OpenEndpoint() method is called.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointBase.Name">
            <summary>
            The endpoint configuration name as specified by the endpoint name attribute 
            in the server's App.config file. This name may not be unique.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointBase.BindingName">
            <summary>
            The ServiceModel.Description.ServiceEndpoint.Binding.Name for this endpoint.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointBase.ContractName">
            <summary>
            The ServiceModel.Description.ServiceEndpoint.Contract.Name for this endpoint.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointBase.UriAddress">
            <summary>
            The ServiceModel.Description.ServiceEndpoint.Address.Uri.AbsoluteUri for this endpoint.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointBase.ReceiveTimeout">
            <summary>
            This member corresponds to the receiveTimeout attribute in the 
            binding element associated with this endpoint.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointBase.SendTimeout">
            <summary>
            This member corresponds to the sendTimeout attribute in the 
            binding element associated with this endpoint.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointBase.EndpointId">
            <summary>
            The unique identifier of the endpoint assigned by the server.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiEndpointBase._Context">
            <summary>
            This property is the context for which the endpoint is defined.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiReadEndpoint">
            <summary>
            This class defines endpoints that support the Xi IRead interface.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiReadEndpoint.#ctor(Xi.Client.Base.XiContext,Xi.Contracts.Data.EndpointDefinition,System.ServiceModel.Description.ServiceEndpoint,System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
            The contstructor for IRead endpoints
            </summary>
            <param name="xiContext">The context to which this endpoint belongs.</param>
            <param name="endpointDefinition">The EndpointDefinition for this endpoint.</param>
            <param name="serviceEndpoint">TThe ServiceEndpoint definition for this endpoint.</param>
            <param name="receiveTimeout">The inactivity time interval to be used by the server to 
            timeout this endpoint when no requests are received from the client.</param>
            <param name="sendTimeout">The length of time WCF will wait for a response before throwing an exception.</param>
            <param name="maxItemsInObjectGraph">The number of objects the server will serialize into a single response.</param>
        </member>
        <member name="M:Xi.Client.Base.XiReadEndpoint.#ctor(Xi.Client.Base.XiReadEndpoint)">
            <summary>
            This constructor is used to clone an XiReadEndpoint and transfer the owning context to the new endpoint being created.
            The context will no longer own the endpoint being cloned, allowing it to be disposed without side-affects 
            associated with the context.
            </summary>
            <param name="xiReadEndpoint">The XiReadEndpoint to clone.</param>
        </member>
        <member name="M:Xi.Client.Base.XiReadEndpoint.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiReadEndpoint.CreateConnection">
            <summary>
            This method creates the WCF Channel Factory for this endpoint and then uses it to create the channel.
            </summary>
            <returns>Returns TRUE if the channel was created, otherwise FALSE.</returns>
        </member>
        <member name="F:Xi.Client.Base.XiReadEndpoint._iRead">
            <summary>
            This data member is the private representation of the Proxy property.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiReadEndpoint.Proxy">
            <summary>
            This data member is used to make calls on the Xi IRead interface,
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiWriteEndpoint">
            <summary>
            This class defines endpoints that support the Xi IWrite interface.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiWriteEndpoint.#ctor(Xi.Client.Base.XiContext,Xi.Contracts.Data.EndpointDefinition,System.ServiceModel.Description.ServiceEndpoint,System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
            The contstructor for IWrite endpoints
            </summary>
            <param name="xiContext">The context to which this endpoint belongs.</param>
            <param name="endpointDefinition">The EndpointDefinition for this endpoint.</param>
            <param name="serviceEndpoint">TThe ServiceEndpoint definition for this endpoint.</param>
            <param name="receiveTimeout">The inactivity time interval to be used by the server to 
            timeout this endpoint when no requests are received from the client.</param>
            <param name="sendTimeout">The length of time WCF will wait for a response before throwing an exception.</param>
            <param name="maxItemsInObjectGraph">The number of objects the server will serialize into a single response.</param>
        </member>
        <member name="M:Xi.Client.Base.XiWriteEndpoint.#ctor(Xi.Client.Base.XiWriteEndpoint)">
            <summary>
            This constructor is used to clone an XiWriteEndpoint and transfer the owning context to the new endpoint being created.
            The context will no longer own the endpoint being cloned, allowing it to be disposed without side-affects 
            associated with the context.
            </summary>
            <param name="xiWriteEndpoint">The XiWriteEndpoint to clone.</param>
        </member>
        <member name="M:Xi.Client.Base.XiWriteEndpoint.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiWriteEndpoint.CreateConnection">
            <summary>
            This method creates the WCF Channel Factory for this endpoint and then uses it to create the channel.
            </summary>
            <returns>Returns TRUE if the channel was created, otherwise FALSE.</returns>
        </member>
        <member name="F:Xi.Client.Base.XiWriteEndpoint._iWrite">
            <summary>
            This data member is the private representation of the Proxy property.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiWriteEndpoint.Proxy">
            <summary>
            This data member is used to make calls on the Xi IWrite interface,
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiPollEndpoint">
            <summary>
            This class defines endpoints that support the Xi IPoll interface.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiPollEndpoint.#ctor(Xi.Client.Base.XiContext,Xi.Contracts.Data.EndpointDefinition,System.ServiceModel.Description.ServiceEndpoint,System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
            The contstructor for IPoll endpoints
            </summary>
            <param name="xiContext">The context to which this endpoint belongs.</param>
            <param name="endpointDefinition">The EndpointDefinition for this endpoint.</param>
            <param name="serviceEndpoint">TThe ServiceEndpoint definition for this endpoint.</param>
            <param name="receiveTimeout">The inactivity time interval to be used by the server to 
            timeout this endpoint when no requests are received from the client.</param>
            <param name="sendTimeout">The length of time WCF will wait for a response before throwing an exception.</param>
            <param name="maxItemsInObjectGraph">The number of objects the server will serialize into a single response.</param>
        </member>
        <member name="M:Xi.Client.Base.XiPollEndpoint.#ctor(Xi.Client.Base.XiPollEndpoint)">
            <summary>
            This constructor is used to clone an XiPollEndpoint and transfer the owning context to the new endpoint being created.
            The context will no longer own the endpoint being cloned, allowing it to be disposed without side-affects 
            associated with the context.
            </summary>
            <param name="xiPollEndpoint">The XiPollEndpoint to clone.</param>
        </member>
        <member name="M:Xi.Client.Base.XiPollEndpoint.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiPollEndpoint.CreateConnection">
            <summary>
            This method creates the WCF Channel Factory for this endpoint and then uses it to create the channel.
            </summary>
            <returns>Returns TRUE if the channel was created, otherwise FALSE.</returns>
        </member>
        <member name="F:Xi.Client.Base.XiPollEndpoint._iPoll">
            <summary>
            This data member is the private representation of the Proxy property.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiPollEndpoint.Proxy">
            <summary>
            This data member is used to make calls on the Xi IPoll interface,
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiCallbackEndpoint">
            <summary>
            This class defines endpoints that support the Xi IRegisterForCallback and ICallback interfaces.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiCallbackEndpoint.#ctor(Xi.Client.Base.XiContext,Xi.Contracts.Data.EndpointDefinition,System.ServiceModel.Description.ServiceEndpoint,System.TimeSpan,System.TimeSpan,System.Int32)">
            <summary>
            The contstructor for IRegisterForCallback/ICallback endpoints
            </summary>
            <param name="xiContext">The context to which this endpoint belongs.</param>
            <param name="endpointDefinition">The EndpointDefinition for this endpoint.</param>
            <param name="serviceEndpoint">TThe ServiceEndpoint definition for this endpoint.</param>
            <param name="receiveTimeout">The inactivity time interval to be used by the server to 
            timeout this endpoint when no requests are received from the client.</param>
            <param name="sendTimeout">The length of time WCF will wait for a response before throwing an exception.</param>
            <param name="maxItemsInObjectGraph">The number of objects the server will serialize into a single response.</param>
        </member>
        <member name="M:Xi.Client.Base.XiCallbackEndpoint.#ctor(Xi.Client.Base.XiCallbackEndpoint)">
            <summary>
            This constructor is used to clone an XiCallbackEndpoint and transfer the owning context to the new endpoint being created.
            The context will no longer own the endpoint being cloned, allowing it to be disposed without side-affects 
            associated with the context.
            </summary>
            <param name="xiCallbackEndpoint">The XiCallbackEndpoint to clone.</param>
        </member>
        <member name="M:Xi.Client.Base.XiCallbackEndpoint.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiCallbackEndpoint.SetCallback(System.UInt32,System.TimeSpan)">
            <summary>
            This method is invoked to allow the client to set or change the 
            keepAliveSkipCount and callbackRate. The first time this method is 
            invoked the server obtains the callback interface from the client.  
            Therefore, this method must be called at least once for each 
            callback endpoint to enable the server to make the callbacks.
            </summary>
            <param name="keepAliveSkipCount">
            The client-requested keepAliveSkipCount for lists that the server may negotiate 
            up or down. The keepAliveSkipCount indicates the number of consecutive 
            UpdateRate cycles for a list that occur with nothing to send before an empty 
            callback is sent to indicate a keep-alive message. For example, if the value 
            of this parameter is 1, then a keep-alive callback will be sent each UpdateRate 
            cycle for each list assigned to the callback for which there is nothing to send. 
            A value of 0 indicates that keep-alives are not to be sent for any list assigned 
            to the callback.
            </param>
            <param name="callbackRate">
            <para>The callback rate indicates the maximum time between callbacks that are sent 
            to the client. The server may negotiate this value up or down, but a null value or 
            a value representing 0 time is not valid.  </para>
            <para>If there are no callbacks to be sent containing data or events for this period 
            of time, an empty callback will be sent as a keep-alive.  The timer for this 
            time-interval starts when the SetCallback() response is returned by the server.  </para>
            </param>
            <returns>
            The results of the operation, including the negotiated keep-alive skip count and callback rate.
            </returns>
        </member>
        <member name="M:Xi.Client.Base.XiCallbackEndpoint.CreateConnection">
            <summary>
            This method creates the WCF Channel Factory for this endpoint and then uses it to create the channel.
            </summary>
            <returns>Returns TRUE if the channel was created, otherwise FALSE.</returns>
        </member>
        <member name="F:Xi.Client.Base.XiCallbackEndpoint._xiCallback">
            <summary>
            This data member is used to make calls on the Xi ICallback interface.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiCallbackEndpoint._iRegisterForCallback">
            <summary>
            This data member is the private representation of the Proxy property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiCallbackEndpoint._keepAliveSkipCount">
            <summary>
            This data member is the private representation of the KeepAliveSkipCount property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiCallbackEndpoint._callbackRate">
            <summary>
            This data member is the private representation of the CallbackRate property.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiCallbackEndpoint.Proxy">
            <summary>
            This property is used to make calls on the Xi IRegisterForCallback interface.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiCallbackEndpoint.KeepAliveSkipCount">
            <summary>
            The Keep Alive Skip Count for the callback endpoint. The keepAliveSkipCount 
            indicates the number of consecutive UpdateRate cycles for a list that occur 
            with nothing to send before an empty callback is sent to indicate a keep-alive 
            message. For example, if the value of this parameter is 1, then a keep-alive 
            callback will be sent each UpdateRate cycle for each list assigned to the callback 
            for which there is nothing to send.  A value of 0 indicates that keep-alives are 
            not to be sent for any list assigned to the callback.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiCallbackEndpoint.CallbackRate">
            <summary>
            <para>The callback rate indicates the maximum time between callbacks that are sent 
            to the client. The server may negotiate this value up or down, but a null value or 
            a value representing 0 time is not valid.  </para>
            <para>If there are no callbacks to be sent containing data or events for this period 
            of time, an empty callback will be sent as a keep-alive.  The timer for this 
            time-interval starts when the SetCallback() response is returned by the server.  </para>
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiCallback">
            <summary>
            This class provides the method for the ICallback interface
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiCallback.Xi#Contracts#ICallback#Abort(System.String,Xi.Contracts.Data.ServerStatus,System.String)">
            <summary>
            <para>This callback method is implemented by the client to 
            be notified when the server server state changes to Aborting.  
            Clients that use the poll interface instead of this callback 
            interface can add the ServerDescription object to a data 
            object list to be notified when the server state transitions   
            to the aborting state.</para> 
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="serverStatus">
            The ServerStatus object that describes the server that is shutting down.
            </param>
            <param name="reason">
            The reason the context is being closed.
            </param>
        </member>
        <member name="M:Xi.Client.Base.XiCallback.Xi#Contracts#ICallback#InformationReport(System.String,System.UInt32,Xi.Contracts.Data.DataValueArraysWithAlias)">
            <summary>
            <para>This callback method is implemented by the client 
            to receive data changes. </para> 
            <para> Servers send data changes to the client that have 
            not been reported to the client via this method.  
            Changes consists of:</para>
            <para>1) values for data objects that were added to the list,</para> 
            <para>2) values for data objects whose current values 
            have changed since the last time they were reported to the 
            client via this interface.  If a deadband filter has been 
            defined for the list, floating point values are not considered 
            to have changed unless they have changed by the deadband amount.</para>
            <para>3) historical values that meet the list filter criteria, 
            including the deadband.</para> 
            <para>In addition, the server may insert a special value that 
            indicates the server or one of its wrapped servers are shutting down.  </para>
            <para>This value is inserted as the first value in the list of values 
            in the callback. Its ListId and ClientId are both 0 and its data type is 
            ServerStatus. </para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="clientListId">
            The client identifier of the list for which data changes are being 
            reported.
            </param>
            <param name="updatedValues">
            The values being reported.
            </param>
        </member>
        <member name="M:Xi.Client.Base.XiCallback.Xi#Contracts#ICallback#EventNotification(System.String,System.UInt32,Xi.Contracts.Data.EventMessage[])">
            <summary>
            <para>This callback method is implemented by the client to 
            receive alarms and events.</para> 
            <para> Servers send event messages to the client via this 
            interface.  Event messages are sent when there has been a 
            change to the specified event list. A new alarm or event 
            that has been added to the list, a change to an alarm already 
            in the list, or the deletion of an alarm from the list 
            constitutes a change to the list.</para>
            <para>Once an event has been reported from the list, it 
            is automatically deleted from the list.  Alarms are only 
            deleted from the list when they transition to inactive and 
            acknowledged.  </para>
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="clientListId">
            The client identifier of the list for which alarms/events are being 
            reported.
            </param>
            <param name="eventsArray">
            The list of alarms/events are being reported.
            </param>
        </member>
        <member name="M:Xi.Client.Base.XiCallback.Xi#Contracts#ICallback#PassthroughCallback(System.String,System.Int32,Xi.Contracts.Data.PassthroughResult)">
            <summary>
            This method returns the results of invoking an asynchronous passthrough.
            </summary>
            <param name="contextId">
            The context identifier.
            </param>
            <param name="invokeId">
            The identifier for this invocation of the passthrough defined by the client 
            in the request.  
            </param>
            <param name="passthroughResult">
            The result of executing the passthrough, consisting of the result code, the invokeId 
            supplied in the request, and a byte array.  It is up to the client application to 
            interpret this byte array.  
            </param>
        </member>
        <member name="T:Xi.Client.Base.EndpointState">
            <summary>
            This flag indicates that the WCF Connection for the IResourceManagement 
            state has failed and the Context is attempting to re-establish communications
            with the server.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.EndpointState.Open">
            <summary>
             The endpoint is open and ready for use
            </summary>
        </member>
        <member name="F:Xi.Client.Base.EndpointState.CommunicationsFail">
            <summary>
            A communication failure has been detected for the endpoint
            </summary>
        </member>
        <member name="F:Xi.Client.Base.EndpointState.ResponsePending">
            <summary>
            A request to the server has been sent and the response is pending (not yet received)
            </summary>
        </member>
        <member name="F:Xi.Client.Base.EndpointState.ResponseDelayed">
            <summary>
            A request to the server has been sent and the response was pending, but is now delayed.
            This transition takes place if the response is pending more than one execution of the 
            keep-alive timer loop - see XiContext.KeepEndpointsAlive()
            </summary>
        </member>
        <member name="F:Xi.Client.Base.EndpointState.TimedOut">
            <summary>
            The endpoint has timed-out and is to be deleted
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiDataObjectCollection`1">
            <summary>
            Defines a class that provides a Keyed Collection of Xi Values.  
            The Xi Lists provided by the Xi Client Base assembly keep the 
            contained Xi Values as an instance of this class.
            </summary>
            <typeparam name="TValue">
            Is a subclass of Xi Value Base.  This then becomes a collection 
            of the Xi Value types needed by the Xi List.
            </typeparam>
        </member>
        <member name="M:Xi.Client.Base.XiDataObjectCollection`1.GetKeyForItem(`0)">
            <summary>
            This method returns the key for a data object in the keyed collection. The key is the client alias 
            of the data object.
            </summary>
            <param name="dataObject">The data object for which the key is returned.</param>
            <returns></returns>
        </member>
        <member name="P:Xi.Client.Base.XiDataObjectCollection`1.Dictionary">
            <summary>
            This property provides access to the dictionary element of the Keyed Collection.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiDataObject">
            <summary>
            The Xi Data List Value class is used by the Xi Data List 
            to represent a single process data value along with its 
            status / quality and time stamp.
            </summary>
        </member>
        <member name="M:Xi.Client.Base.XiDataObject.#ctor(System.UInt32,Xi.Contracts.Data.InstanceId,Xi.Contracts.Constants.ListElementOptions)">
            <summary>
            This constructor creates an Xi Data Object using its client alias and Instance Id.
            </summary>
            <param name="clientAlias">
            The client alias to be assigned to this Xi Value as its local handle.
            </param>
            <param name="instanceId">
            The InstanceId used by the server to identify the data object. 
            </param>
            <param name="options">This parameter defines additional options for adding the data object to the list.</param>
        </member>
        <member name="M:Xi.Client.Base.XiDataObject.Dispose(System.Boolean)">
            <summary>
            This method disposes of the object.  It is invoked by the parameterless Dispose() 
            method of this object.
            </summary>
            <param name="isDisposing">
            <para>This parameter indicates, when TRUE, this Dispose() method was called directly
            or indirectly by a user's code. When FALSE, this method was called by the
            runtime from inside the finalizer.</para>
            <para>When called by user code, references within the class should be valid and 
            should be disposed of properly.  When called by the finalizer, references within 
            the class are not guaranteed to be valid and attempts to dispose of them should 
            not be made.</para>
            </param>
            <returns>Returns TRUE to indicate that the object has been disposed.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataObject.PrepWriteValue(Xi.Client.Base.API.XiDataValue)">
            <summary>
            This method is used to set PendingWriteValue to a value to be written.  
            If the data object is not writable, this method sets PendingWriteValue 
            to null. After preparing one or more data objects to be written, the 
            client application issues the data list CommitDataObjectWrites() method 
            to write them to the server in a single call.
            </summary>
            <param name="dataValue">The data value to be written.</param>
            <returns>Returns TRUE if the data object is writable, otherwise FALSE.</returns>
        </member>
        <member name="M:Xi.Client.Base.XiDataObject.UpdateValue(System.UInt32,System.DateTime,System.UInt32)">
            <summary>
            This method is called by the ClientBase when a new value has been received for 
            the data object from the server. It, in turn, calls the Update() method on the 
            DataValue property to complete the update, and then increments the update count 
            for the data object.
            </summary>
            <param name="statusCode">The Xi StatusCode of the value.</param>
            <param name="timeStamp">The timestamp of the value.</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Xi.Client.Base.XiDataObject.UpdateValue(System.UInt32,System.DateTime,System.Double)">
            <summary>
            This method is called by the ClientBase when a new value has been received for 
            the data object from the server. It, in turn, calls the Update() method on the 
            DataValue property to complete the update, and then increments the update count 
            for the data object.
            </summary>
            <param name="statusCode">The Xi StatusCode of the value.</param>
            <param name="timeStamp">The timestamp of the value.</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Xi.Client.Base.XiDataObject.UpdateValue(System.UInt32,System.DateTime,System.Object)">
            <summary>
            This method is called by the ClientBase when a new value has been received for 
            the data object from the server. It, in turn, calls the Update() method on the 
            DataValue property to complete the update, and then increments the update count 
            for the data object.
            </summary>
            <param name="statusCode">The Xi StatusCode of the value.</param>
            <param name="timeStamp">The timestamp of the value.</param>
            <param name="value">The value</param>
        </member>
        <member name="F:Xi.Client.Base.XiDataObject._value">
            <summary>
            This data member is the private representation of the DataValue property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiDataObject._pendingWriteDataValue">
            <summary>
            This data member is the private representation of the PendingWriteDataValue property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiDataObject._resultCodeWrite">
            <summary>
            This data member is the private representation of the ResultCodeWrite property.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiDataObject._resultCodeReceivedValue">
            <summary>
            This data member is the private representation of the ResultCodeReceivedValue property.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataObject.DataValue">
            <summary>
            This property contains the data value for the data object.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataObject.PendingWriteValue">
            <summary>
            This property contains the data value that is to be written to the data object.
            Prior to writing a value to the server, the client application sets the 
            PendingWriteValue for one or more data objects using the PrepWriteValue() method, 
            and then issues the data list CommitDataObjectWrites() method to write them 
            to the server in a single call.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataObject.ResultCodeWrite">
            <summary>
            This property contains the result code associated with writing the PendingWriteValue. 
            See XiFaultCodes class for standardized result codes.
            </summary>
        </member>
        <member name="P:Xi.Client.Base.XiDataObject.ResultCodeReceivedValue">
            <summary>
            This property is the result code for the last received value on this data object,
            obtained in a read response, a poll response or a callback.  It is set to 
            XiFaultCodes.E_INVALIDVALUE_BADSTATUS if the status code of the value indicates 
            the value is bad.
            See XiFaultCodes class for standardized result codes.
            </summary>
        </member>
        <member name="T:Xi.Client.Base.XiListElementState">
            <summary>
            This enumeration defines the allowable states of and XiList element.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiListElementState.AddedElement">
            <summary>
            This state indicates that the list element has just been created and added to the
            Xi Client List.  However, it has not been added to the Xi Server List.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiListElementState.Disabled">
            <summary>
            This state indicates that the list element has been added to the Xi Server List 
            and is currently not Enabled.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiListElementState.Enabled">
            <summary>
            This state indicates that the list element has been added to the Xi Server List 
            and is currently Enabled.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiListElementState.RemoveableFromServer">
            <summary>
            This state indicates that the list element may be removed from the Xi Server's List.
            </summary>
        </member>
        <member name="F:Xi.Client.Base.XiListElementState.Disposable">
            <summary>
            This state indicates that the list element has been removed from both the Xi Server's 
            List and the Xi Client's List and is ready for Dispose or Finalize.  Note: It is not 
            valid to Dispose / Finalize (garbage collect) a list element before its state is 
            Disposable Value.
            </summary>
        </member>
    </members>
</doc>
